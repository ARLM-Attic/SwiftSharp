// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "Swiften/SwiftParser.jay"
using System.Text;
using System.IO;
using System;
using System.Collections.Generic;

#pragma warning disable 219,414

namespace Swiften
{
	public partial class SwiftParser
	{
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = new StringWriter ();

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }

  /* An EOF token */
  public int eof_token;

  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
//t  internal yydebug.yyDebug debug;

  protected const int yyFinal = 51;
//t // Put this array into a separate class so it is only initialized if debugging is actually used
//t // Use MarshalByRefObject to disable inlining
//t class YYRules : MarshalByRefObject {
//t  public static readonly string [] yyRule = {
//t    "$accept : top_level_declaration",
//t    "statement : expression statement_end",
//t    "statement : declaration statement_end",
//t    "statement : loop_statement statement_end",
//t    "statement : branch_statement statement_end",
//t    "statement : labeled_statement NEWLINE",
//t    "statement : labeled_statement END",
//t    "statement : control_transfer_statement statement_end",
//t    "statement_end : NEWLINE",
//t    "statement_end : ';'",
//t    "statement_end : END",
//t    "statements : statement",
//t    "statements : statement statements",
//t    "loop_statement : for_statement",
//t    "loop_statement : for_in_statement",
//t    "loop_statement : while_statement",
//t    "loop_statement : do_while_statement",
//t    "for_statement : FOR for_init ';' expression ';' expression code_block",
//t    "for_statement : FOR for_init ';' expression ';' code_block",
//t    "for_statement : FOR for_init ';' ';' expression code_block",
//t    "for_statement : FOR for_init ';' ';' code_block",
//t    "for_statement : FOR ';' expression ';' expression code_block",
//t    "for_statement : FOR ';' expression ';' code_block",
//t    "for_statement : FOR ';' ';' expression code_block",
//t    "for_statement : FOR ';' ';' code_block",
//t    "for_statement : FOR '(' for_init ';' expression ';' expression ')' code_block",
//t    "for_statement : FOR '(' for_init ';' expression ';' ')' code_block",
//t    "for_statement : FOR '(' for_init ';' ';' expression ')' code_block",
//t    "for_statement : FOR '(' for_init ';' ';' ')' code_block",
//t    "for_statement : FOR '(' ';' expression ';' expression ')' code_block",
//t    "for_statement : FOR '(' ';' expression ';' ')' code_block",
//t    "for_statement : FOR '(' ';' ';' expression ')' code_block",
//t    "for_statement : FOR '(' ';' ';' ')' code_block",
//t    "for_init : variable_declaration",
//t    "for_init : expression_list",
//t    "for_in_statement : FOR pattern IN expression code_block",
//t    "while_statement : WHILE while_condition code_block",
//t    "while_condition : expression",
//t    "while_condition : declaration",
//t    "do_while_statement : DO code_block WHILE while_condition",
//t    "branch_statement : if_statement",
//t    "branch_statement : switch_statement",
//t    "if_statement : IF if_condition code_block else_clause",
//t    "if_statement : IF if_condition code_block",
//t    "if_condition : expression",
//t    "if_condition : declaration",
//t    "else_clause : ELSE code_block",
//t    "else_clause : ELSE if_statement",
//t    "switch_statement : SWITCH expression '{' switch_cases '}'",
//t    "switch_statement : SWITCH expression '{' '}'",
//t    "switch_cases : switch_case",
//t    "switch_cases : switch_case switch_cases",
//t    "switch_case : case_label statements",
//t    "switch_case : default_label statements",
//t    "switch_case : case_label ';'",
//t    "switch_case : default_label ';'",
//t    "case_label : CASE case_item_list ':'",
//t    "case_item : pattern guard_clause",
//t    "case_item : pattern",
//t    "case_item_list : case_item",
//t    "case_item_list : case_item case_item_list",
//t    "default_label : DEFAULT ':'",
//t    "guard_clause : WHERE guard_expression",
//t    "guard_expression : expression",
//t    "labeled_statement : statement_label loop_statement",
//t    "labeled_statement : statement_label switch_statement",
//t    "statement_label : label_name ':'",
//t    "label_name : identifier",
//t    "control_transfer_statement : break_statement",
//t    "control_transfer_statement : continue_statement",
//t    "control_transfer_statement : fallthrough_statement",
//t    "control_transfer_statement : return_statement",
//t    "break_statement : BREAK label_name",
//t    "break_statement : BREAK",
//t    "continue_statement : CONTINUE label_name",
//t    "continue_statement : CONTINUE",
//t    "fallthrough_statement : FALLTHROUGH",
//t    "return_statement : RETURN expression",
//t    "return_statement : RETURN",
//t    "generic_parameter_clause : '<' generic_parameter_list requirement_clause '>'",
//t    "generic_parameter_clause : '<' generic_parameter_list '>'",
//t    "generic_parameter_list : generic_parameter",
//t    "generic_parameter_list : generic_parameter ',' generic_parameter_list",
//t    "generic_parameter : type_name",
//t    "generic_parameter : type_name ':' type_identifier",
//t    "generic_parameter : type_name ':' protocol_composition_type",
//t    "requirement_clause : WHERE requirement_list",
//t    "requirement_list : requirement",
//t    "requirement_list : requirement ',' requirement_list",
//t    "requirement : conformance_requirement",
//t    "requirement : same_type_requirement",
//t    "conformance_requirement : type_identifier ':' type_identifier",
//t    "conformance_requirement : type_identifier ':' protocol_composition_type",
//t    "same_type_requirement : type_identifier EQEQ_OP type_identifier",
//t    "generic_argument_clause : '<' generic_argument_list '>'",
//t    "generic_argument_list : generic_argument",
//t    "generic_argument_list : generic_argument ',' generic_argument_list",
//t    "generic_argument : type",
//t    "declaration : import_declaration",
//t    "declaration : constant_declaration",
//t    "declaration : variable_declaration",
//t    "declaration : typealias_declaration",
//t    "declaration : function_declaration",
//t    "declaration : enum_declaration",
//t    "declaration : struct_declaration",
//t    "declaration : class_declaration",
//t    "declaration : protocol_declaration",
//t    "declaration : initializer_declaration",
//t    "declaration : deinitializer_declaration",
//t    "declaration : extension_declaration",
//t    "declaration : subscript_declaration",
//t    "declaration : operator_declaration",
//t    "declarations : declaration",
//t    "declarations : declaration declarations",
//t    "declaration_specifiers : declaration_specifier",
//t    "declaration_specifiers : declaration_specifier declaration_specifiers",
//t    "declaration_specifier : CLASS",
//t    "declaration_specifier : MUTATING",
//t    "declaration_specifier : NONMUTATING",
//t    "declaration_specifier : OVERRIDE",
//t    "declaration_specifier : STATIC",
//t    "declaration_specifier : UNOWNED",
//t    "declaration_specifier : UNOWNED_SAFE",
//t    "declaration_specifier : UNOWNED_UNSAFE",
//t    "declaration_specifier : WEAK",
//t    "top_level_declaration : statements",
//t    "top_level_declaration :",
//t    "code_block : '{' statements '}'",
//t    "code_block : '{' '}'",
//t    "import_declaration : attributes IMPORT import_kind import_path",
//t    "import_declaration : attributes IMPORT import_path",
//t    "import_declaration : IMPORT import_kind import_path",
//t    "import_declaration : IMPORT import_path",
//t    "import_kind : TYEPALIAS",
//t    "import_kind : STRUCT",
//t    "import_kind : CLASS",
//t    "import_kind : ENUM",
//t    "import_kind : PROTOCOL",
//t    "import_kind : VAR",
//t    "import_kind : FUNC",
//t    "import_path : import_path_identifier",
//t    "import_path : import_path_identifier '.' import_path",
//t    "import_path_identifier : identifier",
//t    "import_path_identifier : operator_",
//t    "constant_declaration : attributes declaration_specifiers LET pattern_initializer_list",
//t    "constant_declaration : attributes LET pattern_initializer_list",
//t    "constant_declaration : declaration_specifiers LET pattern_initializer_list",
//t    "constant_declaration : LET pattern_initializer_list",
//t    "pattern_initializer_list : pattern_initializer",
//t    "pattern_initializer_list : pattern_initializer ',' pattern_initializer_list",
//t    "pattern_initializer : pattern initializer",
//t    "pattern_initializer : pattern",
//t    "initializer : expression",
//t    "variable_declaration : variable_declaration_head pattern_initializer_list",
//t    "variable_declaration : variable_declaration_head variable_name type_annotation code_block",
//t    "variable_declaration : variable_declaration_head variable_name type_annotation getter_setter_block",
//t    "variable_declaration : variable_declaration_head variable_name type_annotation getter_setter_keyword_block",
//t    "variable_declaration : variable_declaration_head variable_name type_annotation initializer willSet_didSet_block",
//t    "variable_declaration : variable_declaration_head variable_name type_annotation willSet_didSet_block",
//t    "variable_declaration_head : attributes declaration_specifiers VAR",
//t    "variable_declaration_head : attributes VAR",
//t    "variable_declaration_head : declaration_specifiers VAR",
//t    "variable_declaration_head : VAR",
//t    "variable_name : identifier",
//t    "getter_setter_block : '{' getter_clause setter_clause '}'",
//t    "getter_setter_block : '{' getter_clause '}'",
//t    "getter_setter_block : '{' setter_clause getter_clause '}'",
//t    "getter_clause : attributes GET code_block",
//t    "getter_clause : GET code_block",
//t    "setter_clause : attributes SET setter_name code_block",
//t    "setter_clause : attributes SET code_block",
//t    "setter_clause : SET setter_name code_block",
//t    "setter_clause : SET code_block",
//t    "setter_name : '(' identifier ')'",
//t    "getter_setter_keyword_block : '{' getter_keyword_clause setter_keyword_clause '}'",
//t    "getter_setter_keyword_block : '{' getter_keyword_clause '}'",
//t    "getter_setter_keyword_block : '{' setter_keyword_clause getter_keyword_clause '}'",
//t    "getter_keyword_clause : attributes GET",
//t    "getter_keyword_clause : GET",
//t    "setter_keyword_clause : attributes SET",
//t    "setter_keyword_clause : SET",
//t    "willSet_didSet_block : '{' willSet_clause didSet_clause '}'",
//t    "willSet_didSet_block : '{' willSet_clause '}'",
//t    "willSet_didSet_block : '{' didSet_clause willSet_clause '}'",
//t    "willSet_clause : attributes WILLSET setter_name code_block",
//t    "willSet_clause : attributes WILLSET code_block",
//t    "willSet_clause : WILLSET setter_name code_block",
//t    "willSet_clause : WILLSET code_block",
//t    "didSet_clause : attributes DIDSET setter_name code_block",
//t    "didSet_clause : attributes DIDSET code_block",
//t    "didSet_clause : DIDSET setter_name code_block",
//t    "didSet_clause : DIDSET code_block",
//t    "typealias_declaration : typealias_head typealias_assignment",
//t    "typealias_head : TYPEALIAS typealias_name",
//t    "typealias_name : identifier",
//t    "typealias_assignment : '=' type",
//t    "function_declaration : function_head function_name generic_parameter_clause function_signature function_body",
//t    "function_declaration : function_head function_name function_signature function_body",
//t    "function_head : attributes declaration_specifiers FUNC",
//t    "function_head : attributes FUNC",
//t    "function_head : declaration_specifiers FUNC",
//t    "function_head : FUNC",
//t    "function_name : identifier",
//t    "function_name : operator_",
//t    "function_signature : parameter_clauses function_result",
//t    "function_signature : parameter_clauses",
//t    "function_result : ARROW_OP attributes type",
//t    "function_result : ARROW_OP type",
//t    "function_body : code_block",
//t    "parameter_clauses : parameter_clause",
//t    "parameter_clauses : parameter_clause parameter_clauses",
//t    "parameter_clause : '(' ')'",
//t    "parameter_clause : '(' parameter_list DOTDOTDOT_OP ')'",
//t    "parameter_clause : '(' parameter_list ')'",
//t    "parameter_list : parameter",
//t    "parameter_list : parameter ',' parameter_list",
//t    "parameter : parameter_head local_parameter_name type_annotation default_argument_clause",
//t    "parameter : parameter_head local_parameter_name type_annotation",
//t    "parameter : parameter_head type_annotation default_argument_clause",
//t    "parameter : parameter_head type_annotation",
//t    "parameter : attributes type",
//t    "parameter : type",
//t    "parameter_head : INOUT LET '#' parameter_name",
//t    "parameter_head : INOUT LET parameter_name",
//t    "parameter_head : INOUT '#' parameter_name",
//t    "parameter_head : INOUT parameter_name",
//t    "parameter_head : LET '#' parameter_name",
//t    "parameter_head : LET parameter_name",
//t    "parameter_head : '#' parameter_name",
//t    "parameter_head : parameter_name",
//t    "parameter_head : INOUT VAR '#' parameter_name",
//t    "parameter_head : INOUT VAR parameter_name",
//t    "parameter_head : VAR '#' parameter_name",
//t    "parameter_head : VAR parameter_name",
//t    "parameter_name : identifier",
//t    "parameter_name : '_'",
//t    "local_parameter_name : identifier",
//t    "local_parameter_name : '_'",
//t    "default_argument_clause : expression",
//t    "enum_declaration : attributes ENUM union_style_enum",
//t    "enum_declaration : ENUM union_style_enum",
//t    "enum_declaration : attributes ENUM raw_value_style_enum",
//t    "enum_declaration : ENUM raw_value_style_enum",
//t    "union_style_enum : enum_name generic_parameter_clause '{' union_style_enum_members '}'",
//t    "union_style_enum : enum_name generic_parameter_clause '{' '}'",
//t    "union_style_enum : enum_name '{' union_style_enum_members '}'",
//t    "union_style_enum : enum_name '{' '}'",
//t    "union_style_enum_members : union_style_enum_member",
//t    "union_style_enum_members : union_style_enum_member union_style_enum_members",
//t    "union_style_enum_member : declaration",
//t    "union_style_enum_member : union_style_enum_case_clause",
//t    "union_style_enum_case_clause : attributes CASE union_style_enum_case_list",
//t    "union_style_enum_case_clause : CASE union_style_enum_case_list",
//t    "union_style_enum_case_list : union_style_enum_case",
//t    "union_style_enum_case_list : union_style_enum_case ',' union_style_enum_case_list",
//t    "union_style_enum_case : enum_case_name tuple_type",
//t    "union_style_enum_case : enum_case_name",
//t    "enum_name : identifier",
//t    "enum_case_name : identifier",
//t    "raw_value_style_enum : enum_name generic_parameter_clause ':' type_identifier '{' raw_value_style_enum_members '}'",
//t    "raw_value_style_enum : enum_name generic_parameter_clause ':' type_identifier '{' '}'",
//t    "raw_value_style_enum : enum_name ':' type_identifier '{' raw_value_style_enum_members '}'",
//t    "raw_value_style_enum : enum_name ':' type_identifier '{' '}'",
//t    "raw_value_style_enum_members : raw_value_style_enum_member",
//t    "raw_value_style_enum_members : raw_value_style_enum_member raw_value_style_enum_members",
//t    "raw_value_style_enum_member : declaration",
//t    "raw_value_style_enum_member : raw_value_style_enum_case_clause",
//t    "raw_value_style_enum_case_clause : attributes CASE raw_value_style_enum_case_list",
//t    "raw_value_style_enum_case_clause : CASE raw_value_style_enum_case_list",
//t    "raw_value_style_enum_case_list : raw_value_style_enum_case",
//t    "raw_value_style_enum_case_list : raw_value_style_enum_case ',' raw_value_style_enum_case_list",
//t    "raw_value_style_enum_case : enum_case_name raw_value_assignment",
//t    "raw_value_style_enum_case : enum_case_name",
//t    "raw_value_assignment : '=' literal",
//t    "struct_declaration : attributes STRUCT struct_name generic_parameter_clause type_inheritance_clause struct_body",
//t    "struct_declaration : attributes STRUCT struct_name generic_parameter_clause struct_body",
//t    "struct_declaration : attributes STRUCT struct_name type_inheritance_clause struct_body",
//t    "struct_declaration : attributes STRUCT struct_name struct_body",
//t    "struct_declaration : STRUCT struct_name generic_parameter_clause type_inheritance_clause struct_body",
//t    "struct_declaration : STRUCT struct_name generic_parameter_clause struct_body",
//t    "struct_declaration : STRUCT struct_name type_inheritance_clause struct_body",
//t    "struct_declaration : STRUCT struct_name struct_body",
//t    "struct_name : identifier",
//t    "struct_body : '{' declarations '}'",
//t    "struct_body : '{' '}'",
//t    "class_declaration : attributes CLASS class_name generic_parameter_clause type_inheritance_clause class_body",
//t    "class_declaration : attributes CLASS class_name generic_parameter_clause class_body",
//t    "class_declaration : attributes CLASS class_name type_inheritance_clause class_body",
//t    "class_declaration : attributes CLASS class_name class_body",
//t    "class_declaration : CLASS class_name generic_parameter_clause type_inheritance_clause class_body",
//t    "class_declaration : CLASS class_name generic_parameter_clause class_body",
//t    "class_declaration : CLASS class_name type_inheritance_clause class_body",
//t    "class_declaration : CLASS class_name class_body",
//t    "class_name : identifier",
//t    "class_body : '{' declarations '}'",
//t    "class_body : '{' '}'",
//t    "protocol_declaration : attributes PROTOCOL protocol_name type_inheritance_clause protocol_body",
//t    "protocol_declaration : attributes PROTOCOL protocol_name protocol_body",
//t    "protocol_declaration : PROTOCOL protocol_name type_inheritance_clause protocol_body",
//t    "protocol_declaration : PROTOCOL protocol_name protocol_body",
//t    "protocol_name : identifier",
//t    "protocol_body : '{' protocol_member_declarations '}'",
//t    "protocol_body : '{' '}'",
//t    "protocol_member_declaration : protocol_property_declaration",
//t    "protocol_member_declaration : protocol_method_declaration",
//t    "protocol_member_declaration : protocol_initializer_declaration",
//t    "protocol_member_declaration : protocol_subscript_declaration",
//t    "protocol_member_declaration : protocol_associated_type_declaration",
//t    "protocol_member_declarations : protocol_member_declaration",
//t    "protocol_member_declarations : protocol_member_declaration protocol_member_declarations",
//t    "protocol_property_declaration : variable_declaration_head variable_name type_annotation getter_setter_keyword_block",
//t    "protocol_method_declaration : function_head function_name generic_parameter_clause function_signature",
//t    "protocol_method_declaration : function_head function_name function_signature",
//t    "protocol_initializer_declaration : initializer_head generic_parameter_clause parameter_clause",
//t    "protocol_initializer_declaration : initializer_head parameter_clause",
//t    "protocol_subscript_declaration : subscript_head subscript_result getter_setter_keyword_block",
//t    "protocol_associated_type_declaration : typealias_head type_inheritance_clause typealias_assignment",
//t    "protocol_associated_type_declaration : typealias_head type_inheritance_clause",
//t    "protocol_associated_type_declaration : typealias_head typealias_assignment",
//t    "protocol_associated_type_declaration : typealias_head",
//t    "initializer_declaration : initializer_head generic_parameter_clause parameter_clause initializer_body",
//t    "initializer_declaration : initializer_head parameter_clause initializer_body",
//t    "initializer_head : attributes CONVENIENCE INIT",
//t    "initializer_head : attributes INIT",
//t    "initializer_head : CONVENIENCE INIT",
//t    "initializer_head : INIT",
//t    "initializer_body : code_block",
//t    "deinitializer_declaration : attributes DEINIT code_block",
//t    "deinitializer_declaration : DEINIT code_block",
//t    "extension_declaration : EXTENSION type_identifier type_inheritance_clause extension_body",
//t    "extension_declaration : EXTENSION type_identifier extension_body",
//t    "extension_body : '{' declarations '}'",
//t    "extension_body : '{' '}'",
//t    "subscript_declaration : subscript_head subscript_result code_block",
//t    "subscript_declaration : subscript_head subscript_result getter_setter_block",
//t    "subscript_declaration : subscript_head subscript_result getter_setter_keyword_block",
//t    "subscript_head : attributes SUBSCRIPT parameter_clause",
//t    "subscript_head : SUBSCRIPT parameter_clause",
//t    "subscript_result : attributes type",
//t    "subscript_result : type",
//t    "operator_declaration : prefix_operator_declaration",
//t    "operator_declaration : postfix_operator_declaration",
//t    "operator_declaration : infix_operator_declaration",
//t    "prefix_operator_declaration : OPERATOR PREFIX operator_ '{' '}'",
//t    "postfix_operator_declaration : OPERATOR POSTFIX operator_ '{' '}'",
//t    "infix_operator_declaration : OPERATOR INFIX operator_ '{' infix_operator_attributes '}'",
//t    "infix_operator_declaration : OPERATOR INFIX operator_ '{' '}'",
//t    "infix_operator_attributes : precedence_clause associativity_clause",
//t    "infix_operator_attributes : precedence_clause",
//t    "infix_operator_attributes : associativity_clause",
//t    "precedence_clause : PRECEDENCE NUMBER",
//t    "associativity_clause : ASSOCIATIVITY associativity_value",
//t    "associativity_value : LEFT",
//t    "associativity_value : RIGHT",
//t    "associativity_value : NONE",
//t    "type : array_type",
//t    "type : function_type",
//t    "type : type_identifier",
//t    "type : tuple_type",
//t    "type : optional_type",
//t    "type : implicitly_unwrapped_optional_type",
//t    "type : protocol_composition_type",
//t    "type : metatype_type",
//t    "type_annotation : attributes type",
//t    "type_annotation : type",
//t    "type_identifier : type_name generic_argument_clause",
//t    "type_identifier : type_name",
//t    "type_identifier : type_name generic_argument_clause '.' type_identifier",
//t    "type_identifier : type_name '.' type_identifier",
//t    "type_name : identifier",
//t    "tuple_type : '(' tuple_type_body ')'",
//t    "tuple_type : '(' ')'",
//t    "tuple_type_body : tuple_type_element_list DOTDOTDOT_OP",
//t    "tuple_type_body : tuple_type_element_list",
//t    "tuple_type_element_list : tuple_type_element",
//t    "tuple_type_element_list : tuple_type_element ',' tuple_type_element_list",
//t    "tuple_type_element : attributes INOUT type",
//t    "tuple_type_element : attributes type",
//t    "tuple_type_element : INOUT type",
//t    "tuple_type_element : type",
//t    "tuple_type_element : INOUT element_name type_annotation",
//t    "tuple_type_element : element_name type_annotation",
//t    "element_name : identifier",
//t    "function_type : type ARROW_OP type",
//t    "array_type : type '[' ']'",
//t    "array_type : array_type '[' ']'",
//t    "optional_type : type '?'",
//t    "implicitly_unwrapped_optional_type : type '!'",
//t    "protocol_composition_type : PROTOCOL '<' protocol_identifier_list '>'",
//t    "protocol_composition_type : PROTOCOL '<' '>'",
//t    "protocol_identifier_list : protocol_identifier",
//t    "protocol_identifier_list : protocol_identifier ',' protocol_identifier_list",
//t    "protocol_identifier : type_identifier",
//t    "metatype_type : type '.' UTYPE",
//t    "metatype_type : type '.' UPROTOCOL",
//t    "type_inheritance_clause : ':' type_inheritance_list",
//t    "type_inheritance_list : type_identifier",
//t    "type_inheritance_list : type_identifier ',' type_inheritance_list",
//t    "pattern : wildcard_pattern type_annotation",
//t    "pattern : wildcard_pattern",
//t    "pattern : identifier_pattern type_annotation",
//t    "pattern : identifier_pattern",
//t    "pattern : value_binding_pattern",
//t    "pattern : tuple_pattern type_annotation",
//t    "pattern : tuple_pattern",
//t    "pattern : enum_case_pattern",
//t    "pattern : type_casting_pattern",
//t    "pattern : expression_pattern",
//t    "wildcard_pattern : '_'",
//t    "identifier_pattern : identifier",
//t    "value_binding_pattern : VAR pattern",
//t    "value_binding_pattern : LET pattern",
//t    "tuple_pattern : '(' tuple_pattern_element_list ')'",
//t    "tuple_pattern : '(' ')'",
//t    "tuple_pattern_element_list : tuple_pattern_element",
//t    "tuple_pattern_element_list : tuple_pattern_element ',' tuple_pattern_element_list",
//t    "tuple_pattern_element : pattern",
//t    "enum_case_pattern : type_identifier '.' enum_case_name tuple_pattern",
//t    "enum_case_pattern : type_identifier '.' enum_case_name",
//t    "enum_case_pattern : '.' enum_case_name tuple_pattern",
//t    "enum_case_pattern : '.' enum_case_name",
//t    "type_casting_pattern : is_pattern",
//t    "type_casting_pattern : as_pattern",
//t    "is_pattern : IS type",
//t    "as_pattern : pattern AS type",
//t    "expression_pattern : expression",
//t    "attribute : '@' attribute_name attribute_argument_clause",
//t    "attribute : '@' attribute_name",
//t    "attribute_name : identifier",
//t    "attribute_argument_clause : '(' balanced_tokens ')'",
//t    "attribute_argument_clause : '(' ')'",
//t    "attributes : attribute",
//t    "attributes : attribute attributes",
//t    "balanced_tokens : balanced_token",
//t    "balanced_tokens : balanced_token balanced_tokens",
//t    "balanced_token : '(' balanced_tokens ')'",
//t    "balanced_token : '(' ')'",
//t    "balanced_token : '[' balanced_tokens ']'",
//t    "balanced_token : '[' ']'",
//t    "balanced_token : '{' balanced_tokens '}'",
//t    "balanced_token : '{' '}'",
//t    "balanced_token : BALANCED_TEXT",
//t    "expression : prefix_expression binary_expressions",
//t    "expression : prefix_expression",
//t    "expression_list : expression",
//t    "expression_list : expression ',' expression_list",
//t    "prefix_expression : prefix_operator postfix_expression",
//t    "prefix_expression : postfix_expression",
//t    "prefix_expression : in_out_expression",
//t    "in_out_expression : '&' identifier",
//t    "binary_expression : binary_operator prefix_expression",
//t    "binary_expression : assignment_operator prefix_expression",
//t    "binary_expression : conditional_operator prefix_expression",
//t    "binary_expression : type_casting_operator",
//t    "binary_expressions : binary_expression",
//t    "binary_expressions : binary_expression binary_expressions",
//t    "assignment_operator : '='",
//t    "conditional_operator : '?' expression ':'",
//t    "type_casting_operator : IS type",
//t    "type_casting_operator : AS '?' type",
//t    "type_casting_operator : AS type",
//t    "primary_expression : identifier generic_argument_clause",
//t    "primary_expression : identifier",
//t    "primary_expression : literal_expression",
//t    "primary_expression : self_expression",
//t    "primary_expression : superclass_expression",
//t    "primary_expression : closure_expression",
//t    "primary_expression : parenthesized_expression",
//t    "primary_expression : implicit_member_expression",
//t    "primary_expression : wildcard_expression",
//t    "literal_expression : literal",
//t    "literal_expression : array_literal",
//t    "literal_expression : dictionary_literal",
//t    "literal_expression : FILE_DEFINE",
//t    "literal_expression : LINE_DEFINE",
//t    "literal_expression : COLUMN_DEFINE",
//t    "literal_expression : FUNCTION_DEFINE",
//t    "array_literal : '[' array_literal_items ']'",
//t    "array_literal : '[' ']'",
//t    "array_literal_items : array_literal_item ','",
//t    "array_literal_items : array_literal_item",
//t    "array_literal_items : array_literal_item ',' array_literal_items",
//t    "array_literal_item : expression",
//t    "dictionary_literal : '[' dictionary_literal_items ']'",
//t    "dictionary_literal : '[' ':' ']'",
//t    "dictionary_literal_items : dictionary_literal_item ','",
//t    "dictionary_literal_items : dictionary_literal_item",
//t    "dictionary_literal_items : dictionary_literal_item ',' dictionary_literal_items",
//t    "dictionary_literal_item : expression ':' expression",
//t    "self_expression : SELF",
//t    "self_expression : SELF '.' identifier",
//t    "self_expression : SELF '[' expression ']'",
//t    "self_expression : SELF '.' INIT",
//t    "superclass_expression : superclass_method_expression",
//t    "superclass_expression : superclass_subscript_expression",
//t    "superclass_expression : superclass_initializer_expression",
//t    "superclass_method_expression : SUPER '.' identifier",
//t    "superclass_subscript_expression : SUPER '[' expression ']'",
//t    "superclass_initializer_expression : SUPER '.' INIT",
//t    "closure_expression : '{' closure_signature statements '}'",
//t    "closure_expression : '{' statements '}'",
//t    "closure_signature : parameter_clause function_result IN",
//t    "closure_signature : parameter_clause IN",
//t    "closure_signature : identifier_list function_result IN",
//t    "closure_signature : identifier_list IN",
//t    "closure_signature : capture_list parameter_clause function_result IN",
//t    "closure_signature : capture_list parameter_clause IN",
//t    "closure_signature : capture_list identifier_list function_result IN",
//t    "closure_signature : capture_list identifier_list IN",
//t    "closure_signature : capture_list IN",
//t    "capture_list : '[' capture_specifier expression ']'",
//t    "capture_specifier : WEAK",
//t    "capture_specifier : UNOWNED",
//t    "capture_specifier : UNOWNED_SAFE",
//t    "capture_specifier : UNOWNED_UNSAFE",
//t    "implicit_member_expression : '.' identifier",
//t    "parenthesized_expression : '(' expression_element_list ')'",
//t    "parenthesized_expression : '(' ')'",
//t    "expression_element_list : expression_element",
//t    "expression_element_list : expression_element ',' expression_element_list",
//t    "expression_element : expression",
//t    "expression_element : identifier ':' expression",
//t    "wildcard_expression : '_'",
//t    "postfix_expression : primary_expression",
//t    "postfix_expression : postfix_expression postfix_operator",
//t    "postfix_expression : function_call_expression",
//t    "postfix_expression : initializer_expression",
//t    "postfix_expression : explicit_member_expression",
//t    "postfix_expression : postfix_self_expression",
//t    "postfix_expression : dynamic_type_expression",
//t    "postfix_expression : subscript_expression",
//t    "postfix_expression : forced_value_expression",
//t    "postfix_expression : optional_chaining_expression",
//t    "function_call_expression : postfix_expression parenthesized_expression",
//t    "function_call_expression : postfix_expression parenthesized_expression trailing_closure",
//t    "function_call_expression : postfix_expression trailing_closure",
//t    "trailing_closure : closure_expression",
//t    "initializer_expression : postfix_expression '.' INIT",
//t    "explicit_member_expression : postfix_expression '.' NUMBER",
//t    "explicit_member_expression : postfix_expression '.' identifier generic_argument_clause",
//t    "explicit_member_expression : postfix_expression '.' identifier",
//t    "postfix_self_expression : postfix_expression '.' SELF",
//t    "dynamic_type_expression : postfix_expression '.' DYNAMICTYPE",
//t    "subscript_expression : postfix_expression '[' expression_list ']'",
//t    "forced_value_expression : postfix_expression '!'",
//t    "optional_chaining_expression : postfix_expression '?'",
//t    "identifier : IDENTIFIER",
//t    "identifier : '$' NUMBER",
//t    "identifier_list : identifier",
//t    "identifier_list : identifier ',' identifier_list",
//t    "literal : INTEGER_LITERAL",
//t    "literal : FLOATING_POINT_LITERAL",
//t    "literal : STRING_LITERAL",
//t    "operator_ : OPERATOR",
//t    "binary_operator : operator_",
//t    "prefix_operator : operator_",
//t    "postfix_operator : operator_",
//t  };
//t public static string getRule (int index) {
//t    return yyRule [index];
//t }
//t}
  protected static readonly string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"'!'",null,"'#'","'$'",null,"'&'",
    null,"'('","')'",null,null,"','",null,"'.'",null,null,null,null,null,
    null,null,null,null,null,null,"':'","';'","'<'","'='","'>'","'?'",
    "'@'",null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    "'['",null,"']'",null,"'_'",null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,"'{'",null,"'}'",null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    "IDENTIFIER","NUMBER","NEWLINE","FOR","IN","DO","WHILE","IF","ELSE",
    "SWITCH","CASE","DEFAULT","WHERE","BREAK","CONTINUE","FALLTHROUGH",
    "RETURN","EQEQ_OP","CLASS","MUTATING","NONMUTATING","OVERRIDE",
    "STATIC","UNOWNED","UNOWNED_SAFE","UNOWNED_UNSAFE","WEAK","IMPORT",
    "TYEPALIAS","STRUCT","ENUM","PROTOCOL","VAR","FUNC","LET","GET","SET",
    "WILLSET","DIDSET","TYPEALIAS","ARROW_OP","DOTDOTDOT_OP","INOUT",
    "CONVENIENCE","INIT","DEINIT","EXTENSION","SUBSCRIPT","OPERATOR",
    "PREFIX","POSTFIX","INFIX","PRECEDENCE","ASSOCIATIVITY","LEFT",
    "RIGHT","NONE","IS","AS","BALANCED_TEXT","FILE_DEFINE","LINE_DEFINE",
    "COLUMN_DEFINE","FUNCTION_DEFINE","SELF","SUPER","DYNAMICTYPE",
    "UTYPE","UPROTOCOL","INTEGER_LITERAL","FLOATING_POINT_LITERAL",
    "STRING_LITERAL","\"end of file\"",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
//t  public static string yyname (int token) {
//t    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
//t    string name;
//t    if ((name = yyNames[token]) != null) return name;
//t    return "[unknown]";
//t  }

  //int yyExpectingState;
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
//t    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
	protected bool use_global_stacks;
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
//t      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
//t            if (debug != null)
//t              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              //yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
//t              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
//t                  if (debug != null)
//t                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
//t                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
//t              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
//t                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
//t              if (debug != null)
//t                debug.discard(yyState, yyToken, yyname(yyToken),
//t  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
//t        if (debug != null)
//t          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 1:
#line 61 "Swiften/SwiftParser.jay"
  {
		yyVal = new ExpressionStatement ((Expression)yyVals[-1+yyTop]);
	}
  break;
case 11:
#line 80 "Swiften/SwiftParser.jay"
  {
		yyVal = MakeList ((Statement)yyVals[0+yyTop]);
	}
  break;
case 12:
#line 84 "Swiften/SwiftParser.jay"
  {
		yyVal = AddToList ((Statement)yyVals[-1+yyTop], yyVals[0+yyTop]);
	}
  break;
case 462:
#line 1112 "Swiften/SwiftParser.jay"
  {
		yyVal = new IdentifierExpression ((string)yyVals[0+yyTop]);
	}
  break;
case 516:
#line 1224 "Swiften/SwiftParser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	}
  break;
case 517:
#line 1228 "Swiften/SwiftParser.jay"
  {
		yyVal = MakeList<ExpressionElement> ();
	}
  break;
case 518:
#line 1235 "Swiften/SwiftParser.jay"
  {
		yyVal = MakeList ((ExpressionElement)yyVals[0+yyTop]);
	}
  break;
case 519:
#line 1239 "Swiften/SwiftParser.jay"
  {
		yyVal = AddToList ((ExpressionElement)yyVals[-2+yyTop], yyVals[0+yyTop]);
	}
  break;
case 520:
#line 1246 "Swiften/SwiftParser.jay"
  {
		yyVal = new ExpressionElement ((Expression)yyVals[0+yyTop]);
	}
  break;
case 521:
#line 1250 "Swiften/SwiftParser.jay"
  {
		yyVal = new ExpressionElement ((string)yyVals[-2+yyTop], (Expression)yyVals[0+yyTop]);
	}
  break;
case 533:
#line 1274 "Swiften/SwiftParser.jay"
  {
		yyVal = new FunctionCallExpression ((Expression)yyVals[-1+yyTop], (List<ExpressionElement>)yyVals[0+yyTop]);
	}
  break;
case 552:
#line 1334 "Swiften/SwiftParser.jay"
  {
		yyVal = new StringLiteral ((string)yyVals[0+yyTop]);
	}
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
//t          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
//t            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
//t        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

/*
 All more than 3 lines long rules are wrapped into a method
*/
#line default
   static readonly short [] yyLhs  = {              -1,
    1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
    9,    9,    5,    5,    5,    5,   10,   10,   10,   10,
   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
   10,   10,   14,   14,   11,   12,   19,   19,   13,    6,
    6,   20,   20,   22,   22,   23,   23,   21,   21,   24,
   24,   25,   25,   25,   25,   26,   29,   29,   28,   28,
   27,   30,   31,    7,    7,   32,   33,    8,    8,    8,
    8,   35,   35,   36,   36,   37,   38,   38,   39,   39,
   40,   40,   42,   42,   42,   41,   46,   46,   47,   47,
   48,   48,   49,   50,   51,   51,   52,    4,    4,    4,
    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
    4,   67,   67,   68,   68,   69,   69,   69,   69,   69,
   69,   69,   69,   69,    0,    0,   15,   15,   54,   54,
   54,   54,   71,   71,   71,   71,   71,   71,   71,   72,
   72,   73,   73,   55,   55,   55,   55,   75,   75,   76,
   76,   77,   16,   16,   16,   16,   16,   16,   78,   78,
   78,   78,   79,   81,   81,   81,   84,   84,   85,   85,
   85,   85,   86,   82,   82,   82,   87,   87,   88,   88,
   83,   83,   83,   89,   89,   89,   89,   90,   90,   90,
   90,   56,   91,   93,   92,   57,   57,   94,   94,   94,
   94,   95,   95,   96,   96,   99,   99,   97,   98,   98,
  100,  100,  100,  101,  101,  102,  102,  102,  102,  102,
  102,  103,  103,  103,  103,  103,  103,  103,  103,  103,
  103,  103,  103,  106,  106,  104,  104,  105,   58,   58,
   58,   58,  107,  107,  107,  107,  110,  110,  111,  111,
  112,  112,  113,  113,  114,  114,  109,  115,  108,  108,
  108,  108,  117,  117,  118,  118,  119,  119,  120,  120,
  121,  121,  122,   59,   59,   59,   59,   59,   59,   59,
   59,  124,  126,  126,   60,   60,   60,   60,   60,   60,
   60,   60,  127,  128,  128,   61,   61,   61,   61,  129,
  130,  130,  132,  132,  132,  132,  132,  131,  131,  133,
  134,  134,  135,  135,  136,  137,  137,  137,  137,   62,
   62,  138,  138,  138,  138,  141,   63,   63,   64,   64,
  142,  142,   65,   65,   65,  139,  139,  140,  140,   66,
   66,   66,  143,  144,  145,  145,  146,  146,  146,  147,
  148,  149,  149,  149,   53,   53,   53,   53,   53,   53,
   53,   53,   80,   80,   44,   44,   44,   44,   43,  116,
  116,  155,  155,  156,  156,  157,  157,  157,  157,  157,
  157,  158,  151,  150,  150,  152,  153,   45,   45,  159,
  159,  160,  154,  154,  125,  161,  161,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   18,  162,  163,  164,
  164,  165,  165,  169,  169,  170,  166,  166,  166,  166,
  167,  167,  171,  172,  168,  173,  173,  174,  175,  175,
   70,   70,  176,  176,  177,  177,  177,  177,  177,  177,
  177,    2,    2,   17,   17,  178,  178,  178,  182,  183,
  183,  183,  183,  179,  179,  185,  186,  187,  187,  187,
  188,  188,  188,  188,  188,  188,  188,  188,  188,  189,
  189,  189,  189,  189,  189,  189,  196,  196,  198,  198,
  198,  199,  197,  197,  200,  200,  200,  201,  190,  190,
  190,  190,  191,  191,  191,  202,  203,  204,  192,  192,
  205,  205,  205,  205,  205,  205,  205,  205,  205,  207,
  208,  208,  208,  208,  194,  193,  193,  209,  209,  210,
  210,  195,  181,  181,  181,  181,  181,  181,  181,  181,
  181,  181,  212,  212,  212,  220,  213,  214,  214,  214,
  215,  216,  217,  218,  219,   34,   34,  206,  206,  123,
  123,  123,   74,  184,  180,  211,
  };
   static readonly short [] yyLen = {           2,
    2,    2,    2,    2,    2,    2,    2,    1,    1,    1,
    1,    2,    1,    1,    1,    1,    7,    6,    6,    5,
    6,    5,    5,    4,    9,    8,    8,    7,    8,    7,
    7,    6,    1,    1,    5,    3,    1,    1,    4,    1,
    1,    4,    3,    1,    1,    2,    2,    5,    4,    1,
    2,    2,    2,    2,    2,    3,    2,    1,    1,    2,
    2,    2,    1,    2,    2,    2,    1,    1,    1,    1,
    1,    2,    1,    2,    1,    1,    2,    1,    4,    3,
    1,    3,    1,    3,    3,    2,    1,    3,    1,    1,
    3,    3,    3,    3,    1,    3,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    1,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    0,    3,    2,    4,    3,
    3,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    3,    1,    1,    4,    3,    3,    2,    1,    3,    2,
    1,    1,    2,    4,    4,    4,    5,    4,    3,    2,
    2,    1,    1,    4,    3,    4,    3,    2,    4,    3,
    3,    2,    3,    4,    3,    4,    2,    1,    2,    1,
    4,    3,    4,    4,    3,    3,    2,    4,    3,    3,
    2,    2,    2,    1,    2,    5,    4,    3,    2,    2,
    1,    1,    1,    2,    1,    3,    2,    1,    1,    2,
    2,    4,    3,    1,    3,    4,    3,    3,    2,    2,
    1,    4,    3,    3,    2,    3,    2,    2,    1,    4,
    3,    3,    2,    1,    1,    1,    1,    1,    3,    2,
    3,    2,    5,    4,    4,    3,    1,    2,    1,    1,
    3,    2,    1,    3,    2,    1,    1,    1,    7,    6,
    6,    5,    1,    2,    1,    1,    3,    2,    1,    3,
    2,    1,    2,    6,    5,    5,    4,    5,    4,    4,
    3,    1,    3,    2,    6,    5,    5,    4,    5,    4,
    4,    3,    1,    3,    2,    5,    4,    4,    3,    1,
    3,    2,    1,    1,    1,    1,    1,    1,    2,    4,
    4,    3,    3,    2,    3,    3,    2,    2,    1,    4,
    3,    3,    2,    2,    1,    1,    3,    2,    4,    3,
    3,    2,    3,    3,    3,    3,    2,    2,    1,    1,
    1,    1,    5,    5,    6,    5,    2,    1,    1,    2,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    1,    2,    1,    4,    3,    1,    3,
    2,    2,    1,    1,    3,    3,    2,    2,    1,    3,
    2,    1,    3,    3,    3,    2,    2,    4,    3,    1,
    3,    1,    3,    3,    2,    1,    3,    2,    1,    2,
    1,    1,    2,    1,    1,    1,    1,    1,    1,    2,
    2,    3,    2,    1,    3,    1,    4,    3,    3,    2,
    1,    1,    2,    3,    1,    3,    2,    1,    3,    2,
    1,    2,    1,    2,    3,    2,    3,    2,    3,    2,
    1,    2,    1,    1,    3,    2,    1,    1,    2,    2,
    2,    2,    1,    1,    2,    1,    3,    2,    3,    2,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    3,    2,    2,    1,
    3,    1,    3,    3,    2,    1,    3,    3,    1,    3,
    4,    3,    1,    1,    1,    3,    4,    3,    4,    3,
    3,    2,    3,    2,    4,    3,    4,    3,    2,    4,
    1,    1,    1,    1,    2,    3,    2,    1,    3,    1,
    3,    1,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    3,    2,    1,    3,    3,    4,    3,
    3,    3,    4,    2,    2,    1,    2,    1,    3,    1,
    1,    1,    1,    1,    1,    1,
  };
   static readonly short [] yyDefRed = {            0,
  546,    0,    0,    0,    0,    0,    0,    0,   76,    0,
    0,  117,  118,  119,  120,  121,  122,  123,  124,    0,
    0,    0,    0,  162,  201,    0,    0,    0,  325,    0,
    0,    0,    0,  473,  474,  475,  476,    0,    0,  550,
  551,  552,    0,    0,    0,  522,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  125,   13,
   14,   15,   16,  100,   40,   41,    0,    0,    0,   68,
   69,   70,   71,   98,   99,  101,  102,  103,  104,  105,
  106,  107,  108,  109,  110,  111,    0,    0,    0,  555,
    0,    0,    0,  470,    0,    0,  340,  341,  342,    0,
    0,    0,    0,  448,  523,  463,  464,  465,  466,  467,
  468,  469,  471,  472,  493,  494,  495,  525,  526,  527,
  528,  529,  530,  531,  532,  116,    0,    0,  553,    0,
    0,    0,    0,    0,    0,    0,   33,   34,    0,    0,
    0,    0,    0,    0,    0,    0,  402,    0,  405,  406,
  407,  421,  422,    0,    0,   37,   38,    0,    0,   44,
   45,    0,    0,   72,   67,   74,   77,  293,    0,  135,
  133,  134,  136,  137,  138,  139,  142,    0,  132,    0,
  143,  282,    0,  257,  240,  242,    0,  300,    0,    0,
    0,  425,    0,  147,    0,  194,  193,  324,  328,  369,
    0,    0,  337,    0,    0,    0,    0,    0,    0,    0,
  517,  520,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  515,    0,  478,    0,    0,    0,    0,
    0,  428,    0,  449,  547,   12,    8,   10,    9,    1,
    2,    3,    4,    5,    6,    7,   64,   65,   66,    0,
  461,  161,  200,    0,  115,    0,    0,    0,    0,    0,
  160,  199,    0,    0,  323,    0,    0,    0,    0,  153,
    0,    0,  192,  202,  203,    0,    0,    0,    0,    0,
    0,  357,  361,    0,    0,  358,    0,    0,  356,  359,
  360,  362,  432,    0,    0,  456,    0,  554,  442,    0,
    0,    0,    0,  453,    0,    0,    0,  545,  544,  556,
  536,    0,  524,  535,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  398,
  400,  403,  128,    0,    0,   36,    0,    0,    0,    0,
    0,    0,  292,  131,    0,    0,    0,    0,  281,    0,
    0,    0,    0,    0,  299,  425,  152,  150,    0,    0,
    0,  330,    0,    0,    0,  211,    0,  235,    0,    0,
    0,    0,    0,    0,  229,    0,    0,    0,  492,  490,
    0,  498,  496,    0,    0,  516,    0,    0,    0,    0,
    0,  512,  513,  514,  511,    0,  500,    0,  502,    0,
    0,    0,  504,    0,  509,    0,    0,    0,  484,    0,
  477,    0,  483,    0,    0,  426,    0,    0,    0,  146,
    0,    0,  130,    0,  239,  241,    0,  145,  322,  327,
  336,  159,  198,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  326,  321,    0,    0,  371,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  386,
  387,    0,    0,  333,  334,  335,    0,    0,    0,    0,
    0,  455,  450,  451,  452,  538,  537,  541,  542,    0,
    0,    0,  534,    0,    0,   24,    0,    0,    0,    0,
  412,    0,    0,  419,  445,    0,    0,    0,    0,  368,
    0,  258,    0,    0,  127,   39,    0,   42,    0,    0,
   49,    0,    0,    0,    0,    0,  295,    0,    0,    0,
  395,    0,  290,  291,  141,  284,    0,    0,  279,  280,
    0,  246,  249,    0,    0,    0,  250,    0,    0,    0,
  302,    0,    0,    0,    0,    0,    0,    0,  303,  304,
  305,  306,  307,    0,    0,  298,  149,  332,    0,  329,
    0,  234,  233,    0,  227,    0,    0,    0,  225,  228,
    0,    0,  213,    0,  237,    0,    0,    0,    0,    0,
    0,  491,  497,  521,  519,    0,    0,    0,  549,    0,
    0,  501,  499,  503,  506,    0,  508,    0,  488,  482,
  481,    0,  487,  441,    0,  430,    0,    0,    0,    0,
   94,    0,    0,    0,  288,  129,    0,    0,  277,    0,
  297,  144,    0,  154,    0,  155,  156,  158,    0,  208,
  197,  204,  210,    0,   80,    0,    0,    0,  320,  389,
  392,    0,    0,    0,    0,    0,    0,  370,  372,    0,
  381,    0,  393,  394,  384,    0,    0,    0,    0,    0,
    0,    0,  385,    0,  457,  539,  543,    0,   23,    0,
   22,    0,    0,    0,    0,    0,  415,  413,    0,   20,
    0,   35,  367,  417,   46,   47,    0,    0,    0,   61,
   48,   51,   54,   52,   55,   53,  113,  294,    0,  289,
  283,  278,  252,    0,    0,    0,  245,  248,    0,  244,
    0,    0,    0,  163,    0,  318,    0,    0,  301,  309,
    0,  314,    0,  331,  232,  226,    0,  231,    0,  223,
  224,  212,  215,  238,  218,    0,  343,  344,    0,    0,
  346,    0,    0,  349,  510,    0,  505,  507,  436,    0,
  440,    0,  438,    0,  429,  434,   96,    0,  286,  287,
    0,  275,  276,  296,    0,    0,    0,    0,    0,    0,
  157,  196,    0,   86,    0,   89,   90,   79,   82,   84,
   85,  388,    0,  380,    0,  375,  168,    0,  172,    0,
    0,    0,    0,  165,    0,    0,    0,    0,    0,  180,
  175,    0,    0,  178,    0,    0,    0,   21,   32,    0,
    0,    0,    0,    0,    0,   19,    0,   18,    0,   57,
   56,   60,  397,    0,  255,  251,    0,  262,  265,    0,
    0,    0,  266,  243,    0,    0,  316,    0,  312,  313,
    0,  315,  230,  222,  216,  350,  352,  353,  354,  351,
  345,  347,  435,  439,  437,  285,  274,  187,    0,  191,
    0,    0,    0,  182,    0,    0,    0,    0,    0,    0,
    0,    0,  391,    0,  171,  167,  170,    0,    0,  164,
    0,  166,  179,  174,  177,  176,   31,   30,    0,   28,
    0,    0,    0,   17,   63,   62,  254,    0,  268,    0,
    0,  261,  264,  260,    0,  310,  311,    0,  186,  190,
  185,    0,  189,    0,  181,  183,   93,   91,   92,   88,
  173,  169,   29,   27,   26,    0,    0,  271,    0,  267,
  259,  184,  188,   25,  273,  270,
  };
  protected static readonly short [] yyDgoto  = {            51,
   52,  192,  240,   54,   55,   56,   57,   58,  344,   60,
   61,   62,   63,  136,  455,   64,  138,  193,  158,   65,
   66,  162,  518,  522,  523,  524,  525,  698,  699,  830,
  906,   67,   68,  200,   70,   71,   72,   73,  278,  451,
  646,  452,  141,  282,  283,  784,  785,  786,  787,  251,
  427,  428,  338,   74,   75,   76,   77,   78,   79,   80,
   81,   82,   83,   84,   85,   86,  529,   87,   88,   89,
  178,  179,  180,   90,  194,  195,  368,   91,  271,  340,
  475,  476,  638,  669,  670,  800,  671,  672,  778,  779,
   92,  273,  197,   93,  276,  448,  641,  449,  411,  450,
  382,  383,  384,  588,  745,  385,  185,  186,  187,  545,
  546,  547,  713,  714,  715,  286,  841,  842,  843,  909,
  910,  938,   94,  183,  352,  359,  169,  353,  189,  365,
  557,  558,  559,  560,  561,  562,  563,   95,   96,  287,
  456,  372,   97,   98,   99,  752,  753,  754,  860,  288,
  289,  290,  291,  292,  463,  464,  465,  466,  652,  653,
  531,  145,  146,  147,  148,  149,  150,  151,  326,  327,
  152,  153,  100,  233,  426,  619,  620,  101,  299,  102,
  103,  104,  300,  301,  302,  303,  304,  105,  106,  107,
  108,  109,  110,  111,  112,  113,  114,  228,  229,  230,
  231,  115,  116,  117,  221,  222,  223,  406,  214,  215,
  313,  118,  119,  120,  121,  122,  123,  124,  125,  314,
  };
  protected static readonly short [] yySindex = {         6889,
    0, 7341,  -69, 7231, 7231, 8108,  116,  116,    0, 8108,
  116,    0,    0,    0,    0,    0,    0,    0,    0,  388,
  116,  116,  116,    0,    0, 4073,  116, -216,    0,  -69,
  116,   57,  364,    0,    0,    0,    0,   30,  396,    0,
    0,    0, 7661, 6961,  116,    0, 7407,  116,  116, -146,
    0, 6889,   82,   82,   82,   82,   80,   82,    0,    0,
    0,    0,    0,    0,    0,    0,  428,   68,   64,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  406, 1341, 3156,    0,
 4073,  162,  -10,    0,   67,  192,    0,    0,    0,  199,
  296, 8056,  421,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 4073, 4073,    0,  205,
 7700, 7287,  116,    0,  359,  404,    0,    0, -144,   64,
  569,  443,  219, 1102,  192,  192,    0,  192,    0,    0,
    0,    0,    0, 6403,  253,    0,    0,  -69,   64,    0,
    0,  -69,  415,    0,    0,    0,    0,    0,  412,    0,
    0,    0,    0,    0,    0,    0,    0,  -10,    0,  503,
    0,    0,  471,    0,    0,    0,  508,    0,  413, 4073,
 1085,    0, 7727,    0,  536,    0,    0,    0,    0,    0,
  423, 1068,    0,  284,  284,  284,   24, 8108,   48, 8108,
    0,    0,  600,  566,  593, 5942, 7368,  516,  507,  295,
 6889,  298,  452,    0,  564,    0,  604,  571,  645,  605,
  658,    0,  671,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  205,
    0,    0,    0, 4073,    0,  116,  388,  116,  116,  116,
    0,    0, 4073,  427,    0,  -69,   57,  414,   64,    0,
  192,  205,    0,    0,    0,   67,  116,   57,  -69,  662,
  249,    0,    0,   98,  205,    0,  612,  646,    0,    0,
    0,    0,    0,  205,  288,    0, 8108,    0,    0,  296,
 8108, 8108, 8108,    0,  421,   -7, 8108,    0,    0,    0,
    0,  616,    0,    0,  431,  431,   98, 8162,  707, 7747,
    0,  359,  715,  431,  600,  735,  739,    0,  757, 8108,
 7767, 8108,  205,  116,  755,  116,  509,   98,  205,    0,
    0,    0,    0,  677, 7231,    0,  540,  375, 8383,  116,
  495,  680,    0,    0,  -10, 8414,  512,  684,    0, 1512,
  116,  528, 2325,  685,    0,    0,    0,    0, 4073, 8448,
  686,    0,  395,  422,  149,    0,  159,    0,    0,   98,
  205,   29,  767,  592,    0,  689,  690,  691,    0,    0,
  722,    0,    0,  727, 8108,    0, 8108, 7547,    0,    0,
  600,    0,    0,    0,    0, 8108,    0,  116,    0,  192,
  560,  698,    0,  563,    0,  781,  329,  341,    0, 8108,
    0, 8108,    0, 8108,   31,    0,  766,  785,   98,    0,
  412,  -10,    0,  471,    0,    0,  413,    0,    0,    0,
    0,    0,    0, 4073, 8199,   98,   57,  -69,  534,   57,
   27,  789,  776,  -69,    0,    0,  466,  205,    0,    0,
   98,  195,  795,  541,  799,  192,  205,  343,  753,    0,
    0,   98, 6133,    0,    0,    0,  760,   98,  205,   98,
  796,    0,    0,    0,    0,    0,    0,    0,    0,   64,
  359,  762,    0, 6475,  -69,    0, 8162, 7793,  798, 7813,
    0, 4073, 3456,    0,    0, 8162,  803,  -69,   98,    0,
  116,    0,  757,   98,    0,    0,  241,    0, 4073,  807,
    0,  744,  386, 6547, 6817,  364,    0, 6685,  745,  827,
    0,  680,    0,    0,    0,    0,  749,  684,    0,    0,
  116,    0,    0, 2668,  750, 5211,    0,  758, 1883,  116,
    0,  393, 3579,  116,  538,  -10,  759, 1441,    0,    0,
    0,    0,    0,   67,  192,    0,    0,    0,  761,    0,
  159,    0,    0,  159,    0,  527,  529,  159,    0,    0,
   98,  841,    0,  752,    0,    0, 8108,  192,  763,  764,
  176,    0,    0,    0,    0,    0,  600,  792,    0,   98,
  205,    0,    0,    0,    0,  626,    0,  629,    0,    0,
    0,  604,    0,    0,   55,    0,   -5,   22,  853,   28,
    0,  205,  495,  680,    0,    0,  512,  684,    0,  685,
    0,    0, 6060,    0,  777,    0,    0,    0,  -69,    0,
    0,    0,    0,  116,    0,  836,  116,  160,    0,    0,
    0,  840,  861,   98,  192,  205,   98,    0,    0,  140,
    0,   98,    0,    0,    0,  -69,  374, 3085,   47,  -13,
   50,   23,    0,   98,    0,    0,    0,  784,    0,  -69,
    0,  -69,  867, 7840, 7869,  851,    0,    0,  -69,    0,
 8162,    0,    0,    0,    0,    0, -168,  855, 4073,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  116,    0,
    0,    0,    0,  871,  876,  116,    0,    0, 6343,    0,
  805,  794,  459,    0,  192,    0,  162,   67,    0,    0,
   57,    0,  797,    0,    0,    0,  159,    0,  159,    0,
    0,    0,    0,    0,    0, 8108,    0,    0,  663,  448,
    0,  806,  618,    0,    0,   98,    0,    0,    0,  892,
    0,  809,    0,  842,    0,    0,    0,  680,    0,    0,
  684,    0,    0,    0,  374,  374, 3241,  161,  -23,  118,
    0,    0,    3,    0,  899,    0,    0,    0,    0,    0,
    0,    0,  116,    0,   98,    0,    0,  116,    0,  -69,
  -69,  374,  374,    0,  643,  819,  -69,  659,  825,    0,
    0,  665,  830,    0,  664,  835,    0,    0,    0,  -69,
  -69,  920,  -69,  921, 7906,    0,  -69,    0, 8108,    0,
    0,    0,    0,  116,    0,    0,  116,    0,    0, 2741,
  845, 6613,    0,    0, 6757,  797,    0,   57,    0,    0,
  100,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -69,    0,
  -69,  374,  374,    0,  678,  847,  688,  854,  460,  116,
  160,  116,    0,  943,    0,    0,    0,  -69,  374,    0,
  -69,    0,    0,    0,    0,    0,    0,    0,  -69,    0,
  -69,  -69,  946,    0,    0,    0,    0,  927,    0,  945,
  116,    0,    0,    0,  865,    0,    0,  480,    0,    0,
    0,  -69,    0,  -69,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -69,  436,    0,  116,    0,
    0,    0,    0,    0,    0,    0,
  };
  protected static readonly short [] yyRindex = {          993,
    0,    0,    0,    0,    0,    0,   91,  108,    0,  109,
 2426,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 8174,    0,    0,    0,    0, 2083,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   32,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  558,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  479,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 4911,
 3359,    0, 4635,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2156,    7,    0,    0,    0,    0, 2453,
 1196,    0,    0,    0, 5123, 5415,    0, 5485,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1641,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1142,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 5791,    0, 5599,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1033,    0,  953,    0,    0,    0,  666,    0,
    0,    0,    0,    0,    0,    0,   56,    0,  902,    0,
  904,    0, 2805,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2426,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3415,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  879,    0,    0,    0, 1569,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3708,
    0,    0,    0,    0, 4708,    0,    0,    0,    0,    0,
    0, 2011,    0,    0, 3780, 3853, 4980,    0,    0,    0,
 2525,   -3,    0,  579,  878,    0,  958, 2598, 4146,    0,
    0,    0,    0,    0, 1270,    0,    0, 4218,    0,    0,
    0,    0,    0,    0,    0,    0,  110,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1606,  -11,
    0,    0,   36,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1025, 6455,
 8240,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  383,    0,    0,    0,    0,
    0,  910,    0,  912,    0,    0,    0,  944,  416,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 5714,    0,    0, 2253, 1811,
    0,   61,  356,    0,    0,    0,    0,    0,    0,  804,
  112,    0,    0,  966,   37,    0,    0,    0,    0,    0,
    0,  887,    0,    0,    0,    0,    0, 2942,    0, 3015,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1714,
  373,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 5052,    0,
    0,    0, 4291, 4563,    0,    0,    0,    0,    0,    0,
    0,    0,  886,    0,    0,    0,    0,  888,    0, 1959,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  889,    0,    0,    0,    0,
    0,    0,    0,    0, 4498,    0,    0,  890,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  122,    0,    0,    0,    0, 5884,  129,    0,    0,    0,
    0,    0,    0,    0,    0,  913, 3909,    0,    0, 2390,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   49,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  954,  171,    0,    0,  175,    0,    0,    0,
    0, 2870,    0,    0,    0,  142,   66,    0,    0,    0,
    0,    0,    0, 3287,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 5918,    0,  960,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 8321, 5998,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 4856,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  198,    0,    0,    0,    0,
    0,    0,  894,    0,    0, 4022,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  961,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  225,    0,    0,    0,    0,    0,
  150,   73,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 5542,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  895,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 8281,    0, 8352,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,
  };
  protected static readonly short [] yyGindex = {            0,
    0,  775,  676,   59,  955,    0,    0,    0,   15,    0,
    0,    0,    0,  896,   76,  449,  211,    8,  679,  510,
  959,    0,    0,  506,    0,    0,    0,  333,    0,    0,
    0,    0,  783,    1,    0,    0,    0,    0, -114,  387,
    0,    0, -261,   11, -605,  151,    0,    0,    0, -124,
  417,    0,  736,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -282,   16,    0,   81,
  778,    5,    0,  177,  -33,    0,  597, -265,  483, -112,
  599, -445,  403,  376,  378,  -31,  377,  379,  266,  270,
 -205, -350,    0,   25,  496, -422,  418,  603, -165,  -30,
  470,    0,    0,    0,  309, -187,  800,  801,    0,   87,
    0,    0, -669,    0, -129,  347, -195,    0,    0, -299,
    0,    0,  119,  810, -108, -318,  808, -332,  816, -312,
  505,    0,    0,    0,    0,    0,    0,   39,   42,  502,
  624,  699,    0,    0,    0,    0,    0,  327,    0,    0,
    0,    0,    0,    0,    0,  425,    0,  623,  290,    0,
  380,    0,    0,    0,   93,    0,    0,    0,  585,    0,
    0,    0,    0,    0,    0,  101,    0,  493,  790,    0,
  989,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -72,  170,    0,    0,    0,    0,  675,    0,  674,
    0,    0,    0,    0,    0,  125,    0,    0,  702,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  788,
  };
  protected static readonly short [] yyTable = {           637,
   69,  203,  140,  329,  159,  159,  159,  165,  165,  139,
  159,  168,  142,  220,   59,  453,  335,  143,  533,  534,
  177,  182,  184,  188,  639,   50,  140,  196,   50,  221,
  311,   11,  221,  341,  615,  342,  142,  425,  539,  540,
   48,  201,  791,  213,  219,  224,  836,  159,  232,  234,
   48,  566,   69,  154,  351,  444,  414,  270,  218,   50,
  881,  615,  157,  161,  279,  444,  236,  615,  357,  583,
  615,  616,  362,  537,  358,  207,  214,  374,  155,  245,
  364,  238,  144,   50,  198,  618,   48,  569,  645,  433,
   73,  269,  371,  274,  615,  759,  202,  554,  625,  482,
  829,  142,  159,  255,  268,  199,  202,   75,   78,   43,
   48,  235,  618,   48,  763,  629,  332,  617,  618,  761,
  208,  618,   81,  250,  631,  249,  277,  140,  140,  180,
  471,  159,  325,  328,  315,  316,  179,  142,  142,  324,
  239,  433,  142,  468,  617,  618,  333,  143,  482,   73,
  617,   50,  379,  617,   69,  379,   11,  555,  445,  337,
  470,  447,  220,   48,  907,  220,   75,   78,   43,  219,
  333,  804,  219,  433,  811,   50,  285,  617,  177,  281,
  293,   48,  354,  578,   50,  573,  575,  579,  469,  580,
  140,  325,  417,  159,   50,   50,  181,  315,  324,  710,
  142,  142,  379,   48,  726,  178,  513,  390,  159,  393,
  159,  378,  144,  177,  378,  377,  401,  159,  377,  712,
  430,   69,  272,  416,   48,  339,  339,   50,  339,  438,
   50,  281,  311,  346,  281,  412,  441,  347,  217,  311,
   50,  217,  532,  378,  281,  707,    1,  454,  538,    1,
  486,  606,  608,  378,  140,   48,  168,  177,  182,  184,
  188,  433,   48,  140,  142,  376,  178,  425,  376,  275,
  775,  587,  312,  142,  177,  929,  880,  298,  807,  310,
    1,  460,  381,  642,   50,  874,  221,  852,  281,  459,
  769,  770,  554,  487,  129,  644,  381,  159,   11,   11,
  751,  159,  159,  159,    1,  849,  490,  159,  772,  773,
  614,  425,   48,  488,  814,  489,  623,  774,  159,  627,
  159,  425,  624,   50,  389,  628,  582,  281,  630,   81,
  159,  159,  159,  214,  374,  567,  512,  614,  244,  803,
  237,  440,  810,  614,  510,  159,  614,  418,  392,   73,
  479,  339,  555,  661,  181,  177,  296,  180,  297,  535,
  530,  462,  474,  154,  179,  676,   75,   78,   43,  140,
  614,  548,    1,  572,  572,  572,  847,  572,  552,  142,
  386,  387,  388,  735,  586,  453,  736,  556,  738,  740,
  741,  814,  810,  496,  467,  159,    1,  213,  597,   83,
  916,  564,  330,  157,  565,    1,  159,  528,  416,  379,
  632,  775,  776,  798,  528,    1,    1,   83,  543,  220,
  159,  504,  159,   50,  159,  917,  219,  280,  528,  571,
   50,  444,  177,  181,  178,  866,  626,  576,  458,  577,
  544,  209,  177,  553,  140,  159,  727,  280,    1,  731,
  137,    1,  867,  309,  142,  776,  574,   50,  460,   97,
   43,    1,  331,  220,  339,  444,  306,  651,  378,  350,
  350,  277,  377,   69,  312,  746,  298,   97,  462,  280,
  350,  310,  280,  308,  749,  750,  210,   50,  336,  378,
  601,  202,  280,  656,  219,  217,  154,  159,  159,  521,
  159,   50,  140,  140,    5,    1,  159,  252,  678,  324,
  324,  307,  142,  142,  768,  345,  378,  492,  771,  140,
  634,  693,  376,  640,   69,   69,  697,  650,  350,  142,
  277,  181,  599,  732,  349,  363,  280,  348,  704,  706,
  505,  512,  794,   44,    1,  370,  339,  458,  355,  853,
  408,  854,  350,  668,  724,  409,  274,  462,  413,  268,
  722,  737,   50,  739,   50,  361,  250,  277,  723,  350,
  679,  572,  681,  552,  572,  280,  572,  572,  572,  369,
  137,  690,  556,  692,  379,  550,  528,  159,  129,  605,
  462,  410,  695,  356,  410,  350,  564,  462,  272,  565,
  129,  607,  220,  462,  543,  694,  396,  543,  181,  294,
  295,  940,  846,  848,  334,   67,  462,  349,  462,  416,
  462,  378,  416,  378,   83,  410,  544,   50,  250,  544,
  360,  281,  718,  219,  356,  721,  397,  410,  553,  946,
  407,  519,  520,  548,    1,  285,  913,  678,  462,  915,
  549,    1,  519,  520,  783,   48,  419,  395,  790,  250,
  460,  420,  170,  421,  381,  462,  663,  664,  339,  204,
  205,  206,  171,  172,  173,  174,  175,  176,    1,  548,
  462,  252,  253,  268,  159,  159,  585,    2,  422,    3,
    4,  159,  129,    6,  252,  253,  254,  423,  462,  140,
  850,  424,  442,  443,  444,  462,  697,  908,    1,  142,
  425,  462,  415,  777,  640,  760,  512,  762,  764,  530,
  766,  457,    1,   67,  462,  129,  462,  439,  462,  241,
  242,  243,  275,  246,  473,  339,  477,  572,   44,  572,
  462,  797,  799,  869,  871,  333,  159,  442,  443,  805,
  808,  812,  815,  872,  873,  818,  462,  819,  857,  858,
  859,   40,   41,   42,  826,  497,  828,  114,  114,  114,
  888,  895,  893,  500,   53,  501,  135,  839,  156,  160,
  163,  908,  502,    1,  167,    1,  377,   50,  462,  164,
  166,  281,  268,  483,  484,  485,  503,  442,  884,  840,
  511,  515,  349,  651,  517,  339,  356,  363,  370,  908,
  584,  589,  590,  591,  592,   48,  462,  212,   53,  593,
  602,  227,  603,  604,  408,  159,   53,  621,  622,  159,
  410,  284,  647,  648,  512,  658,  369,  512,  659,  382,
  922,  924,  660,  382,  369,  665,  378,  369,    1,  369,
  868,  870,  673,  675,  677,  268,  684,  888,  875,  877,
  879,  691,  462,  369,  700,  317,  369,  382,  701,  708,
  709,  462,  462,  711,  717,  885,  886,  887,  799,  280,
  719,  742,  797,  729,  755,  734,  757,  747,  748,  758,
  927,  928,  783,  765,  369,  897,  898,  788,  900,  780,
  839,  792,  904,  839,  793,  319,  322,  820,  817,  825,
  462,  512,  831,  409,  834,  281,  845,  409,  409,  851,
  856,  409,  840,  369,  462,  840,  548,  750,   53,  844,
  861,  918,  863,  864,  865,  889,  462,  380,  462,  512,
  462,  409,  882,  890,  919,  371,  920,  921,  923,  892,
  891,  380,  517,  371,  894,  895,  371,  893,  371,  896,
  899,  901,  548,  932,  887,  366,  886,  367,  462,  912,
  462,  925,  873,  517,  933,  371,  934,  935,  926,  462,
  462,  872,  391,  931,  394,  429,  936,  937,  939,  941,
  212,  227,  126,  518,  480,   53,  486,  942,  414,  943,
  462,  339,  479,  371,  485,   95,  373,  446,    1,  338,
   50,  944,  112,  247,  308,  390,  461,   59,  348,  263,
  472,  247,   87,  516,  517,  248,  696,  323,  702,  478,
  480,  832,  930,  789,  432,  517,  725,  781,  767,  280,
  373,  635,  374,  636,  878,  809,  806,  876,  816,  813,
  375,  728,  643,  743,  855,  945,  782,  517,  435,  436,
  382,  835,  730,  431,  517,  462,  733,  434,  509,  570,
  517,  481,  462,  462,  514,  437,  462,  649,  462,  862,
  655,  491,  883,  517,  796,  517,  687,  517,  833,  482,
  305,  382,  495,  462,  499,  462,  611,  613,  595,  493,
  369,  369,  377,   50,  491,  507,  508,  281,  376,    0,
    0,    0,    0,    0,    0,  517,  581,    0,    0,  156,
   50,    0,   49,  462,  191,  321,    0,    0,    0,    0,
  133,   48,    0,  461,  409,    0,    0,    0,    0,    0,
    0,  140,    0,    0,    0,  600,    0,  517,    0,    0,
    0,    0,    0,    0,    0,  462,    0,    0,    0,    0,
    0,    0,  378,    0,    0,  409,    0,    0,    0,  594,
    0,  212,  212,    0,    0,   47,    0,    0,    0,  134,
  598,    0,  462,    0,    0,    0,    0,    0,    0,    0,
    0,  462,  409,  654,  609,  366,  610,  657,  612,    0,
  140,    0,  662,    0,    0,  140,    0,   44,    0,  371,
  371,    0,    0,    0,  674,    0,    0,  517,    0,  367,
    0,    0,    0,    0,    0,    0,  517,  517,  366,    0,
    0,  366,    0,  366,    0,  366,  366,    0,    0,  366,
    0,    0,    0,    0,    0,    0,    0,   53,    0,    0,
    0,    0,    0,  366,  366,    0,  366,  366,  366,  366,
    0,    0,    0,    0,  140,    0,  140,    0,   53,  365,
    0,  680,  683,    0,  686,    0,    0,    0,    0,    0,
  689,    0,    0,  517,    0,  211,  366,    0,  366,    0,
  366,    0,    0,    0,    0,    0,    0,    0,   53,   53,
  284,    0,  365,    0,    0,  365,    0,  365,    0,  365,
  365,    0,    0,  365,    0,    0,    0,    0,  366,  380,
  366,  211,    0,    0,    1,    0,    0,  365,  365,  517,
  365,  365,  365,  365,    0,    0,  756,  462,  517,  517,
    0,    1,    0,    0,    0,    0,  462,  462,    0,    0,
    0,    0,    0,    0,    0,  280,  373,  429,  374,    0,
  365,  744,  365,    0,  365,    0,  375,    0,    0,    0,
    0,    0,    0,  190,    0,  128,  126,   12,   13,   14,
   15,   16,   17,   18,   19,    0,    0,    0,    0,  129,
  261,  795,  365,    0,  365,  461,    0,    0,  130,    0,
  140,   34,   35,   36,   37,   38,   39,   53,  140,    0,
   40,   41,   42,    0,    0,    0,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,    0,  140,  140,  140,
  140,  140,  140,    0,    0,    0,    0,  140,    0,    0,
    0,  140,  140,  140,  140,  140,  140,    0,    0,    0,
    0,    0,  366,    0,  366,    0,  366,    0,  822,  824,
    0,    0,  366,    0,  366,  827,    0,    0,    0,  366,
  366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
    0,  366,  366,  366,  366,  366,  366,    0,    0,    0,
    0,  366,  366,  366,    0,  366,  366,  366,  366,  366,
  366,    0,    0,    0,   48,    0,    0,    0,    0,  366,
  366,    0,  366,  366,  366,  366,  366,  366,    0,    0,
  744,  366,  366,  366,    0,    0,  365,    0,  365,    0,
  365,    0,    0,    0,    0,    0,  365,    0,  365,    0,
    0,    0,    0,  365,  365,  365,  365,  365,  365,  365,
  365,  365,  365,  365,    0,  365,  365,  365,  365,  365,
  365,    0,    0,    0,    0,  365,  365,  365,  355,  365,
  365,  365,  365,  365,  365,   48,    0,    0,    0,    0,
    0,    0,    0,  365,  365,    0,  365,  365,  365,  365,
  365,  365,    0,    0,    0,  365,  365,  365,    0,  903,
    0,  355,    0,  905,  355,    0,  355,    0,  355,  355,
    0,    0,  355,    0,  355,  126,   12,   13,   14,   15,
   16,   17,   18,   19,    0,    0,  355,  355,    0,  355,
  355,  355,  355,    0,    0,    0,  542,    0,  369,    0,
  462,  234,    0,    0,    0,  234,  369,    0,    0,  369,
    0,  369,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  355,    0,  355,    0,  369,    0,    0,  369,  234,
    0,    0,    0,  462,    0,    0,  462,    0,  462,    0,
  462,  462,    0,    0,  462,    0,  462,    0,    0,    0,
    0,  355,    0,  355,    0,    0,  369,    0,  462,  462,
  234,  462,    0,  462,  462,    0,    0,    0,    0,    0,
    0,    0,    0,  540,    0,  126,   12,   13,   14,   15,
   16,   17,   18,   19,    0,    0,    0,    0,    0,   24,
   25,  462,    0,  462,    0,  462,   27,    0,    0,    0,
   28,   29,    0,    0,   32,    0,  540,    0,    0,  540,
    0,  540,    0,  540,  540,    0,    0,  540,    0,  540,
    0,    0,    0,  462,    0,  462,    0,    0,    0,    0,
    0,  540,  540,    0,  540,    0,  540,  540,  541,    0,
    0,    0,    0,    0,    0,    0,   11,   12,   13,   14,
   15,   16,   17,   18,   19,   20,    0,   21,   22,   23,
   24,   25,   26,    0,  540,    0,  540,   27,  540,    0,
    0,   28,   29,   30,   31,   32,  526,    0,    0,    0,
    0,    0,    0,    0,    0,  355,    0,  355,    0,  355,
    0,    0,    0,    0,    0,  355,  540,  355,  540,    0,
    0,    0,    0,  355,  355,  355,  355,  355,  355,  355,
  355,  355,  355,    0,  355,  355,  355,  355,  355,  355,
    0,    0,  234,    0,  355,  355,  355,    0,  355,  355,
  355,  355,  355,  355,  209,    0,    0,    0,    0,    0,
    0,    0,  355,  355,    0,  355,  355,  355,  355,  355,
  355,    0,    0,  234,  355,  355,  355,  462,    0,  462,
    0,  462,  369,  369,    0,    0,    0,  462,    0,  462,
    0,    0,    0,    0,    0,  462,  462,  462,  462,  462,
  462,  462,  462,  462,  462,    0,  462,  462,  462,  462,
  462,  462,    0,  209,    0,  209,  462,    0,  462,    0,
  462,  462,  462,  462,  462,  462,   48,    0,    0,    0,
    0,    0,    0,    0,  462,  462,    0,  462,  462,  462,
  462,  462,  462,    0,    0,    0,  462,  462,  462,    0,
  540,    0,  540,    0,  540,    0,    0,    0,    0,    0,
  540,    0,  540,    0,    0,    0,    0,    0,  540,  540,
  540,  540,  540,  540,  540,  540,  540,  540,    0,  540,
  540,  540,  540,  540,  540,    0,    0,  720,    0,  540,
  533,  540,    0,  540,  540,  540,  540,  540,  540,  396,
    0,    0,  396,    0,    0,    0,    0,  540,  540,    0,
  540,  540,  540,  540,  540,  540,    0,    0,    0,  540,
  540,  540,    0,  533,    0,    0,  533,    0,  533,    0,
  533,  533,    0,    0,  533,    0,  533,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  533,  533,
    0,  533,    0,  533,  533,    0,    0,    0,    0,    0,
    0,  396,  489,  396,    0,  209,  209,  209,  209,  209,
  209,  209,  209,  209,    0,    0,    0,    0,    0,  209,
  209,  533,    0,  533,    0,  533,  209,  209,    0,    0,
  209,  209,    0,    0,  209,  489,    0,    0,  489,    0,
  489,    0,  489,  489,    0,    0,  489,    0,    0,    0,
    0,    0,    0,    0,    0,  533,    0,    0,    0,    0,
  489,  489,    0,  489,    0,  489,  489,    0,    0,  541,
    0,    0,    0,    0,    0,  408,    0,   11,   12,   13,
   14,   15,   16,   17,   18,   19,   20,    0,   21,   22,
   23,   24,   25,   26,    0,  489,    0,  489,   27,    0,
    0,    0,   28,   29,   30,   31,   32,  526,  522,    0,
    0,  408,    0,  408,    0,  408,  408,    0,    0,  408,
    0,  408,    0,    0,    0,  489,    0,  489,    0,    0,
    0,    0,    0,  408,  408,    0,  522,    0,  522,  408,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  396,  396,  396,  396,  396,  396,  396,
  396,  396,    0,    0,    0,    0,  408,  396,  396,    0,
  408,    0,    0,    0,  396,    0,    0,    0,  396,  396,
    0,    0,  396,    0,    0,    0,    0,  533,    0,  533,
    0,  533,    0,    0,    0,    0,    0,  533,  408,  533,
  408,    0,    0,    0,    0,  533,  533,  533,  533,  533,
  533,  533,  533,  533,  533,    0,  533,  533,  533,  533,
  533,  533,    0,    0,    0,    0,  533,    0,  533,    0,
  533,  533,  533,  533,  533,  533,  205,    0,    0,    0,
    0,    0,    0,    0,  533,  533,    0,  533,  533,  533,
  533,  533,  533,    0,    0,    0,  533,  533,  533,  489,
    0,  489,    0,  489,    0,    0,    0,    0,    0,  489,
    0,  489,    0,    0,    0,    0,    0,  489,  489,  489,
  489,  489,  489,  489,  489,  489,  489,    0,  489,  489,
  489,  489,  489,  489,    0,  205,    0,  205,  489,    0,
  489,    0,  489,  489,  489,  489,  489,  489,   48,    0,
    0,    0,    0,    0,    0,    0,  489,  489,    0,  489,
  489,  489,  489,  489,  489,    0,    0,    0,  489,  489,
  489,    0,  408,    0,  408,    0,  408,    0,    0,    0,
    0,    0,  408,    0,  408,    0,    0,    0,    0,    0,
  408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
    0,  408,  408,  408,  408,  408,  408,    0,    0,  551,
    0,  408,  409,  207,    0,  408,  408,  408,  408,  408,
  408,    0,    0,    0,    0,    0,    0,    0,    0,  408,
  408,    0,  408,  408,  408,  408,  408,  408,    0,    0,
    0,  408,  408,  408,    0,  462,    0,    0,  409,    0,
  409,    0,  409,  409,    0,    0,  409,    0,  369,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  409,  409,  207,  462,  207,  462,  409,    0,    0,    0,
    0,    0,    0,    0,  413,    0,    0,  205,  205,  205,
  205,  205,  205,  205,  205,  205,    0,    0,    0,    0,
    0,  205,  205,  409,    0,    0,    0,  409,  205,    0,
    0,    0,  205,  205,    0,    0,  205,  517,    0,    0,
  413,    0,  413,    0,  413,  413,    0,    0,  413,    0,
  413,    0,    0,    0,    0,  409,    0,  409,    0,    0,
    0,    0,  413,  413,    0,  517,    0,  517,  413,    0,
    0,    0,    0,    0,    0,    0,    0,  258,    0,  126,
   12,   13,   14,   15,   16,   17,   18,   19,    0,    0,
    0,    0,    0,   24,   25,  413,    0,    0,    0,  413,
   27,    0,    0,    0,   28,   29,    0,    0,   32,    0,
  515,    0,    0,  258,    0,  258,    0,  258,  258,    0,
    0,  258,    0,  258,    0,    0,    0,  413,    0,  413,
  207,    0,    0,    0,    0,  258,  258,    0,  515,    0,
  515,  258,    0,    0,  207,  207,  207,  207,  207,  207,
  207,  207,  207,    0,    0,    0,    0,    0,  207,  207,
    0,    0,    0,    0,    0,  207,    0,    0,  258,  207,
  207,    0,  258,  207,    0,    0,    0,    0,    0,    0,
  116,  116,  116,  116,  116,  116,  116,  116,  116,  409,
    0,  409,    0,  409,  116,  116,  116,    0,    0,  409,
  258,  409,  258,    0,    0,    0,    0,  409,  409,  409,
  409,  409,  409,  409,  409,  409,  409,    0,  409,  409,
  409,  409,  409,  409,    0,    0,    0,    0,  409,    0,
    0,    0,  409,  409,  409,  409,  409,  409,    0,    0,
    0,    0,    0,    0,    0,    0,  409,  409,    0,  409,
  409,  409,  409,  409,  409,    0,    0,    0,  409,  409,
  409,  413,    0,  413,    0,  413,    0,    0,    0,    0,
    0,  413,    0,  413,    0,    0,    0,    0,    0,  413,
  413,  413,  413,  413,  413,  413,  413,  413,  413,    0,
  413,  413,  413,  413,  413,  413,    0,    0,    0,    0,
  413,    0,    0,    0,  413,  413,  413,  413,  413,  413,
    0,    0,    0,    0,    0,    0,    0,    0,  413,  413,
  427,  413,  413,  413,  413,  413,  413,    0,    0,    0,
  413,  413,  413,    0,  258,    0,  258,    0,  258,    0,
    0,    0,    0,    0,  258,    0,  258,    0,  427,  383,
    0,    0,  258,  258,  258,  258,  258,  258,  258,  258,
  258,  258,    0,  258,  258,  258,  258,  258,  258,    0,
    0,    0,    0,  258,    0,    0,    0,  258,  258,  258,
  258,  258,  258,    0,    0,  383,    0,  383,    0,  383,
  383,  258,  258,  383,  258,  258,  258,  258,  258,  258,
    0,    0,    0,  258,  258,  258,    0,  383,  383,    0,
  383,  383,    0,  383,  716,    0,    0,    0,    0,    0,
    0,  458,  256,   12,   13,   14,   15,   16,   17,   18,
   19,  257,    0,  258,  259,  260,  261,  262,  263,    0,
    0,    0,  383,    0,  383,    0,    0,  264,  265,  266,
    0,  267,    0,    0,    0,    0,    0,  458,    0,  458,
    0,  458,  458,    0,    0,  458,    0,    0,    0,    0,
    0,    0,  383,    0,  383,    0,    0,    0,    0,  458,
  458,    0,  458,    0,    0,  458,    0,  911,    0,    0,
    0,    0,    0,    0,  460,  256,   12,   13,   14,   15,
   16,   17,   18,   19,  257,    0,  258,  259,  260,  261,
  262,  263,    0,    0,  458,    0,  458,    0,    0,    0,
  264,  265,  266,    0,  267,    0,    0,    0,    0,    0,
  460,    0,  460,    0,  460,  460,    0,    0,  460,    0,
    0,  427,    0,    0,  458,    0,  458,    0,    0,    0,
    0,  427,  460,  460,    0,  460,    0,    0,  460,  427,
  427,  427,  427,  427,  427,  427,  427,  427,  427,    0,
  427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
    0,    0,    0,  427,  427,  427,  427,  460,  427,  460,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  383,    0,  383,    0,
  383,    0,    0,    0,    0,    0,  383,  460,  383,  460,
    0,    0,    0,    0,  383,  383,  383,  383,  383,  383,
  383,  383,  383,  383,    0,  383,  383,  383,  383,  383,
  383,    0,    0,    0,    0,  383,    0,  383,    0,  383,
  383,  383,  383,  383,  383,    0,    0,    0,    0,    0,
    0,    0,    0,  383,  383,    0,  383,  383,  383,  383,
  383,  383,    0,    0,    0,  383,  383,  383,  458,    0,
  458,    0,  458,    0,    0,    0,    0,    0,  458,    0,
  458,    0,    0,    0,    0,    0,  458,  458,  458,  458,
  458,  458,  458,  458,  458,  458,    0,  458,  458,  458,
  458,  458,  458,    0,    0,    0,    0,  458,    0,  458,
    0,  458,  458,  458,  458,  458,  458,    0,    0,    0,
    0,    0,    0,    0,    0,  458,  458,    0,  458,  458,
  458,  458,  458,  458,    0,    0,    0,  458,  458,  458,
    0,  460,    0,  460,    0,  460,    0,    0,    0,    0,
    0,  460,    0,  460,    0,    0,  459,    0,    0,  460,
  460,  460,  460,  460,  460,  460,  460,  460,  460,    0,
  460,  460,  460,  460,  460,  460,    0,    0,    0,    0,
  460,    0,  460,    0,  460,  460,  460,  460,  460,  460,
    0,    0,  459,    0,  459,    0,  459,  459,  460,  460,
  459,  460,  460,  460,  460,  460,  460,    0,    0,    0,
  460,  460,  460,    0,  459,  459,    0,  459,    0,    0,
  459,    0,    0,    0,    0,    0,    0,    0,  443,  256,
   12,   13,   14,   15,   16,   17,   18,   19,  257,    0,
  258,  259,  260,  261,  262,  263,  801,  802,    0,  459,
    0,  459,    0,    0,  264,  265,  266,    0,  267,    0,
    0,    0,    0,    0,  443,    0,  443,    0,  443,  443,
    0,    0,  443,    0,  443,    0,    0,    0,    0,  459,
    0,  459,    0,    0,  409,    0,  443,  443,    0,    0,
    0,    0,  443,    0,    0,    0,    0,    0,    0,    0,
  256,   12,   13,   14,   15,   16,   17,   18,   19,  257,
    0,  258,  259,  260,  261,  262,  263,  462,    0,  443,
  163,  443,  409,  443,  163,  264,  265,  266,  409,  267,
  369,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  409,    0,  462,    0,  462,  163,    0,
    0,  443,    0,  443,    0,    0,    0,    0,    0,    0,
    0,   50,    0,   49,    0,  191,  688,    0,    0,    0,
    0,  133,    0,    0,    0,  409,    0,    0,    0,  409,
    0,    0,    0,    0,    0,  256,   12,   13,   14,   15,
   16,   17,   18,   19,  257,    0,  258,  259,  260,  261,
  262,  263,  801,  802,  872,  873,    0,  409,    0,  409,
  264,  265,  266,  459,  267,  459,   47,  459,    0,    0,
  134,    0,    0,  459,    0,  459,    0,    0,    0,    0,
    0,  459,  459,  459,  459,  459,  459,  459,  459,  459,
  459,    0,  459,  459,  459,  459,  459,  459,   44,    0,
    0,    0,  459,    0,  459,    0,  459,  459,  459,  459,
  459,  459,    0,    0,    0,    0,    0,    0,    0,    0,
  459,  459,    0,  459,  459,  459,  459,  459,  459,    0,
    0,    0,  459,  459,  459,  443,    0,  443,    0,  443,
    0,    0,    0,    0,    0,  443,    0,  443,    0,    0,
    0,    0,    0,  443,  443,  443,  443,  443,  443,  443,
  443,  443,  443,    0,  443,  443,  443,  443,  443,  443,
    0,    0,    0,    0,  443,    0,  443,    0,  443,  443,
  443,  443,  443,    0,    0,    0,    0,    0,    0,    0,
    0,  163,    0,  409,    0,  443,  443,  443,  443,  443,
  443,  409,    0,    0,  443,  443,  443,    0,    0,  409,
  409,  409,  409,  409,  409,  409,  409,  409,  409,    0,
  409,  409,  163,  409,  409,  409,    0,  454,    0,    0,
  409,    0,    1,    0,  409,  409,  409,  409,  409,  409,
    0,    0,    0,    0,    0,    0,    0,    0,  462,  409,
    0,  409,  409,  409,  409,  409,  409,    0,    0,    0,
  409,  409,  409,  454,  190,  454,  128,  454,  454,    0,
    0,  454,    0,  454,    0,    0,    0,    0,    0,    0,
  129,    0,    0,    0,    0,  454,  454,    0,    0,  130,
    0,  454,   34,   35,   36,   37,   38,   39,    0,  410,
    0,   40,   41,   42,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  454,    0,
  454,    0,  454,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  410,    0,  410,    0,  410,
  410,    0,    0,  410,    0,  410,    0,    0,    0,    0,
  454,    0,  454,    0,    0,    0,    0,  410,  410,    0,
    0,    0,    0,  410,    0,    0,    0,    0,    0,    0,
    0,    0,  411,  126,   12,   13,   14,   15,   16,   17,
   18,   19,    0,    0,    0,    0,    0,  261,  262,    0,
  410,    0,    0,    0,  410,    0,    0,    0,  264,  265,
    0,    0,  267,    0,    0,    0,    0,    0,  411,    0,
  411,    0,  411,  411,    0,    0,  411,    0,  411,    0,
    0,    0,  410,    0,  410,    0,    0,    0,    0,    0,
  411,  411,    0,    0,    0,    0,  411,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  369,    0,  411,  382,    0,    0,  411,  382,  369,
    0,    0,  369,    0,  369,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  454,    0,  454,    0,  454,  462,
    0,  369,  382,    0,  454,  411,  454,  411,    0,    0,
    0,    0,  454,  454,  454,  454,  454,  454,  454,  454,
  454,  454,    0,  454,  454,  454,  454,  454,  454,  369,
    0,    0,    0,  454,    0,  454,    0,  454,  454,  454,
  454,  454,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  454,  454,  454,  454,  454,  454,
    0,  462,    0,  454,  454,  454,  410,    0,  410,    0,
  410,    0,    0,    0,    0,    0,  410,    0,  410,    0,
    0,    0,    0,    0,  410,  410,  410,  410,  410,  410,
  410,  410,  410,  410,    0,  410,  410,  410,  410,  410,
  410,    0,    0,    0,    0,  410,    0,    0,    0,  410,
  410,  410,  410,  410,  410,  206,    0,    0,    0,    0,
    0,    0,    0,  410,    0,    0,  410,  410,  410,  410,
  410,  410,    0,    0,    0,  410,  410,  410,   50,  411,
   49,  411,  191,  411,    0,    0,    0,    0,  133,  411,
    0,  411,    0,    0,    0,    0,    0,  411,  411,  411,
  411,  411,  411,  411,  411,  411,  411,    0,  411,  411,
  411,  411,  411,  411,  206,  420,  206,    0,  411,    0,
    0,    0,  411,  411,  411,  411,  411,  411,    0,    0,
    0,    0,    0,   47,    0,  382,  411,  134,    0,  411,
  411,  411,  411,  411,  411,    0,    0,    0,  411,  411,
  411,  420,    0,  420,    0,    0,  420,    0,    0,  420,
    0,  420,    0,    0,    0,   44,  382,    0,    0,    0,
    0,    0,    0,  420,  420,  369,  369,    0,    0,  420,
    0,    0,    0,  462,    0,    0,    0,  364,    0,    0,
    0,    0,  462,  462,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  420,    0,    0,    0,
  420,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  364,    0,  364,    0,  364,  364,    0,
    0,  364,    0,    0,    0,    0,    0,    0,  420,    0,
  420,    0,    0,    0,    0,  364,  364,    0,    0,    0,
    0,  364,  206,    0,    0,    0,    0,    0,    0,    0,
  418,    0,    0,    0,    0,    0,  206,  206,  206,  206,
  206,  206,  206,  206,  206,    0,    0,    0,    0,    0,
  206,  206,  364,    0,    0,    0,    0,  206,    0,    0,
    0,  206,  206,    0,    0,  206,  418,    0,  418,    1,
    0,  418,    0,    0,  418,    0,  418,    0,    0,    0,
  364,    0,  364,    0,    0,    0,    0,    0,  418,  418,
    0,    0,    0,    0,  418,    0,    0,    0,    0,    0,
    0,  190,    0,  128,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  129,    0,    0,
    0,  418,    0,    0,    0,  418,  130,    0,    0,   34,
   35,   36,   37,   38,   39,    0,    0,    0,   40,   41,
   42,    0,  420,    0,  420,    0,  420,    0,    0,    0,
    0,    0,  420,  418,  420,  418,    0,    0,    0,    0,
  420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
    0,  420,  420,  420,  420,  420,  420,    0,    0,    0,
    0,  420,    0,    0,    0,  420,  420,  420,  420,  420,
  420,    0,    0,    0,    0,    0,    0,    0,    0,  420,
  420,    0,  420,  420,  420,  420,  420,  420,    0,    0,
    0,  420,  420,  420,  364,    0,  364,    0,  364,    0,
    0,    0,    0,    0,  364,    0,  364,    0,    0,    0,
    0,    0,  364,  364,  364,  364,  364,  364,  364,  364,
  364,  364,    0,  364,  364,  364,  364,  364,  364,    0,
    0,    0,    0,  364,    0,  364,    0,  364,  364,  364,
  364,  364,  364,    0,    0,    0,    0,    0,    0,    0,
    0,  364,  364,    0,  364,  364,  364,  364,  364,  364,
    0,    0,    0,  364,  364,  364,    0,  418,    0,  418,
    0,  418,    0,    0,    0,    0,    0,  418,    0,  418,
    0,  319,  363,    0,    0,  418,  418,  418,  418,  418,
  418,  418,  418,  418,  418,    0,  418,  418,  418,  418,
  418,  418,    0,    0,    0,    0,  418,    0,    0,    0,
  418,  418,  418,  418,  418,  418,    0,    0,  363,    0,
  363,    0,  363,  363,  418,  418,  363,  418,  418,  418,
  418,  418,  418,    0,    0,    0,  418,  418,  418,    0,
  363,  363,  319,    0,    0,    0,  363,    0,    0,    0,
    0,    0,    0,    0,  447,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  363,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  447,    0,  447,    0,    0,  447,    0,    0,  447,    0,
    0,    0,    0,    0,    0,  363,    0,  363,    0,    0,
    0,    0,  447,  447,    0,  447,    0,    0,  447,    0,
    0,    0,    0,    0,    0,    0,    0,  446,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  447,    0,  447,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  446,    0,  446,    0,    0,  446,    0,
    0,  446,    0,    0,    0,    0,    0,    0,    0,  447,
    0,    0,    0,    0,    0,  446,  446,    0,  446,    0,
    0,  446,  319,  319,  319,  319,  319,  319,  319,  319,
  319,    0,    0,    0,    0,    0,  319,  319,    0,    0,
    0,    0,    0,  319,    0,    0,    0,  319,  319,    0,
  446,  319,  446,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  363,
    0,  363,    0,  363,    0,    0,    0,    0,    0,  363,
    0,  363,  446,    0,    0,    0,    0,  363,  363,  363,
  363,  363,  363,  363,  363,  363,  363,    0,  363,  363,
  363,  363,  363,  363,    0,    0,    0,    0,  363,    0,
  363,    0,  363,  363,  363,  363,  363,  363,    0,    0,
    0,    0,    0,    0,    0,    0,  363,  363,    0,  363,
  363,  363,  363,  363,  363,    0,    0,    0,  363,  363,
  363,  447,    0,  447,    0,  447,    0,    0,    0,    0,
    0,  447,    0,  447,    0,    0,    0,    0,    0,  447,
  447,  447,  447,  447,  447,  447,  447,  447,  447,  317,
  447,  447,  447,  447,  447,  447,    0,    0,    0,    0,
  447,    0,  447,    0,  447,  447,  447,  447,  447,    0,
    0,    0,    0,    0,    0,    0,  431,    0,  447,  447,
  431,  447,  447,  447,  447,  447,  447,    0,    0,    0,
  447,  447,  447,    0,  446,    0,  446,    0,  446,    0,
    0,    0,    0,    0,  446,    0,  446,    0,    0,  423,
  317,    0,  446,  446,  446,  446,  446,  446,  446,  446,
  446,  446,    0,  446,  446,  446,  446,  446,  446,    0,
    0,    0,    0,  446,    0,  446,    0,  446,  446,  446,
  446,  446,    0,    0,    0,  423,    0,  423,    0,  423,
  423,  446,  446,  423,  446,  446,  446,  446,  446,  446,
    0,    0,    0,  446,  446,  446,    0,  423,  423,    0,
    0,    0,    0,  423,    0,    0,    0,    0,    0,    0,
    0,  424,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  423,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  424,    0,  424,
    0,  424,  424,    0,    0,  424,    0,    0,    0,    0,
    0,    0,  423,    0,  423,    0,    0,    0,    0,  424,
  424,    0,    0,    0,    0,  424,    0,    0,    0,    0,
    0,    0,  399,    0,    0,    0,    0,    0,    0,    0,
  317,  317,  317,  317,  317,  317,  317,  317,  317,    0,
    0,    0,    0,    0,  317,  317,  424,    0,    0,    0,
    0,  317,    0,    0,    0,  317,  317,    0,    0,  317,
  399,    0,    0,  399,    0,    0,  399,  431,  399,    0,
    0,    0,    0,    0,  424,    0,  424,  431,    0,    0,
  399,  399,    0,    0,    0,  431,  431,  431,  431,  431,
  431,  431,  431,  431,  431,    0,  431,  431,  431,  431,
  431,  431,  431,  431,  431,  431,    0,    0,    0,  431,
  431,  431,  431,  399,  431,    0,    0,  399,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  423,    0,  423,    0,
  423,    0,    0,    0,    0,  399,  423,  399,  423,    0,
    0,    0,    0,    0,  423,  423,  423,  423,  423,  423,
  423,  423,  423,  423,    0,  423,  423,  423,  423,  423,
  423,    0,    0,    0,   48,  423,    0,    0,    0,  423,
  423,  423,  423,  423,  423,    0,    0,    0,    0,    0,
    0,    0,    0,  423,  423,    0,  423,  423,  423,  423,
  423,  423,    0,    0,    0,  423,  423,  423,  424,    0,
  424,    0,  424,    0,    0,    0,    0,    0,  424,    0,
  424,    0,    0,    0,    0,    0,  424,  424,  424,  424,
  424,  424,  424,  424,  424,  424,    0,  424,  424,  424,
  424,  424,  424,    0,    0,    0,    0,  424,    0,    0,
    0,  424,  424,  424,  424,  424,  424,    0,    0,    0,
    0,    0,    0,    0,    0,  424,  424,    0,  424,  424,
  424,  424,  424,  424,    0,    0,    0,  424,  424,  424,
    0,  399,    0,  399,    0,    0,    0,    0,    0,  399,
    0,  399,    0,    0,    0,    0,    0,  399,  399,  399,
  399,  399,  399,  399,  399,  399,  399,    0,  399,  399,
    0,  399,  399,  399,  401,    0,    0,    0,  399,    0,
    0,    0,  399,  399,  399,  399,  399,  399,    0,    0,
    0,    0,    0,    0,    0,    0,  399,  399,    0,  399,
  399,  399,  399,  399,  399,    0,    0,    0,  399,  399,
  399,    0,  401,    0,    0,  401,    0,    0,  401,    0,
  401,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  401,  401,    0,    0,    0,  541,    0,    0,
    0,    0,    0,    0,  404,   11,   12,   13,   14,   15,
   16,   17,   18,   19,   20,    0,   21,   22,   23,   24,
   25,   26,    0,    0,    0,  401,   27,    0,    0,  401,
   28,   29,   30,   31,   32,  526,    0,    0,    0,    0,
    0,    0,  404,    0,    0,  404,    0,    0,  404,    0,
  404,    0,    0,    0,    0,    0,    0,  401,    0,  401,
    0,  127,  404,  404,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  500,  404,    0,    0,    0,  404,
    0,  500,    0,    0,    0,    0,    0,  500,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  148,    0,
  127,    0,  500,    0,  500,  127,    0,  404,    0,  404,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  500,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  148,    0,    0,
    0,    0,  148,    0,  127,    0,  127,    0,    0,    0,
    0,    0,    0,  401,    0,  401,    0,    0,    0,    0,
    0,  401,    0,  401,    0,    0,    0,    0,    0,  401,
  401,  401,  401,  401,  401,  401,  401,  401,  401,    0,
  401,  401,    0,  401,  401,  401,    0,    0,    0,    0,
  401,    0,    0,  195,  401,  401,  401,  401,  401,  401,
    0,  148,    0,  148,    0,    0,    0,    0,  401,  401,
    0,  401,  401,  401,  401,  401,  401,    0,    0,    0,
  401,  401,  401,  404,    0,  404,    0,    0,    0,    0,
    0,  404,    0,  404,    0,    0,    0,    0,    0,  404,
  404,  404,  404,  404,  404,  404,  404,  404,  404,    0,
  404,  404,  195,  404,  404,  404,    0,  195,    0,    0,
  404,    0,    0,    0,  404,  404,  404,  404,  404,  404,
  151,    0,    0,    0,    0,    0,    0,    0,  404,  404,
  127,  404,  404,  404,  404,  404,  404,    0,  127,    0,
  404,  404,  404,    0,    0,    0,  127,  127,  127,  127,
  127,  127,  127,  127,  127,  127,    0,  127,  127,  127,
  127,  127,  127,    0,  151,    0,  195,  127,  195,    0,
    0,  127,  127,  127,  127,  127,  127,    0,    0,  151,
    0,    0,    0,    0,  151,  500,  500,  148,    0,    0,
    0,    0,    0,    0,    0,  148,    0,    0,    0,    0,
    0,    0,    0,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,    0,  148,  148,  148,  148,  148,  148,
    0,    0,    0,    0,  148,    0,    0,    0,  148,  148,
  148,  148,  148,  148,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  151,  369,    0,    0,  236,
    0,  369,    0,  236,  369,    0,    0,  369,    0,  369,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  369,    0,    0,  369,  236,    0,    0,
    0,    0,    0,   58,    0,   58,    0,   58,    0,    0,
    0,    0,    0,   58,    0,    0,    0,    0,    0,    0,
    0,    0,  195,    0,  369,   58,  377,   50,  369,   49,
  195,  398,  399,    0,    0,    0,    0,   45,  195,  195,
  195,  195,  195,  195,  195,  195,  195,  195,    0,  195,
  195,  195,  195,  195,  195,   48,  369,    0,   58,  195,
    0,    0,   58,  195,  195,  195,  195,  195,  195,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   47,    0,    0,    0,  400,    0,    0,    0,
   58,  256,    0,    0,    0,    0,    0,    0,    0,  151,
    0,    0,    0,    0,    0,    0,    0,  151,    0,    0,
    0,  256,    0,    0,   44,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,    0,  151,  151,  151,  151,
  151,  151,    0,    0,    0,    0,  151,    0,    0,    0,
  151,  151,  151,  151,  151,   50,    0,   49,    0,  216,
    0,    0,    0,    0,    0,   45,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  256,   48,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  236,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  217,    0,    0,    0,   46,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   50,    0,
   49,  236,   43,    0,   58,    0,    0,    0,   45,    0,
  369,  369,   44,    0,  343,    0,    0,    0,  369,    0,
    0,    0,    0,    0,    0,    0,   48,    0,    1,    0,
  369,  369,  369,  369,  369,  369,   58,    0,   58,  369,
  369,  369,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   58,   47,    0,    0,    0,   46,    0,  280,
  373,   58,  374,    0,   58,   58,   58,   58,   58,   58,
  375,    0,    0,   58,   58,   58,  129,    0,    0,    0,
    0,    0,    0,    0,    0,   44,    0,  343,   34,   35,
   36,   37,   38,   39,  256,    0,    0,   40,   41,   42,
    0,    0,  256,  256,  256,  256,  256,  256,  256,  256,
  256,  256,    0,  256,  256,  256,  256,  256,  256,    0,
    0,    0,    0,  256,    0,    0,    0,  256,  256,  256,
  256,  256,  256,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    1,    0,    0,    2,
    0,    3,    4,    5,    0,    6,    0,    0,    0,    7,
    8,    9,   10,    0,   11,   12,   13,   14,   15,   16,
   17,   18,   19,   20,    0,   21,   22,   23,   24,   25,
   26,  666,  667,  775,  776,   27,    0,    0,    0,   28,
   29,   30,   31,   32,   33,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   34,   35,   36,   37,
   38,   39,    0,    0,    0,   40,   41,   42,    0,    1,
    0,    0,    2,    0,    3,    4,    5,    0,    6,    0,
    0,    0,    7,    8,    9,   10,   48,   11,   12,   13,
   14,   15,   16,   17,   18,   19,   20,    0,   21,   22,
   23,   24,   25,   26,  666,  667,    0,    0,   27,    0,
    0,    0,   28,   29,   30,   31,   32,   33,   50,    0,
   49,    0,   43,    0,    0,    0,    0,    0,   45,   34,
   35,   36,   37,   38,   39,    0,    0,    0,   40,   41,
   42,    0,    0,    0,    0,    0,   48,  838,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  522,    0,    0,
  235,    0,    0,   47,  235,  522,    0,   46,  522,    0,
  522,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   50,    0,   49,    0,  216,  522,    0,  522,  235,    0,
   45,    0,    0,    0,    0,   44,    0,  343,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   48,    0,
    0,    0,    0,    0,    0,  522,    0,    0,    0,  235,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  217,    0,    0,    0,   46,
    0,    0,    0,    0,    0,    0,    0,  522,    0,    0,
    0,    0,   50,    0,   49,    0,   43,    0,    0,    0,
    0,    0,   45,    0,    0,    0,    0,   44,    0,  343,
    0,    0,    0,    0,    0,  703,    0,    0,    0,  837,
   48,    0,    0,    0,    0,    0,    0,   11,   12,   13,
   14,   15,   16,   17,   18,   19,   20,    0,   21,   22,
   23,   24,   25,   26,    0,    0,    0,   47,   27,    0,
    0,   46,   28,   29,   30,   31,   32,  526,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
    0,    0,    2,    0,    3,    4,    5,    0,    6,   44,
    0,    0,    7,    8,    9,   10,   48,   11,   12,   13,
   14,   15,   16,   17,   18,   19,   20,    0,   21,   22,
   23,   24,   25,   26,    0,    0,    0,    0,   27,    0,
    0,    0,   28,   29,   30,   31,   32,   33,    0,    0,
    0,  235,    0,    0,    0,    0,    0,    0,    0,   34,
   35,   36,   37,   38,   39,    0,    0,    0,   40,   41,
   42,    1,    0,    0,    2,    0,    3,    4,    5,    0,
    6,    0,  235,    0,    7,    8,    9,   10,   48,   11,
   12,   13,   14,   15,   16,   17,   18,   19,   20,  522,
   21,   22,   23,   24,   25,   26,    0,    0,  522,  522,
   27,    0,    0,    0,   28,   29,   30,   31,   32,   33,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   34,   35,   36,   37,   38,   39,    0,    0,    0,
   40,   41,   42,    1,    0,    0,    2,    0,    3,    4,
    5,    0,    6,    0,    0,    0,    7,    8,    9,   10,
   48,   11,   12,   13,   14,   15,   16,   17,   18,   19,
   20,    0,   21,   22,   23,   24,   25,   26,    0,    0,
    0,    0,   27,    0,    0,    0,   28,   29,   30,   31,
   32,   33,   50,    0,   49,    0,   43,    0,    0,    0,
    0,    0,   45,   34,   35,   36,   37,   38,   39,    0,
    0,    0,   40,   41,   42,  705,    0,    0,    0,  837,
   48,  914,    0,    0,    0,    0,    0,   11,   12,   13,
   14,   15,   16,   17,   18,   19,   20,    0,   21,   22,
   23,   24,   25,   26,    0,    0,    0,   47,   27,    0,
    0,   46,   28,   29,   30,   31,   32,  526,    0,    0,
    0,    0,    0,    0,   50,    0,   49,    0,   43,    0,
    0,    0,    0,    0,   45,    0,    0,    0,    0,   44,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   48,    0,    0,    0,    0,    0,    0,   11,
   12,   13,   14,   15,   16,   17,   18,   19,   20,    0,
   21,   22,   23,   24,   25,   26,    0,    0,    0,   47,
   27,    0,    0,   46,   28,   29,   30,   31,   32,  526,
    0,    0,    0,    0,    0,    0,   50,    0,   49,    0,
  216,    0,    0,    0,    0,    0,   45,    0,    0,    0,
    0,   44,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  837,   48,    0,    0,    0,    0,    0,
    0,   11,   12,   13,   14,   15,   16,   17,   18,   19,
   20,    0,   21,   22,   23,   24,   25,   26,    0,    0,
    0,  217,   27,    0,    0,   46,   28,   29,   30,   31,
   32,  526,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    1,    0,    0,    2,    0,    3,    4,
    5,    0,    6,   44,    0,    0,    7,    8,    9,   10,
    0,   11,   12,   13,   14,   15,   16,   17,   18,   19,
   20,    0,   21,   22,   23,   24,   25,   26,    0,    0,
    0,    0,   27,    0,    0,    0,   28,   29,   30,   31,
   32,   33,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   34,   35,   36,   37,   38,   39,    0,
    0,    0,   40,   41,   42,    1,    0,    0,    2,    0,
    3,    4,    5,    0,    6,    0,    0,    0,    7,    8,
    9,   10,    0,   11,   12,   13,   14,   15,   16,   17,
   18,   19,   20,    0,   21,   22,   23,   24,   25,   26,
    0,    0,    0,    0,   27,    0,    0,    0,   28,   29,
   30,   31,   32,   33,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   34,   35,   36,   37,   38,
   39,    0,    0,    0,   40,   41,   42,    1,    0,    0,
    2,    0,    3,    4,    5,    0,    6,    0,    0,    0,
    7,    8,    9,   10,    0,   11,   12,   13,   14,   15,
   16,   17,   18,   19,   20,    0,   21,   22,   23,   24,
   25,   26,    0,    0,    0,    0,   27,    0,    0,    0,
   28,   29,   30,   31,   32,   33,   50,    0,   49,    0,
   43,    0,    0,    0,    0,    0,   45,   34,   35,   36,
   37,   38,   39,    0,    0,    0,   40,   41,   42,    0,
    0,    0,    0,    0,   48,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   47,   50,    0,   49,   46,  191,  321,    0,    0,
    0,    0,  133,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  320,    0,    0,    0,    0,
   48,    0,    0,   44,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   50,   47,   49,    0,
  132,  134,    0,    0,    0,    0,  133,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  131,
    0,    0,    0,   50,   48,   49,    0,   43,    0,   44,
    0,    0,    0,   45,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  225,    0,    0,    0,    0,
    0,   47,    0,    0,    0,  134,    0,    0,    0,    0,
    0,    0,   50,    0,   49,    0,   43,    0,    0,    0,
    0,    0,   45,    0,    0,    0,    0,    0,   47,    0,
  226,    0,   46,   44,  225,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,
   44,    0,    0,    0,    0,    0,    0,   47,    0,  226,
    0,   46,    0,    0,    0,   11,   12,   13,   14,   15,
   16,   17,   18,   19,   20,    0,   21,   22,   23,   24,
   25,   26,    0,    0,    0,    0,   27,    0,    0,   44,
   28,   29,   30,   31,   32,   33,    0,    0,    0,    0,
    0,    0,    0,    1,    0,    0,    0,   34,   35,   36,
   37,   38,   39,    0,    0,    0,   40,   41,   42,    0,
    0,  126,   12,   13,   14,   15,   16,   17,   18,   19,
    0,    0,    0,    0,    0,  127,    0,  128,    0,    0,
    0,    0,   50,    0,   49,    0,  398,  596,    0,    0,
    0,  129,   45,    0,    0,    0,    0,    1,    0,    0,
  130,    0,    0,   34,   35,   36,   37,   38,   39,    0,
   48,    0,   40,   41,   42,  126,   12,   13,   14,   15,
   16,   17,   18,   19,    1,    0,    0,    0,    0,  127,
    0,  128,    0,    0,    0,    0,    0,   47,    0,    0,
    0,   46,    0,    0,    0,  129,    0,  402,  403,  404,
  405,    0,    0,    0,  130,    0,    0,   34,   35,   36,
   37,   38,   39,    1,    0,    0,   40,   41,   42,   44,
    0,    0,  129,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   34,   35,   36,   37,   38,   39,
    0,    0,    0,   40,   41,   42,   50,    0,   49,    0,
   43,  211,    0,    0,    0,    0,   45,    0,    0,    0,
    0,  129,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   34,   35,   36,   37,   38,   39,    0,
    0,    0,   40,   41,   42,   50,    0,   49,    0,   43,
    0,    0,    0,    0,    0,   45,    0,    0,    0,    0,
    0,   47,    0,    0,    0,   46,    0,    0,  318,    0,
    0,    0,   50,    0,   49,    0,   43,    0,    0,    0,
    0,    0,   45,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   50,   44,   49,    0,   43,    0,    0,    0,
   47,    0,   45,    0,   46,    0,    0,    0,    0,    0,
    0,    0,   50,    1,   49,  498,   43,    0,    0,    0,
    0,    0,   45,    0,    0,    0,    0,   47,    0,    0,
    0,   46,   44,    0,    0,  506,    0,    0,   50,    0,
   49,    0,   43,  682,  280,    0,    0,   47,   45,    0,
    0,   46,    0,    0,    0,  458,    0,    0,   50,   44,
   49,  129,   43,    0,    0,    0,    0,   47,   45,    0,
    0,   46,    0,   34,   35,   36,   37,   38,   39,   44,
    0,  685,   40,   41,   42,   50,    0,   49,    0,   43,
  821,    0,    0,   47,    0,   45,    0,   46,    0,   44,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   47,   50,    0,   49,   46,   43,  823,
    0,    0,    0,    0,   45,   44,    0,    1,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   47,    0,    0,    0,   46,   44,    0,    0,    0,    0,
    0,   50,    0,   49,    0,   43,  902,    0,    0,    0,
    0,   45,    0,    0,    0,    0,    1,    0,    0,   47,
    0,    0,   44,   46,    0,  129,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   34,   35,   36,
   37,   38,   39,    1,    0,    0,   40,   41,   42,    0,
    0,   44,    0,    0,    0,    0,   47,    0,    0,    0,
   46,    0,    0,    1,  129,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   34,   35,   36,   37,
   38,   39,    0,    1,    0,   40,   41,   42,   44,    0,
    0,  129,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  333,    0,   34,   35,   36,   37,   38,   39,    1,
    0,  129,   40,   41,   42,    0,    0,    0,    0,    0,
    0,    0,    0,   34,   35,   36,   37,   38,   39,    1,
    0,  129,   40,   41,   42,    0,    0,    0,    0,    0,
    0,    0,    0,   34,   35,   36,   37,   38,   39,    0,
    0,   50,   40,   41,   42,   43,    1,  129,    0,    0,
    0,   45,    0,    0,    0,    0,    0,    0,    0,   34,
   35,   36,   37,   38,   39,    0,    0,  129,   40,   41,
   42,    0,    0,    0,    0,    1,    0,    0,    0,   34,
   35,   36,   37,   38,   39,    0,    0,    0,   40,   41,
   42,    0,    0,   50,  129,   49,   47,   43,    0,    0,
   46,    0,    0,   45,    0,    0,   34,   35,   36,   37,
   38,   39,    1,    0,    0,   40,   41,   42,    0,    0,
    0,    0,    0,  129,    0,    0,    0,    0,   44,    0,
    0,    0,    0,    0,    0,   34,   35,   36,   37,   38,
   39,    0,    0,    0,   40,   41,   42,   50,   47,   49,
    0,   43,   46,    0,    0,    0,    0,   45,    0,  553,
  129,    0,    0,  553,    0,    0,    0,    0,    0,  553,
    0,    0,   34,   35,   36,   37,   38,   39,    0,    0,
   44,   40,   41,   42,   50,    0,   49,    0,   43,    0,
    0,    0,    0,    0,   45,    0,    0,    0,    0,    0,
    0,    0,   47,    0,    0,    0,   46,    0,    0,    0,
    0,    0,    0,    0,  553,    0,    0,    0,  553,    0,
    0,    0,  369,    0,    0,  234,    0,    0,    0,  234,
  369,    0,    0,  369,  494,  369,    0,    0,    0,   47,
    0,    0,    0,   46,    0,    0,  553,    0,    0,    0,
  462,    0,  369,  234,    0,    0,    0,    0,    0,    0,
    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,
    0,  633,    0,    0,  272,    0,    0,    0,    0,    0,
  369,    0,    0,    0,  234,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  272,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  462,    0,    1,    0,    0,    0,    0,    0,
    0,    0,   34,   35,   36,   37,   38,   39,    0,    0,
    0,   40,   41,   42,  253,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  272,    0,    0,    0,    0,
    0,    0,  129,    0,    0,  269,    0,    0,    1,    0,
    0,    0,    0,    0,   34,   35,   36,   37,   38,   39,
  553,    0,    0,   40,   41,   42,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  253,   48,    0,    0,    0,
    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  129,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  269,   48,   34,   35,
   36,   37,   38,   39,    0,    0,    0,   40,   41,   42,
  553,  553,  553,  553,  553,  553,  234,    0,    0,  553,
  553,  553,    0,  129,    0,    0,    0,  527,    0,    0,
    0,   48,    0,    0,    0,   34,   35,   36,   37,   38,
   39,    0,    0,    0,   40,   41,   42,  234,    0,    0,
    0,    0,    0,    0,    0,    0,  369,  369,  536,    0,
    0,    0,    0,    0,  462,    0,    0,  272,    0,    0,
    0,    0,    0,  462,  462,  272,  272,  272,  272,  272,
  272,  272,  272,  272,  272,    0,  272,  272,  272,  272,
  272,  272,  568,    0,    0,    0,  272,    0,    0,    0,
  272,  272,  272,  272,  272,  272,    0,  253,    0,    0,
    0,    0,    0,    0,    0,  253,  253,  253,  253,  253,
  253,  253,  253,  253,  253,    0,  253,  253,  253,  253,
  253,  253,    0,    0,    0,    0,  253,    0,  269,    0,
  253,  253,  253,  253,  253,  253,  269,  269,  269,  269,
  269,  269,  269,  269,  269,  269,    0,  269,  269,  269,
  269,  269,  269,    0,    0,    0,    0,  269,    0,    0,
    0,  269,  269,  269,  269,  269,  269,   11,   12,   13,
   14,   15,   16,   17,   18,   19,   20,    0,   21,   22,
   23,   24,   25,   26,    0,    0,    0,    0,   27,    0,
    0,    0,   28,   29,   30,   31,   32,  526,   11,   12,
   13,   14,   15,   16,   17,   18,   19,   20,    0,   21,
   22,   23,   24,   25,   26,    0,    0,    0,    0,   27,
    0,    0,    0,   28,   29,   30,   31,   32,  526,    0,
    0,    0,   11,   12,   13,   14,   15,   16,   17,   18,
   19,   20,    0,   21,   22,   23,   24,   25,   26,    0,
    0,    0,    0,   27,    0,    0,    0,   28,   29,   30,
   31,   32,  526,
  };
  protected static readonly short [] yyCheck = {           445,
    0,   32,    2,  133,    4,    5,    6,    7,    8,    2,
   10,   11,    2,   44,    0,  277,  141,    2,  351,  352,
   20,   21,   22,   23,  447,   36,   26,   27,   36,   41,
  103,    0,   44,  146,   40,  148,   26,   41,  357,  358,
   64,   31,  648,   43,   44,   45,  716,   47,   48,   49,
   64,  364,   52,  123,  169,   59,  222,   91,   44,   36,
   58,   40,    4,    5,   95,   59,   52,   40,  183,   41,
   40,   41,  187,  356,  183,   46,   41,   41,    3,    0,
  189,    0,    2,   36,  301,   91,   64,  370,   62,   41,
    0,   91,  201,   93,   40,   41,   40,  363,  431,   44,
  269,   91,  102,   88,   89,   30,   40,    0,    0,    0,
   64,  258,   91,   64,   93,  434,  261,  123,   91,  125,
   91,   91,   62,   60,  437,   58,   60,  127,  128,   64,
   33,  131,  132,  133,  127,  128,   64,  127,  128,  132,
   59,   93,  132,   46,  123,   91,  315,  132,   93,   59,
  123,   36,   41,  123,  154,   44,  125,  363,  271,  144,
   63,  276,   41,   64,  834,   44,   59,   59,   59,   41,
  315,  125,   44,  125,  125,   36,   96,  123,  178,   40,
  100,   64,  178,   35,   36,  373,  374,  375,   91,  377,
  190,  191,  223,  193,   36,   36,   20,  190,  191,  532,
  190,  191,  202,   64,  555,   64,  336,  207,  208,  209,
  210,   41,  132,   64,   44,   41,  216,  217,   44,  538,
  254,  221,   61,  223,   64,  145,  146,   36,  148,  263,
   36,   40,  305,  158,   40,  221,  267,  162,   41,  312,
   36,   44,  351,   95,   40,  528,  257,  278,  357,  257,
  258,  417,  418,   95,  254,   64,  256,  257,  258,  259,
  260,  257,   64,  263,  254,   41,  125,  261,   44,   93,
  294,  384,  103,  263,  125,  881,  274,  101,  292,  103,
  257,  281,  202,  449,   36,  125,  298,  733,   40,   41,
  623,  624,  558,  301,  305,  269,  216,  297,  267,  268,
  125,  301,  302,  303,  257,  728,  306,  307,  627,  628,
  316,  315,   64,  321,  292,  323,  431,  630,  318,  434,
  320,  315,  431,   36,  301,  434,  298,   40,  437,  269,
  330,  331,  332,  298,  298,  369,  336,  316,  259,  293,
  259,  266,  293,  316,  334,  345,  316,  223,  301,  259,
   63,  271,  558,  466,  178,  355,   61,  292,   63,  355,
  350,  281,  287,  123,  292,  490,  259,  259,  259,  369,
  316,  361,  257,  373,  374,  375,  727,  377,  363,  369,
  204,  205,  206,  571,  384,  647,  574,  363,  576,  577,
  578,  292,  293,  318,  297,  395,  257,  397,  398,   44,
  846,  363,   44,  345,  363,  257,  406,  349,  408,  298,
  444,  294,  295,   40,  356,  257,  257,   62,  360,  298,
  420,  329,  422,   36,  424,  848,  298,  288,  370,   35,
   36,   59,  432,  257,  293,  768,  432,  289,  299,  291,
  360,   46,  293,  363,  444,  445,  555,  288,  257,  564,
    2,  257,  771,   33,  444,  295,   35,   36,  458,   44,
   40,  257,   59,  494,  384,   93,   46,  457,  298,   58,
   58,   60,  298,  473,  305,  588,  300,   62,  398,  288,
   58,  305,  288,   63,  309,  310,   91,   36,   46,   95,
  410,   40,  288,  299,  494,  298,  123,  497,  498,  125,
  500,   36,  502,  503,  264,  257,  506,  289,  494,  502,
  503,   91,  502,  503,  623,  263,   95,  307,  627,  519,
  445,  511,  298,  448,  524,  525,  519,   62,   58,  519,
   60,  355,  408,  564,  123,  123,  288,  123,  524,  525,
  330,  541,  655,  123,  257,  123,  466,  299,   46,  737,
   44,  739,   58,  473,  554,  261,  556,    0,  261,  544,
  550,   35,   36,   35,   36,   58,   60,   60,  553,   58,
  495,  571,  497,  558,  574,  288,  576,  577,  578,   44,
  132,  506,  558,  508,  584,   58,  528,  587,  305,  261,
   33,  297,  517,  123,  297,   58,  558,   40,   61,  558,
  305,  261,  633,   46,  546,  513,   41,  549,  432,  314,
  315,  911,  725,  728,   46,   58,   59,  123,   61,   41,
   63,   95,   44,   95,  269,  297,  546,   36,   60,  549,
  123,   40,  546,  633,  123,  549,   44,  297,  558,  939,
  125,  267,  268,  261,  257,  565,  842,  633,   91,  845,
  123,  257,  267,  268,  644,   64,   93,   58,  648,   60,
  660,   58,  275,   93,  584,    0,  324,  325,  588,  306,
  307,  308,  285,  286,  287,  288,  289,  290,  257,  297,
  123,  289,  290,  668,  684,  685,   95,  260,   44,  262,
  263,  691,  305,  266,  289,  290,  291,   93,   33,  699,
  731,   44,  289,  290,  291,   40,  699,  837,  257,  699,
   40,   46,  261,  633,  639,  615,  716,  617,  618,  709,
  620,   60,  257,   58,   59,  305,   61,  301,   63,   54,
   55,   56,  556,   58,  123,  655,   91,  737,  123,  739,
  660,  666,  667,  775,  776,  315,  746,  289,  290,  669,
  670,  671,  672,  294,  295,  680,   91,  682,  311,  312,
  313,  326,  327,  328,  689,   59,  691,  289,  290,  291,
  802,  292,  293,   59,    0,   41,    2,  719,    4,    5,
    6,  911,   44,  257,   10,  257,   35,   36,  123,    7,
    8,   40,  777,  301,  302,  303,   40,  289,  798,  719,
   46,  125,  123,  793,  265,  725,  123,  123,  123,  939,
   44,  123,  123,  123,   93,   64,  259,   43,   44,   93,
  261,   47,  125,  261,   44,  825,   52,   62,   44,  829,
  297,   96,   44,   58,  834,   41,   33,  837,  298,   36,
  872,  873,   44,   40,   41,   93,   95,   44,  257,   46,
  775,  776,   93,   58,   93,  840,   59,  889,  778,  779,
  780,   59,  305,   60,   58,  130,   63,   64,  125,  125,
   44,  314,  315,  125,  125,  800,  801,  802,  803,  288,
  123,   41,  807,  125,   93,  125,  261,  125,  125,  261,
  880,  881,  882,   41,   91,  820,  821,   62,  823,  123,
  842,   62,  827,  845,   44,  131,  132,   41,  125,   59,
   33,  911,   58,   36,   44,   40,  123,   40,   41,  123,
  258,   44,  842,   46,  259,  845,  261,  310,  154,  125,
  125,  851,   41,  125,   93,  293,   59,  202,   61,  939,
   63,   64,   44,  125,  869,   33,  871,  872,  873,  125,
  292,  216,   40,   41,  125,  292,   44,  293,   46,  125,
   41,   41,  297,  888,  889,  191,  891,  193,   91,  125,
  305,  125,  295,   61,  899,   63,  901,  902,  125,  314,
  315,  294,  208,   41,  210,  250,   41,   61,   44,  125,
  216,  217,    0,   41,   93,  221,   93,  922,   41,  924,
  123,  123,   93,   91,   93,   62,   41,  272,  257,  123,
  125,  936,  125,  125,  125,   62,  281,   58,  125,  125,
  285,   67,   62,  345,    0,   67,  517,  132,  523,  294,
  295,  699,  882,  647,  257,  123,  554,  635,  622,  288,
  289,  445,  291,  445,  779,  670,  669,  778,  672,  671,
  299,  556,  450,  584,  746,  937,  639,   33,  259,  259,
  257,  715,  558,  256,   40,   33,  565,  258,  333,  371,
   46,  297,   40,   41,  339,  260,   44,  454,   46,  753,
  458,  307,  793,   59,  660,   61,  502,   63,  709,  300,
  102,  288,  318,   61,  320,   63,  422,  424,  397,  312,
  297,  298,   35,   36,  330,  331,  332,   40,   41,   -1,
   -1,   -1,   -1,   -1,   -1,   91,  381,   -1,   -1,  345,
   36,   -1,   38,   91,   40,   41,   -1,   -1,   -1,   -1,
   46,   64,   -1,  398,  257,   -1,   -1,   -1,   -1,   -1,
   -1,    0,   -1,   -1,   -1,  410,   -1,  123,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,   -1,   -1,
   -1,   -1,   95,   -1,   -1,  288,   -1,   -1,   -1,  395,
   -1,  397,  398,   -1,   -1,   91,   -1,   -1,   -1,   95,
  406,   -1,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  314,  315,  458,  420,    0,  422,  462,  424,   -1,
   59,   -1,  467,   -1,   -1,   64,   -1,  123,   -1,  297,
  298,   -1,   -1,   -1,  479,   -1,   -1,  305,   -1,  445,
   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,   33,   -1,
   -1,   36,   -1,   38,   -1,   40,   41,   -1,   -1,   44,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  473,   -1,   -1,
   -1,   -1,   -1,   58,   59,   -1,   61,   62,   63,   64,
   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,  494,    0,
   -1,  497,  498,   -1,  500,   -1,   -1,   -1,   -1,   -1,
  506,   -1,   -1,  259,   -1,  261,   91,   -1,   93,   -1,
   95,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  524,  525,
  565,   -1,   33,   -1,   -1,   36,   -1,   38,   -1,   40,
   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,  123,  584,
  125,  297,   -1,   -1,  257,   -1,   -1,   58,   59,  305,
   61,   62,   63,   64,   -1,   -1,  601,  305,  314,  315,
   -1,  257,   -1,   -1,   -1,   -1,  314,  315,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  288,  289,  622,  291,   -1,
   91,  587,   93,   -1,   95,   -1,  299,   -1,   -1,   -1,
   -1,   -1,   -1,  289,   -1,  291,  275,  276,  277,  278,
  279,  280,  281,  282,  283,   -1,   -1,   -1,   -1,  305,
  289,  656,  123,   -1,  125,  660,   -1,   -1,  314,   -1,
  259,  317,  318,  319,  320,  321,  322,  633,  267,   -1,
  326,  327,  328,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   -1,  286,  287,  288,
  289,  290,  291,   -1,   -1,   -1,   -1,  296,   -1,   -1,
   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,   -1,
   -1,   -1,  257,   -1,  259,   -1,  261,   -1,  684,  685,
   -1,   -1,  267,   -1,  269,  691,   -1,   -1,   -1,  274,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
   -1,  286,  287,  288,  289,  290,  291,   -1,   -1,   -1,
   -1,  296,  297,  298,   -1,  300,  301,  302,  303,  304,
  305,   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,  314,
  315,   -1,  317,  318,  319,  320,  321,  322,   -1,   -1,
  746,  326,  327,  328,   -1,   -1,  257,   -1,  259,   -1,
  261,   -1,   -1,   -1,   -1,   -1,  267,   -1,  269,   -1,
   -1,   -1,   -1,  274,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,  287,  288,  289,  290,
  291,   -1,   -1,   -1,   -1,  296,  297,  298,    0,  300,
  301,  302,  303,  304,  305,   64,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  314,  315,   -1,  317,  318,  319,  320,
  321,  322,   -1,   -1,   -1,  326,  327,  328,   -1,  825,
   -1,   33,   -1,  829,   36,   -1,   38,   -1,   40,   41,
   -1,   -1,   44,   -1,   46,  275,  276,  277,  278,  279,
  280,  281,  282,  283,   -1,   -1,   58,   59,   -1,   61,
   62,   63,   64,   -1,   -1,   -1,  125,   -1,   33,   -1,
    0,   36,   -1,   -1,   -1,   40,   41,   -1,   -1,   44,
   -1,   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   93,   -1,   95,   -1,   60,   -1,   -1,   63,   64,
   -1,   -1,   -1,   33,   -1,   -1,   36,   -1,   38,   -1,
   40,   41,   -1,   -1,   44,   -1,   46,   -1,   -1,   -1,
   -1,  123,   -1,  125,   -1,   -1,   91,   -1,   58,   59,
   95,   61,   -1,   63,   64,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,    0,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,   -1,   -1,   -1,   -1,   -1,  289,
  290,   91,   -1,   93,   -1,   95,  296,   -1,   -1,   -1,
  300,  301,   -1,   -1,  304,   -1,   33,   -1,   -1,   36,
   -1,   38,   -1,   40,   41,   -1,   -1,   44,   -1,   46,
   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,
   -1,   58,   59,   -1,   61,   -1,   63,   64,  267,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   -1,  286,  287,  288,
  289,  290,  291,   -1,   91,   -1,   93,  296,   95,   -1,
   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,   -1,  259,   -1,  261,
   -1,   -1,   -1,   -1,   -1,  267,  123,  269,  125,   -1,
   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,  281,
  282,  283,  284,   -1,  286,  287,  288,  289,  290,  291,
   -1,   -1,  257,   -1,  296,  297,  298,   -1,  300,  301,
  302,  303,  304,  305,   64,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  314,  315,   -1,  317,  318,  319,  320,  321,
  322,   -1,   -1,  288,  326,  327,  328,  257,   -1,  259,
   -1,  261,  297,  298,   -1,   -1,   -1,  267,   -1,  269,
   -1,   -1,   -1,   -1,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,   -1,  123,   -1,  125,  296,   -1,  298,   -1,
  300,  301,  302,  303,  304,  305,   64,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  314,  315,   -1,  317,  318,  319,
  320,  321,  322,   -1,   -1,   -1,  326,  327,  328,   -1,
  257,   -1,  259,   -1,  261,   -1,   -1,   -1,   -1,   -1,
  267,   -1,  269,   -1,   -1,   -1,   -1,   -1,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
  287,  288,  289,  290,  291,   -1,   -1,  125,   -1,  296,
    0,  298,   -1,  300,  301,  302,  303,  304,  305,   61,
   -1,   -1,   64,   -1,   -1,   -1,   -1,  314,  315,   -1,
  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,
  327,  328,   -1,   33,   -1,   -1,   36,   -1,   38,   -1,
   40,   41,   -1,   -1,   44,   -1,   46,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   -1,   61,   -1,   63,   64,   -1,   -1,   -1,   -1,   -1,
   -1,  123,    0,  125,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,   -1,   -1,   -1,   -1,   -1,  289,
  290,   91,   -1,   93,   -1,   95,  296,  297,   -1,   -1,
  300,  301,   -1,   -1,  304,   33,   -1,   -1,   36,   -1,
   38,   -1,   40,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,   -1,
   58,   59,   -1,   61,   -1,   63,   64,   -1,   -1,  267,
   -1,   -1,   -1,   -1,   -1,    0,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
  288,  289,  290,  291,   -1,   93,   -1,   95,  296,   -1,
   -1,   -1,  300,  301,  302,  303,  304,  305,   33,   -1,
   -1,   36,   -1,   38,   -1,   40,   41,   -1,   -1,   44,
   -1,   46,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,
   -1,   -1,   -1,   58,   59,   -1,   61,   -1,   63,   64,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,  281,
  282,  283,   -1,   -1,   -1,   -1,   91,  289,  290,   -1,
   95,   -1,   -1,   -1,  296,   -1,   -1,   -1,  300,  301,
   -1,   -1,  304,   -1,   -1,   -1,   -1,  257,   -1,  259,
   -1,  261,   -1,   -1,   -1,   -1,   -1,  267,  123,  269,
  125,   -1,   -1,   -1,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,   -1,   -1,   -1,   -1,  296,   -1,  298,   -1,
  300,  301,  302,  303,  304,  305,   64,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  314,  315,   -1,  317,  318,  319,
  320,  321,  322,   -1,   -1,   -1,  326,  327,  328,  257,
   -1,  259,   -1,  261,   -1,   -1,   -1,   -1,   -1,  267,
   -1,  269,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
  288,  289,  290,  291,   -1,  123,   -1,  125,  296,   -1,
  298,   -1,  300,  301,  302,  303,  304,  305,   64,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,   -1,  317,
  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,
  328,   -1,  257,   -1,  259,   -1,  261,   -1,   -1,   -1,
   -1,   -1,  267,   -1,  269,   -1,   -1,   -1,   -1,   -1,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
   -1,  286,  287,  288,  289,  290,  291,   -1,   -1,  125,
   -1,  296,    0,   64,   -1,  300,  301,  302,  303,  304,
  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,
  315,   -1,  317,  318,  319,  320,  321,  322,   -1,   -1,
   -1,  326,  327,  328,   -1,   33,   -1,   -1,   36,   -1,
   38,   -1,   40,   41,   -1,   -1,   44,   -1,   46,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   59,  123,   61,  125,   63,   64,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,    0,   -1,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,  283,   -1,   -1,   -1,   -1,
   -1,  289,  290,   91,   -1,   -1,   -1,   95,  296,   -1,
   -1,   -1,  300,  301,   -1,   -1,  304,   33,   -1,   -1,
   36,   -1,   38,   -1,   40,   41,   -1,   -1,   44,   -1,
   46,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,
   -1,   -1,   58,   59,   -1,   61,   -1,   63,   64,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,  283,   -1,   -1,
   -1,   -1,   -1,  289,  290,   91,   -1,   -1,   -1,   95,
  296,   -1,   -1,   -1,  300,  301,   -1,   -1,  304,   -1,
   33,   -1,   -1,   36,   -1,   38,   -1,   40,   41,   -1,
   -1,   44,   -1,   46,   -1,   -1,   -1,  123,   -1,  125,
  261,   -1,   -1,   -1,   -1,   58,   59,   -1,   61,   -1,
   63,   64,   -1,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,   -1,   -1,   -1,   -1,   -1,  289,  290,
   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,   91,  300,
  301,   -1,   95,  304,   -1,   -1,   -1,   -1,   -1,   -1,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  257,
   -1,  259,   -1,  261,  289,  290,  291,   -1,   -1,  267,
  123,  269,  125,   -1,   -1,   -1,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
  288,  289,  290,  291,   -1,   -1,   -1,   -1,  296,   -1,
   -1,   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,   -1,  317,
  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,
  328,  257,   -1,  259,   -1,  261,   -1,   -1,   -1,   -1,
   -1,  267,   -1,  269,   -1,   -1,   -1,   -1,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   -1,
  286,  287,  288,  289,  290,  291,   -1,   -1,   -1,   -1,
  296,   -1,   -1,   -1,  300,  301,  302,  303,  304,  305,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,
   36,  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,
  326,  327,  328,   -1,  257,   -1,  259,   -1,  261,   -1,
   -1,   -1,   -1,   -1,  267,   -1,  269,   -1,   64,    0,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,  287,  288,  289,  290,  291,   -1,
   -1,   -1,   -1,  296,   -1,   -1,   -1,  300,  301,  302,
  303,  304,  305,   -1,   -1,   36,   -1,   38,   -1,   40,
   41,  314,  315,   44,  317,  318,  319,  320,  321,  322,
   -1,   -1,   -1,  326,  327,  328,   -1,   58,   59,   -1,
   61,   62,   -1,   64,  267,   -1,   -1,   -1,   -1,   -1,
   -1,    0,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,  287,  288,  289,  290,  291,   -1,
   -1,   -1,   93,   -1,   95,   -1,   -1,  300,  301,  302,
   -1,  304,   -1,   -1,   -1,   -1,   -1,   36,   -1,   38,
   -1,   40,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,   58,
   59,   -1,   61,   -1,   -1,   64,   -1,  267,   -1,   -1,
   -1,   -1,   -1,   -1,    0,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,   -1,   -1,   93,   -1,   95,   -1,   -1,   -1,
  300,  301,  302,   -1,  304,   -1,   -1,   -1,   -1,   -1,
   36,   -1,   38,   -1,   40,   41,   -1,   -1,   44,   -1,
   -1,  257,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,
   -1,  267,   58,   59,   -1,   61,   -1,   -1,   64,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   -1,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
   -1,   -1,   -1,  299,  300,  301,  302,   93,  304,   95,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,  259,   -1,
  261,   -1,   -1,   -1,   -1,   -1,  267,  123,  269,  125,
   -1,   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,  287,  288,  289,  290,
  291,   -1,   -1,   -1,   -1,  296,   -1,  298,   -1,  300,
  301,  302,  303,  304,  305,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  314,  315,   -1,  317,  318,  319,  320,
  321,  322,   -1,   -1,   -1,  326,  327,  328,  257,   -1,
  259,   -1,  261,   -1,   -1,   -1,   -1,   -1,  267,   -1,
  269,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   -1,  286,  287,  288,
  289,  290,  291,   -1,   -1,   -1,   -1,  296,   -1,  298,
   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,  315,   -1,  317,  318,
  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,  328,
   -1,  257,   -1,  259,   -1,  261,   -1,   -1,   -1,   -1,
   -1,  267,   -1,  269,   -1,   -1,    0,   -1,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   -1,
  286,  287,  288,  289,  290,  291,   -1,   -1,   -1,   -1,
  296,   -1,  298,   -1,  300,  301,  302,  303,  304,  305,
   -1,   -1,   36,   -1,   38,   -1,   40,   41,  314,  315,
   44,  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,
  326,  327,  328,   -1,   58,   59,   -1,   61,   -1,   -1,
   64,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   -1,
  286,  287,  288,  289,  290,  291,  292,  293,   -1,   93,
   -1,   95,   -1,   -1,  300,  301,  302,   -1,  304,   -1,
   -1,   -1,   -1,   -1,   36,   -1,   38,   -1,   40,   41,
   -1,   -1,   44,   -1,   46,   -1,   -1,   -1,   -1,  123,
   -1,  125,   -1,   -1,    0,   -1,   58,   59,   -1,   -1,
   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
   -1,  286,  287,  288,  289,  290,  291,   33,   -1,   91,
   36,   93,   38,   95,   40,  300,  301,  302,   44,  304,
   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   61,   -1,   63,   64,   -1,
   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   36,   -1,   38,   -1,   40,   41,   -1,   -1,   -1,
   -1,   46,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,
   -1,   -1,   -1,   -1,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,   -1,  123,   -1,  125,
  300,  301,  302,  257,  304,  259,   91,  261,   -1,   -1,
   95,   -1,   -1,  267,   -1,  269,   -1,   -1,   -1,   -1,
   -1,  275,  276,  277,  278,  279,  280,  281,  282,  283,
  284,   -1,  286,  287,  288,  289,  290,  291,  123,   -1,
   -1,   -1,  296,   -1,  298,   -1,  300,  301,  302,  303,
  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  314,  315,   -1,  317,  318,  319,  320,  321,  322,   -1,
   -1,   -1,  326,  327,  328,  257,   -1,  259,   -1,  261,
   -1,   -1,   -1,   -1,   -1,  267,   -1,  269,   -1,   -1,
   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,  281,
  282,  283,  284,   -1,  286,  287,  288,  289,  290,  291,
   -1,   -1,   -1,   -1,  296,   -1,  298,   -1,  300,  301,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,   -1,  259,   -1,  317,  318,  319,  320,  321,
  322,  267,   -1,   -1,  326,  327,  328,   -1,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   -1,
  286,  287,  288,  289,  290,  291,   -1,    0,   -1,   -1,
  296,   -1,  257,   -1,  300,  301,  302,  303,  304,  305,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,
   -1,  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,
  326,  327,  328,   36,  289,   38,  291,   40,   41,   -1,
   -1,   44,   -1,   46,   -1,   -1,   -1,   -1,   -1,   -1,
  305,   -1,   -1,   -1,   -1,   58,   59,   -1,   -1,  314,
   -1,   64,  317,  318,  319,  320,  321,  322,   -1,    0,
   -1,  326,  327,  328,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   93,   -1,   95,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   36,   -1,   38,   -1,   40,
   41,   -1,   -1,   44,   -1,   46,   -1,   -1,   -1,   -1,
  123,   -1,  125,   -1,   -1,   -1,   -1,   58,   59,   -1,
   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,    0,  275,  276,  277,  278,  279,  280,  281,
  282,  283,   -1,   -1,   -1,   -1,   -1,  289,  290,   -1,
   91,   -1,   -1,   -1,   95,   -1,   -1,   -1,  300,  301,
   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,   36,   -1,
   38,   -1,   40,   41,   -1,   -1,   44,   -1,   46,   -1,
   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,
   58,   59,   -1,   -1,   -1,   -1,   64,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   91,   36,   -1,   -1,   95,   40,   41,
   -1,   -1,   44,   -1,   46,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,   -1,  259,   -1,  261,   61,
   -1,   63,   64,   -1,  267,  123,  269,  125,   -1,   -1,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,  287,  288,  289,  290,  291,   91,
   -1,   -1,   -1,  296,   -1,  298,   -1,  300,  301,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  317,  318,  319,  320,  321,  322,
   -1,  123,   -1,  326,  327,  328,  257,   -1,  259,   -1,
  261,   -1,   -1,   -1,   -1,   -1,  267,   -1,  269,   -1,
   -1,   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,  287,  288,  289,  290,
  291,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,  300,
  301,  302,  303,  304,  305,   64,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  314,   -1,   -1,  317,  318,  319,  320,
  321,  322,   -1,   -1,   -1,  326,  327,  328,   36,  257,
   38,  259,   40,  261,   -1,   -1,   -1,   -1,   46,  267,
   -1,  269,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
  288,  289,  290,  291,  123,    0,  125,   -1,  296,   -1,
   -1,   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,
   -1,   -1,   -1,   91,   -1,  257,  314,   95,   -1,  317,
  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,
  328,   36,   -1,   38,   -1,   -1,   41,   -1,   -1,   44,
   -1,   46,   -1,   -1,   -1,  123,  288,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   59,  297,  298,   -1,   -1,   64,
   -1,   -1,   -1,  305,   -1,   -1,   -1,    0,   -1,   -1,
   -1,   -1,  314,  315,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,
   95,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   36,   -1,   38,   -1,   40,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,
  125,   -1,   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,
   -1,   64,  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    0,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,   -1,   -1,   -1,   -1,   -1,
  289,  290,   95,   -1,   -1,   -1,   -1,  296,   -1,   -1,
   -1,  300,  301,   -1,   -1,  304,   36,   -1,   38,  257,
   -1,   41,   -1,   -1,   44,   -1,   46,   -1,   -1,   -1,
  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,   58,   59,
   -1,   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,
   -1,  289,   -1,  291,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  305,   -1,   -1,
   -1,   91,   -1,   -1,   -1,   95,  314,   -1,   -1,  317,
  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,
  328,   -1,  257,   -1,  259,   -1,  261,   -1,   -1,   -1,
   -1,   -1,  267,  123,  269,  125,   -1,   -1,   -1,   -1,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
   -1,  286,  287,  288,  289,  290,  291,   -1,   -1,   -1,
   -1,  296,   -1,   -1,   -1,  300,  301,  302,  303,  304,
  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,
  315,   -1,  317,  318,  319,  320,  321,  322,   -1,   -1,
   -1,  326,  327,  328,  257,   -1,  259,   -1,  261,   -1,
   -1,   -1,   -1,   -1,  267,   -1,  269,   -1,   -1,   -1,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,  287,  288,  289,  290,  291,   -1,
   -1,   -1,   -1,  296,   -1,  298,   -1,  300,  301,  302,
  303,  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  314,  315,   -1,  317,  318,  319,  320,  321,  322,
   -1,   -1,   -1,  326,  327,  328,   -1,  257,   -1,  259,
   -1,  261,   -1,   -1,   -1,   -1,   -1,  267,   -1,  269,
   -1,   64,    0,   -1,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,
  300,  301,  302,  303,  304,  305,   -1,   -1,   36,   -1,
   38,   -1,   40,   41,  314,  315,   44,  317,  318,  319,
  320,  321,  322,   -1,   -1,   -1,  326,  327,  328,   -1,
   58,   59,  125,   -1,   -1,   -1,   64,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   36,   -1,   38,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,
   -1,   -1,   58,   59,   -1,   61,   -1,   -1,   64,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,   95,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   36,   -1,   38,   -1,   -1,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  125,
   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   61,   -1,
   -1,   64,  275,  276,  277,  278,  279,  280,  281,  282,
  283,   -1,   -1,   -1,   -1,   -1,  289,  290,   -1,   -1,
   -1,   -1,   -1,  296,   -1,   -1,   -1,  300,  301,   -1,
   93,  304,   95,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
   -1,  259,   -1,  261,   -1,   -1,   -1,   -1,   -1,  267,
   -1,  269,  125,   -1,   -1,   -1,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
  288,  289,  290,  291,   -1,   -1,   -1,   -1,  296,   -1,
  298,   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,   -1,  317,
  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,
  328,  257,   -1,  259,   -1,  261,   -1,   -1,   -1,   -1,
   -1,  267,   -1,  269,   -1,   -1,   -1,   -1,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   64,
  286,  287,  288,  289,  290,  291,   -1,   -1,   -1,   -1,
  296,   -1,  298,   -1,  300,  301,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   36,   -1,  314,  315,
   40,  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,
  326,  327,  328,   -1,  257,   -1,  259,   -1,  261,   -1,
   -1,   -1,   -1,   -1,  267,   -1,  269,   -1,   -1,    0,
  125,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,  287,  288,  289,  290,  291,   -1,
   -1,   -1,   -1,  296,   -1,  298,   -1,  300,  301,  302,
  303,  304,   -1,   -1,   -1,   36,   -1,   38,   -1,   40,
   41,  314,  315,   44,  317,  318,  319,  320,  321,  322,
   -1,   -1,   -1,  326,  327,  328,   -1,   58,   59,   -1,
   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   95,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   36,   -1,   38,
   -1,   40,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,   58,
   59,   -1,   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  275,  276,  277,  278,  279,  280,  281,  282,  283,   -1,
   -1,   -1,   -1,   -1,  289,  290,   95,   -1,   -1,   -1,
   -1,  296,   -1,   -1,   -1,  300,  301,   -1,   -1,  304,
   38,   -1,   -1,   41,   -1,   -1,   44,  257,   46,   -1,
   -1,   -1,   -1,   -1,  123,   -1,  125,  267,   -1,   -1,
   58,   59,   -1,   -1,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,   -1,   -1,   -1,  299,
  300,  301,  302,   91,  304,   -1,   -1,   95,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,  259,   -1,
  261,   -1,   -1,   -1,   -1,  123,  267,  125,  269,   -1,
   -1,   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,  287,  288,  289,  290,
  291,   -1,   -1,   -1,   64,  296,   -1,   -1,   -1,  300,
  301,  302,  303,  304,  305,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  314,  315,   -1,  317,  318,  319,  320,
  321,  322,   -1,   -1,   -1,  326,  327,  328,  257,   -1,
  259,   -1,  261,   -1,   -1,   -1,   -1,   -1,  267,   -1,
  269,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   -1,  286,  287,  288,
  289,  290,  291,   -1,   -1,   -1,   -1,  296,   -1,   -1,
   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,  315,   -1,  317,  318,
  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,  328,
   -1,  259,   -1,  261,   -1,   -1,   -1,   -1,   -1,  267,
   -1,  269,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
   -1,  289,  290,  291,    0,   -1,   -1,   -1,  296,   -1,
   -1,   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,   -1,  317,
  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,
  328,   -1,   38,   -1,   -1,   41,   -1,   -1,   44,   -1,
   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   59,   -1,   -1,   -1,  267,   -1,   -1,
   -1,   -1,   -1,   -1,    0,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,   -1,   -1,   -1,   91,  296,   -1,   -1,   95,
  300,  301,  302,  303,  304,  305,   -1,   -1,   -1,   -1,
   -1,   -1,   38,   -1,   -1,   41,   -1,   -1,   44,   -1,
   46,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,
   -1,    0,   58,   59,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   33,   91,   -1,   -1,   -1,   95,
   -1,   40,   -1,   -1,   -1,   -1,   -1,   46,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,
   59,   -1,   61,   -1,   63,   64,   -1,  123,   -1,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,
   -1,   -1,   64,   -1,  123,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,  259,   -1,  261,   -1,   -1,   -1,   -1,
   -1,  267,   -1,  269,   -1,   -1,   -1,   -1,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   -1,
  286,  287,   -1,  289,  290,  291,   -1,   -1,   -1,   -1,
  296,   -1,   -1,    0,  300,  301,  302,  303,  304,  305,
   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,  314,  315,
   -1,  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,
  326,  327,  328,  259,   -1,  261,   -1,   -1,   -1,   -1,
   -1,  267,   -1,  269,   -1,   -1,   -1,   -1,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   -1,
  286,  287,   59,  289,  290,  291,   -1,   64,   -1,   -1,
  296,   -1,   -1,   -1,  300,  301,  302,  303,  304,  305,
    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,
  259,  317,  318,  319,  320,  321,  322,   -1,  267,   -1,
  326,  327,  328,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   -1,  286,  287,  288,
  289,  290,  291,   -1,   44,   -1,  123,  296,  125,   -1,
   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,   59,
   -1,   -1,   -1,   -1,   64,  314,  315,  259,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  267,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,  281,
  282,  283,  284,   -1,  286,  287,  288,  289,  290,  291,
   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,  300,  301,
  302,  303,  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  125,   33,   -1,   -1,   36,
   -1,   38,   -1,   40,   41,   -1,   -1,   44,   -1,   46,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   -1,   -1,   63,   64,   -1,   -1,
   -1,   -1,   -1,   36,   -1,   38,   -1,   40,   -1,   -1,
   -1,   -1,   -1,   46,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  259,   -1,   91,   58,   35,   36,   95,   38,
  267,   40,   41,   -1,   -1,   -1,   -1,   46,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
  287,  288,  289,  290,  291,   64,  123,   -1,   91,  296,
   -1,   -1,   95,  300,  301,  302,  303,  304,  305,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   -1,   95,   -1,   -1,   -1,
  123,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  259,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,   -1,   -1,
   -1,   64,   -1,   -1,  123,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,
  300,  301,  302,  303,  304,   36,   -1,   38,   -1,   40,
   -1,   -1,   -1,   -1,   -1,   46,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  125,   64,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   -1,   95,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   36,   -1,
   38,  288,   40,   -1,  257,   -1,   -1,   -1,   46,   -1,
  297,  298,  123,   -1,  125,   -1,   -1,   -1,  305,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   64,   -1,  257,   -1,
  317,  318,  319,  320,  321,  322,  289,   -1,  291,  326,
  327,  328,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  305,   91,   -1,   -1,   -1,   95,   -1,  288,
  289,  314,  291,   -1,  317,  318,  319,  320,  321,  322,
  299,   -1,   -1,  326,  327,  328,  305,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,  317,  318,
  319,  320,  321,  322,  267,   -1,   -1,  326,  327,  328,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,  287,  288,  289,  290,  291,   -1,
   -1,   -1,   -1,  296,   -1,   -1,   -1,  300,  301,  302,
  303,  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  260,
   -1,  262,  263,  264,   -1,  266,   -1,   -1,   -1,  270,
  271,  272,  273,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,   -1,   -1,   -1,  300,
  301,  302,  303,  304,  305,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  317,  318,  319,  320,
  321,  322,   -1,   -1,   -1,  326,  327,  328,   -1,  257,
   -1,   -1,  260,   -1,  262,  263,  264,   -1,  266,   -1,
   -1,   -1,  270,  271,  272,  273,   64,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
  288,  289,  290,  291,  292,  293,   -1,   -1,  296,   -1,
   -1,   -1,  300,  301,  302,  303,  304,  305,   36,   -1,
   38,   -1,   40,   -1,   -1,   -1,   -1,   -1,   46,  317,
  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,
  328,   -1,   -1,   -1,   -1,   -1,   64,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,
   36,   -1,   -1,   91,   40,   41,   -1,   95,   44,   -1,
   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   36,   -1,   38,   -1,   40,   61,   -1,   63,   64,   -1,
   46,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   64,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,
   -1,   -1,   36,   -1,   38,   -1,   40,   -1,   -1,   -1,
   -1,   -1,   46,   -1,   -1,   -1,   -1,  123,   -1,  125,
   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,  267,
   64,   -1,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
  288,  289,  290,  291,   -1,   -1,   -1,   91,  296,   -1,
   -1,   95,  300,  301,  302,  303,  304,  305,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
   -1,   -1,  260,   -1,  262,  263,  264,   -1,  266,  123,
   -1,   -1,  270,  271,  272,  273,   64,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
  288,  289,  290,  291,   -1,   -1,   -1,   -1,  296,   -1,
   -1,   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  317,
  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,
  328,  257,   -1,   -1,  260,   -1,  262,  263,  264,   -1,
  266,   -1,  288,   -1,  270,  271,  272,  273,   64,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,  305,
  286,  287,  288,  289,  290,  291,   -1,   -1,  314,  315,
  296,   -1,   -1,   -1,  300,  301,  302,  303,  304,  305,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,
  326,  327,  328,  257,   -1,   -1,  260,   -1,  262,  263,
  264,   -1,  266,   -1,   -1,   -1,  270,  271,  272,  273,
   64,  275,  276,  277,  278,  279,  280,  281,  282,  283,
  284,   -1,  286,  287,  288,  289,  290,  291,   -1,   -1,
   -1,   -1,  296,   -1,   -1,   -1,  300,  301,  302,  303,
  304,  305,   36,   -1,   38,   -1,   40,   -1,   -1,   -1,
   -1,   -1,   46,  317,  318,  319,  320,  321,  322,   -1,
   -1,   -1,  326,  327,  328,   59,   -1,   -1,   -1,  267,
   64,  125,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
  288,  289,  290,  291,   -1,   -1,   -1,   91,  296,   -1,
   -1,   95,  300,  301,  302,  303,  304,  305,   -1,   -1,
   -1,   -1,   -1,   -1,   36,   -1,   38,   -1,   40,   -1,
   -1,   -1,   -1,   -1,   46,   -1,   -1,   -1,   -1,  123,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   -1,
  286,  287,  288,  289,  290,  291,   -1,   -1,   -1,   91,
  296,   -1,   -1,   95,  300,  301,  302,  303,  304,  305,
   -1,   -1,   -1,   -1,   -1,   -1,   36,   -1,   38,   -1,
   40,   -1,   -1,   -1,   -1,   -1,   46,   -1,   -1,   -1,
   -1,  123,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  267,   64,   -1,   -1,   -1,   -1,   -1,
   -1,  275,  276,  277,  278,  279,  280,  281,  282,  283,
  284,   -1,  286,  287,  288,  289,  290,  291,   -1,   -1,
   -1,   91,  296,   -1,   -1,   95,  300,  301,  302,  303,
  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,   -1,   -1,  260,   -1,  262,  263,
  264,   -1,  266,  123,   -1,   -1,  270,  271,  272,  273,
   -1,  275,  276,  277,  278,  279,  280,  281,  282,  283,
  284,   -1,  286,  287,  288,  289,  290,  291,   -1,   -1,
   -1,   -1,  296,   -1,   -1,   -1,  300,  301,  302,  303,
  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  317,  318,  319,  320,  321,  322,   -1,
   -1,   -1,  326,  327,  328,  257,   -1,   -1,  260,   -1,
  262,  263,  264,   -1,  266,   -1,   -1,   -1,  270,  271,
  272,  273,   -1,  275,  276,  277,  278,  279,  280,  281,
  282,  283,  284,   -1,  286,  287,  288,  289,  290,  291,
   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,  300,  301,
  302,  303,  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  317,  318,  319,  320,  321,
  322,   -1,   -1,   -1,  326,  327,  328,  257,   -1,   -1,
  260,   -1,  262,  263,  264,   -1,  266,   -1,   -1,   -1,
  270,  271,  272,  273,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,
  300,  301,  302,  303,  304,  305,   36,   -1,   38,   -1,
   40,   -1,   -1,   -1,   -1,   -1,   46,  317,  318,  319,
  320,  321,  322,   -1,   -1,   -1,  326,  327,  328,   -1,
   -1,   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   36,   -1,   38,   95,   40,   41,   -1,   -1,
   -1,   -1,   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,
   64,   -1,   -1,  123,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   36,   91,   38,   -1,
   40,   95,   -1,   -1,   -1,   -1,   46,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   -1,   -1,   -1,   36,   64,   38,   -1,   40,   -1,  123,
   -1,   -1,   -1,   46,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   -1,   95,   -1,   -1,   -1,   -1,
   -1,   -1,   36,   -1,   38,   -1,   40,   -1,   -1,   -1,
   -1,   -1,   46,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   93,   -1,   95,  123,   58,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,
  123,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,
   -1,   95,   -1,   -1,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,   -1,   -1,   -1,   -1,  296,   -1,   -1,  123,
  300,  301,  302,  303,  304,  305,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,   -1,   -1,   -1,  317,  318,  319,
  320,  321,  322,   -1,   -1,   -1,  326,  327,  328,   -1,
   -1,  275,  276,  277,  278,  279,  280,  281,  282,  283,
   -1,   -1,   -1,   -1,   -1,  289,   -1,  291,   -1,   -1,
   -1,   -1,   36,   -1,   38,   -1,   40,   41,   -1,   -1,
   -1,  305,   46,   -1,   -1,   -1,   -1,  257,   -1,   -1,
  314,   -1,   -1,  317,  318,  319,  320,  321,  322,   -1,
   64,   -1,  326,  327,  328,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  257,   -1,   -1,   -1,   -1,  289,
   -1,  291,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   -1,   95,   -1,   -1,   -1,  305,   -1,  280,  281,  282,
  283,   -1,   -1,   -1,  314,   -1,   -1,  317,  318,  319,
  320,  321,  322,  257,   -1,   -1,  326,  327,  328,  123,
   -1,   -1,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  317,  318,  319,  320,  321,  322,
   -1,   -1,   -1,  326,  327,  328,   36,   -1,   38,   -1,
   40,   41,   -1,   -1,   -1,   -1,   46,   -1,   -1,   -1,
   -1,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  317,  318,  319,  320,  321,  322,   -1,
   -1,   -1,  326,  327,  328,   36,   -1,   38,   -1,   40,
   -1,   -1,   -1,   -1,   -1,   46,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   -1,   95,   -1,   -1,   59,   -1,
   -1,   -1,   36,   -1,   38,   -1,   40,   -1,   -1,   -1,
   -1,   -1,   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   36,  123,   38,   -1,   40,   -1,   -1,   -1,
   91,   -1,   46,   -1,   95,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   36,  257,   38,   59,   40,   -1,   -1,   -1,
   -1,   -1,   46,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   -1,   95,  123,   -1,   -1,   59,   -1,   -1,   36,   -1,
   38,   -1,   40,   41,  288,   -1,   -1,   91,   46,   -1,
   -1,   95,   -1,   -1,   -1,  299,   -1,   -1,   36,  123,
   38,  305,   40,   -1,   -1,   -1,   -1,   91,   46,   -1,
   -1,   95,   -1,  317,  318,  319,  320,  321,  322,  123,
   -1,   59,  326,  327,  328,   36,   -1,   38,   -1,   40,
   41,   -1,   -1,   91,   -1,   46,   -1,   95,   -1,  123,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   36,   -1,   38,   95,   40,   41,
   -1,   -1,   -1,   -1,   46,  123,   -1,  257,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   -1,   95,  123,   -1,   -1,   -1,   -1,
   -1,   36,   -1,   38,   -1,   40,   41,   -1,   -1,   -1,
   -1,   46,   -1,   -1,   -1,   -1,  257,   -1,   -1,   91,
   -1,   -1,  123,   95,   -1,  305,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  317,  318,  319,
  320,  321,  322,  257,   -1,   -1,  326,  327,  328,   -1,
   -1,  123,   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,
   95,   -1,   -1,  257,  305,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  317,  318,  319,  320,
  321,  322,   -1,  257,   -1,  326,  327,  328,  123,   -1,
   -1,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  315,   -1,  317,  318,  319,  320,  321,  322,  257,
   -1,  305,  326,  327,  328,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  317,  318,  319,  320,  321,  322,  257,
   -1,  305,  326,  327,  328,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  317,  318,  319,  320,  321,  322,   -1,
   -1,   36,  326,  327,  328,   40,  257,  305,   -1,   -1,
   -1,   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  317,
  318,  319,  320,  321,  322,   -1,   -1,  305,  326,  327,
  328,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,  317,
  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,
  328,   -1,   -1,   36,  305,   38,   91,   40,   -1,   -1,
   95,   -1,   -1,   46,   -1,   -1,  317,  318,  319,  320,
  321,  322,  257,   -1,   -1,  326,  327,  328,   -1,   -1,
   -1,   -1,   -1,  305,   -1,   -1,   -1,   -1,  123,   -1,
   -1,   -1,   -1,   -1,   -1,  317,  318,  319,  320,  321,
  322,   -1,   -1,   -1,  326,  327,  328,   36,   91,   38,
   -1,   40,   95,   -1,   -1,   -1,   -1,   46,   -1,   36,
  305,   -1,   -1,   40,   -1,   -1,   -1,   -1,   -1,   46,
   -1,   -1,  317,  318,  319,  320,  321,  322,   -1,   -1,
  123,  326,  327,  328,   36,   -1,   38,   -1,   40,   -1,
   -1,   -1,   -1,   -1,   46,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   -1,   95,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,   -1,
   -1,   -1,   33,   -1,   -1,   36,   -1,   -1,   -1,   40,
   41,   -1,   -1,   44,  123,   46,   -1,   -1,   -1,   91,
   -1,   -1,   -1,   95,   -1,   -1,  123,   -1,   -1,   -1,
   61,   -1,   63,   64,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  123,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   -1,   95,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  123,   -1,  257,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  317,  318,  319,  320,  321,  322,   -1,   -1,
   -1,  326,  327,  328,   64,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,   -1,
   -1,   -1,  305,   -1,   -1,   64,   -1,   -1,  257,   -1,
   -1,   -1,   -1,   -1,  317,  318,  319,  320,  321,  322,
  257,   -1,   -1,  326,  327,  328,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  125,   64,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  305,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  125,   64,  317,  318,
  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,  328,
  317,  318,  319,  320,  321,  322,  257,   -1,   -1,  326,
  327,  328,   -1,  305,   -1,   -1,   -1,  125,   -1,   -1,
   -1,   64,   -1,   -1,   -1,  317,  318,  319,  320,  321,
  322,   -1,   -1,   -1,  326,  327,  328,  288,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  297,  298,  125,   -1,
   -1,   -1,   -1,   -1,  305,   -1,   -1,  267,   -1,   -1,
   -1,   -1,   -1,  314,  315,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,  125,   -1,   -1,   -1,  296,   -1,   -1,   -1,
  300,  301,  302,  303,  304,  305,   -1,  267,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,   -1,   -1,   -1,   -1,  296,   -1,  267,   -1,
  300,  301,  302,  303,  304,  305,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   -1,  286,  287,  288,
  289,  290,  291,   -1,   -1,   -1,   -1,  296,   -1,   -1,
   -1,  300,  301,  302,  303,  304,  305,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
  288,  289,  290,  291,   -1,   -1,   -1,   -1,  296,   -1,
   -1,   -1,  300,  301,  302,  303,  304,  305,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
  287,  288,  289,  290,  291,   -1,   -1,   -1,   -1,  296,
   -1,   -1,   -1,  300,  301,  302,  303,  304,  305,   -1,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,  287,  288,  289,  290,  291,   -1,
   -1,   -1,   -1,  296,   -1,   -1,   -1,  300,  301,  302,
  303,  304,  305,
  };

#line 1354 "Swiften/SwiftParser.jay"

}



















#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 System.Diagnostics.Debug.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int IDENTIFIER = 257;
  public const int NUMBER = 258;
  public const int NEWLINE = 259;
  public const int FOR = 260;
  public const int IN = 261;
  public const int DO = 262;
  public const int WHILE = 263;
  public const int IF = 264;
  public const int ELSE = 265;
  public const int SWITCH = 266;
  public const int CASE = 267;
  public const int DEFAULT = 268;
  public const int WHERE = 269;
  public const int BREAK = 270;
  public const int CONTINUE = 271;
  public const int FALLTHROUGH = 272;
  public const int RETURN = 273;
  public const int EQEQ_OP = 274;
  public const int CLASS = 275;
  public const int MUTATING = 276;
  public const int NONMUTATING = 277;
  public const int OVERRIDE = 278;
  public const int STATIC = 279;
  public const int UNOWNED = 280;
  public const int UNOWNED_SAFE = 281;
  public const int UNOWNED_UNSAFE = 282;
  public const int WEAK = 283;
  public const int IMPORT = 284;
  public const int TYEPALIAS = 285;
  public const int STRUCT = 286;
  public const int ENUM = 287;
  public const int PROTOCOL = 288;
  public const int VAR = 289;
  public const int FUNC = 290;
  public const int LET = 291;
  public const int GET = 292;
  public const int SET = 293;
  public const int WILLSET = 294;
  public const int DIDSET = 295;
  public const int TYPEALIAS = 296;
  public const int ARROW_OP = 297;
  public const int DOTDOTDOT_OP = 298;
  public const int INOUT = 299;
  public const int CONVENIENCE = 300;
  public const int INIT = 301;
  public const int DEINIT = 302;
  public const int EXTENSION = 303;
  public const int SUBSCRIPT = 304;
  public const int OPERATOR = 305;
  public const int PREFIX = 306;
  public const int POSTFIX = 307;
  public const int INFIX = 308;
  public const int PRECEDENCE = 309;
  public const int ASSOCIATIVITY = 310;
  public const int LEFT = 311;
  public const int RIGHT = 312;
  public const int NONE = 313;
  public const int IS = 314;
  public const int AS = 315;
  public const int BALANCED_TEXT = 316;
  public const int FILE_DEFINE = 317;
  public const int LINE_DEFINE = 318;
  public const int COLUMN_DEFINE = 319;
  public const int FUNCTION_DEFINE = 320;
  public const int SELF = 321;
  public const int SUPER = 322;
  public const int DYNAMICTYPE = 323;
  public const int UTYPE = 324;
  public const int UPROTOCOL = 325;
  public const int INTEGER_LITERAL = 326;
  public const int FLOATING_POINT_LITERAL = 327;
  public const int STRING_LITERAL = 328;
  public const int END = 0;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
