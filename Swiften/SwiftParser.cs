// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "Swiften/SwiftParser.jay"
using System.Text;
using System.IO;
using System;
using System.Collections.Generic;

#pragma warning disable 219,414

namespace Swiften
{
	public partial class SwiftParser
	{
		const int yacc_verbose_flag = 1;
		public static string GetTokenName (int token) { return yyNames[token]; }
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = new StringWriter ();

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }

  /* An EOF token */
  public int eof_token;

  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
//t  internal yydebug.yyDebug debug;

  protected const int yyFinal = 51;
//t // Put this array into a separate class so it is only initialized if debugging is actually used
//t // Use MarshalByRefObject to disable inlining
//t class YYRules : MarshalByRefObject {
//t  public static readonly string [] yyRule = {
//t    "$accept : top_level_declaration",
//t    "statement : expression NEWLINE",
//t    "statement : expression ';'",
//t    "statement : expression END",
//t    "statement : declaration NEWLINE",
//t    "statement : declaration ';'",
//t    "statement : declaration END",
//t    "statement : loop_statement NEWLINE",
//t    "statement : loop_statement ';'",
//t    "statement : loop_statement END",
//t    "statement : branch_statement NEWLINE",
//t    "statement : branch_statement ';'",
//t    "statement : branch_statement END",
//t    "statement : labeled_statement NEWLINE",
//t    "statement : labeled_statement END",
//t    "statement : control_transfer_statement NEWLINE",
//t    "statement : control_transfer_statement ';'",
//t    "statement : control_transfer_statement END",
//t    "statements : statement",
//t    "statements : statement statements",
//t    "loop_statement : for_statement",
//t    "loop_statement : for_in_statement",
//t    "loop_statement : while_statement",
//t    "loop_statement : do_while_statement",
//t    "for_statement : FOR for_init ';' expression ';' expression code_block",
//t    "for_statement : FOR for_init ';' expression ';' code_block",
//t    "for_statement : FOR for_init ';' ';' expression code_block",
//t    "for_statement : FOR for_init ';' ';' code_block",
//t    "for_statement : FOR ';' expression ';' expression code_block",
//t    "for_statement : FOR ';' expression ';' code_block",
//t    "for_statement : FOR ';' ';' expression code_block",
//t    "for_statement : FOR ';' ';' code_block",
//t    "for_statement : FOR '(' for_init ';' expression ';' expression ')' code_block",
//t    "for_statement : FOR '(' for_init ';' expression ';' ')' code_block",
//t    "for_statement : FOR '(' for_init ';' ';' expression ')' code_block",
//t    "for_statement : FOR '(' for_init ';' ';' ')' code_block",
//t    "for_statement : FOR '(' ';' expression ';' expression ')' code_block",
//t    "for_statement : FOR '(' ';' expression ';' ')' code_block",
//t    "for_statement : FOR '(' ';' ';' expression ')' code_block",
//t    "for_statement : FOR '(' ';' ';' ')' code_block",
//t    "for_init : variable_declaration",
//t    "for_init : expression_list",
//t    "for_in_statement : FOR pattern IN expression code_block",
//t    "while_statement : WHILE while_condition code_block",
//t    "while_condition : expression",
//t    "while_condition : declaration",
//t    "do_while_statement : DO code_block WHILE while_condition",
//t    "branch_statement : if_statement",
//t    "branch_statement : switch_statement",
//t    "if_statement : IF if_condition code_block else_clause",
//t    "if_statement : IF if_condition code_block",
//t    "if_condition : expression",
//t    "if_condition : declaration",
//t    "else_clause : ELSE code_block",
//t    "else_clause : ELSE if_statement",
//t    "switch_statement : SWITCH expression '{' switch_cases '}'",
//t    "switch_statement : SWITCH expression '{' '}'",
//t    "switch_cases : switch_case",
//t    "switch_cases : switch_case switch_cases",
//t    "switch_case : case_label statements",
//t    "switch_case : default_label statements",
//t    "switch_case : case_label ';'",
//t    "switch_case : default_label ';'",
//t    "case_label : CASE case_item_list ':'",
//t    "case_item : pattern guard_clause",
//t    "case_item : pattern",
//t    "case_item_list : case_item",
//t    "case_item_list : case_item case_item_list",
//t    "default_label : DEFAULT ':'",
//t    "guard_clause : WHERE guard_expression",
//t    "guard_expression : expression",
//t    "labeled_statement : statement_label loop_statement",
//t    "labeled_statement : statement_label switch_statement",
//t    "statement_label : label_name ':'",
//t    "label_name : identifier",
//t    "control_transfer_statement : break_statement",
//t    "control_transfer_statement : continue_statement",
//t    "control_transfer_statement : fallthrough_statement",
//t    "control_transfer_statement : return_statement",
//t    "break_statement : BREAK label_name",
//t    "break_statement : BREAK",
//t    "continue_statement : CONTINUE label_name",
//t    "continue_statement : CONTINUE",
//t    "fallthrough_statement : FALLTHROUGH",
//t    "return_statement : RETURN expression",
//t    "return_statement : RETURN",
//t    "generic_parameter_clause : '<' generic_parameter_list requirement_clause '>'",
//t    "generic_parameter_clause : '<' generic_parameter_list '>'",
//t    "generic_parameter_list : generic_parameter",
//t    "generic_parameter_list : generic_parameter ',' generic_parameter_list",
//t    "generic_parameter : type_name",
//t    "generic_parameter : type_name ':' type_identifier",
//t    "generic_parameter : type_name ':' protocol_composition_type",
//t    "requirement_clause : WHERE requirement_list",
//t    "requirement_list : requirement",
//t    "requirement_list : requirement ',' requirement_list",
//t    "requirement : conformance_requirement",
//t    "requirement : same_type_requirement",
//t    "conformance_requirement : type_identifier ':' type_identifier",
//t    "conformance_requirement : type_identifier ':' protocol_composition_type",
//t    "same_type_requirement : type_identifier EQEQ_OP type_identifier",
//t    "generic_argument_clause : '<' generic_argument_list '>'",
//t    "generic_argument_list : generic_argument",
//t    "generic_argument_list : generic_argument ',' generic_argument_list",
//t    "generic_argument : type",
//t    "declaration : import_declaration",
//t    "declaration : constant_declaration",
//t    "declaration : variable_declaration",
//t    "declaration : typealias_declaration",
//t    "declaration : function_declaration",
//t    "declaration : enum_declaration",
//t    "declaration : struct_declaration",
//t    "declaration : class_declaration",
//t    "declaration : protocol_declaration",
//t    "declaration : initializer_declaration",
//t    "declaration : deinitializer_declaration",
//t    "declaration : extension_declaration",
//t    "declaration : subscript_declaration",
//t    "declaration : operator_declaration",
//t    "declarations : declaration",
//t    "declarations : declaration declarations",
//t    "declaration_specifiers : declaration_specifier",
//t    "declaration_specifiers : declaration_specifier declaration_specifiers",
//t    "declaration_specifier : CLASS",
//t    "declaration_specifier : MUTATING",
//t    "declaration_specifier : NONMUTATING",
//t    "declaration_specifier : OVERRIDE",
//t    "declaration_specifier : STATIC",
//t    "declaration_specifier : UNOWNED",
//t    "declaration_specifier : UNOWNED_SAFE",
//t    "declaration_specifier : UNOWNED_UNSAFE",
//t    "declaration_specifier : WEAK",
//t    "top_level_declaration : statements",
//t    "top_level_declaration :",
//t    "code_block : '{' statements '}'",
//t    "code_block : '{' '}'",
//t    "import_declaration : attributes IMPORT import_kind import_path",
//t    "import_declaration : attributes IMPORT import_path",
//t    "import_declaration : IMPORT import_kind import_path",
//t    "import_declaration : IMPORT import_path",
//t    "import_kind : TYEPALIAS",
//t    "import_kind : STRUCT",
//t    "import_kind : CLASS",
//t    "import_kind : ENUM",
//t    "import_kind : PROTOCOL",
//t    "import_kind : VAR",
//t    "import_kind : FUNC",
//t    "import_path : import_path_identifier",
//t    "import_path : import_path_identifier '.' import_path",
//t    "import_path_identifier : identifier",
//t    "import_path_identifier : operator_",
//t    "constant_declaration : attributes declaration_specifiers LET pattern_initializer_list",
//t    "constant_declaration : attributes LET pattern_initializer_list",
//t    "constant_declaration : declaration_specifiers LET pattern_initializer_list",
//t    "constant_declaration : LET pattern_initializer_list",
//t    "pattern_initializer_list : pattern_initializer",
//t    "pattern_initializer_list : pattern_initializer ',' pattern_initializer_list",
//t    "pattern_initializer : pattern initializer",
//t    "pattern_initializer : pattern",
//t    "initializer : expression",
//t    "variable_declaration : variable_declaration_head pattern_initializer_list",
//t    "variable_declaration : variable_declaration_head variable_name type_annotation code_block",
//t    "variable_declaration : variable_declaration_head variable_name type_annotation getter_setter_block",
//t    "variable_declaration : variable_declaration_head variable_name type_annotation getter_setter_keyword_block",
//t    "variable_declaration : variable_declaration_head variable_name type_annotation initializer willSet_didSet_block",
//t    "variable_declaration : variable_declaration_head variable_name type_annotation willSet_didSet_block",
//t    "variable_declaration_head : attributes declaration_specifiers VAR",
//t    "variable_declaration_head : attributes VAR",
//t    "variable_declaration_head : declaration_specifiers VAR",
//t    "variable_declaration_head : VAR",
//t    "variable_name : identifier",
//t    "getter_setter_block : '{' getter_clause setter_clause '}'",
//t    "getter_setter_block : '{' getter_clause '}'",
//t    "getter_setter_block : '{' setter_clause getter_clause '}'",
//t    "getter_clause : attributes GET code_block",
//t    "getter_clause : GET code_block",
//t    "setter_clause : attributes SET setter_name code_block",
//t    "setter_clause : attributes SET code_block",
//t    "setter_clause : SET setter_name code_block",
//t    "setter_clause : SET code_block",
//t    "setter_name : '(' identifier ')'",
//t    "getter_setter_keyword_block : '{' getter_keyword_clause setter_keyword_clause '}'",
//t    "getter_setter_keyword_block : '{' getter_keyword_clause '}'",
//t    "getter_setter_keyword_block : '{' setter_keyword_clause getter_keyword_clause '}'",
//t    "getter_keyword_clause : attributes GET",
//t    "getter_keyword_clause : GET",
//t    "setter_keyword_clause : attributes SET",
//t    "setter_keyword_clause : SET",
//t    "willSet_didSet_block : '{' willSet_clause didSet_clause '}'",
//t    "willSet_didSet_block : '{' willSet_clause '}'",
//t    "willSet_didSet_block : '{' didSet_clause willSet_clause '}'",
//t    "willSet_clause : attributes WILLSET setter_name code_block",
//t    "willSet_clause : attributes WILLSET code_block",
//t    "willSet_clause : WILLSET setter_name code_block",
//t    "willSet_clause : WILLSET code_block",
//t    "didSet_clause : attributes DIDSET setter_name code_block",
//t    "didSet_clause : attributes DIDSET code_block",
//t    "didSet_clause : DIDSET setter_name code_block",
//t    "didSet_clause : DIDSET code_block",
//t    "typealias_declaration : typealias_head typealias_assignment",
//t    "typealias_head : TYPEALIAS typealias_name",
//t    "typealias_name : identifier",
//t    "typealias_assignment : '=' type",
//t    "function_declaration : function_head function_name generic_parameter_clause function_signature function_body",
//t    "function_declaration : function_head function_name function_signature function_body",
//t    "function_head : attributes declaration_specifiers FUNC",
//t    "function_head : attributes FUNC",
//t    "function_head : declaration_specifiers FUNC",
//t    "function_head : FUNC",
//t    "function_name : identifier",
//t    "function_name : operator_",
//t    "function_signature : parameter_clauses function_result",
//t    "function_signature : parameter_clauses",
//t    "function_result : ARROW_OP attributes type",
//t    "function_result : ARROW_OP type",
//t    "function_body : code_block",
//t    "parameter_clauses : parameter_clause",
//t    "parameter_clauses : parameter_clause parameter_clauses",
//t    "parameter_clause : '(' ')'",
//t    "parameter_clause : '(' parameter_list DOTDOTDOT_OP ')'",
//t    "parameter_clause : '(' parameter_list ')'",
//t    "parameter_list : parameter",
//t    "parameter_list : parameter ',' parameter_list",
//t    "parameter : parameter_head local_parameter_name type_annotation default_argument_clause",
//t    "parameter : parameter_head local_parameter_name type_annotation",
//t    "parameter : parameter_head type_annotation default_argument_clause",
//t    "parameter : parameter_head type_annotation",
//t    "parameter : attributes type",
//t    "parameter : type",
//t    "parameter_head : INOUT LET '#' parameter_name",
//t    "parameter_head : INOUT LET parameter_name",
//t    "parameter_head : INOUT '#' parameter_name",
//t    "parameter_head : INOUT parameter_name",
//t    "parameter_head : LET '#' parameter_name",
//t    "parameter_head : LET parameter_name",
//t    "parameter_head : '#' parameter_name",
//t    "parameter_head : parameter_name",
//t    "parameter_head : INOUT VAR '#' parameter_name",
//t    "parameter_head : INOUT VAR parameter_name",
//t    "parameter_head : VAR '#' parameter_name",
//t    "parameter_head : VAR parameter_name",
//t    "parameter_name : identifier",
//t    "parameter_name : '_'",
//t    "local_parameter_name : identifier",
//t    "local_parameter_name : '_'",
//t    "default_argument_clause : expression",
//t    "enum_declaration : attributes ENUM union_style_enum",
//t    "enum_declaration : ENUM union_style_enum",
//t    "enum_declaration : attributes ENUM raw_value_style_enum",
//t    "enum_declaration : ENUM raw_value_style_enum",
//t    "union_style_enum : enum_name generic_parameter_clause '{' union_style_enum_members '}'",
//t    "union_style_enum : enum_name generic_parameter_clause '{' '}'",
//t    "union_style_enum : enum_name '{' union_style_enum_members '}'",
//t    "union_style_enum : enum_name '{' '}'",
//t    "union_style_enum_members : union_style_enum_member",
//t    "union_style_enum_members : union_style_enum_member union_style_enum_members",
//t    "union_style_enum_member : declaration",
//t    "union_style_enum_member : union_style_enum_case_clause",
//t    "union_style_enum_case_clause : attributes CASE union_style_enum_case_list",
//t    "union_style_enum_case_clause : CASE union_style_enum_case_list",
//t    "union_style_enum_case_list : union_style_enum_case",
//t    "union_style_enum_case_list : union_style_enum_case ',' union_style_enum_case_list",
//t    "union_style_enum_case : enum_case_name tuple_type",
//t    "union_style_enum_case : enum_case_name",
//t    "enum_name : identifier",
//t    "enum_case_name : identifier",
//t    "raw_value_style_enum : enum_name generic_parameter_clause ':' type_identifier '{' raw_value_style_enum_members '}'",
//t    "raw_value_style_enum : enum_name generic_parameter_clause ':' type_identifier '{' '}'",
//t    "raw_value_style_enum : enum_name ':' type_identifier '{' raw_value_style_enum_members '}'",
//t    "raw_value_style_enum : enum_name ':' type_identifier '{' '}'",
//t    "raw_value_style_enum_members : raw_value_style_enum_member",
//t    "raw_value_style_enum_members : raw_value_style_enum_member raw_value_style_enum_members",
//t    "raw_value_style_enum_member : declaration",
//t    "raw_value_style_enum_member : raw_value_style_enum_case_clause",
//t    "raw_value_style_enum_case_clause : attributes CASE raw_value_style_enum_case_list",
//t    "raw_value_style_enum_case_clause : CASE raw_value_style_enum_case_list",
//t    "raw_value_style_enum_case_list : raw_value_style_enum_case",
//t    "raw_value_style_enum_case_list : raw_value_style_enum_case ',' raw_value_style_enum_case_list",
//t    "raw_value_style_enum_case : enum_case_name raw_value_assignment",
//t    "raw_value_style_enum_case : enum_case_name",
//t    "raw_value_assignment : '=' literal",
//t    "struct_declaration : attributes STRUCT struct_name generic_parameter_clause type_inheritance_clause struct_body",
//t    "struct_declaration : attributes STRUCT struct_name generic_parameter_clause struct_body",
//t    "struct_declaration : attributes STRUCT struct_name type_inheritance_clause struct_body",
//t    "struct_declaration : attributes STRUCT struct_name struct_body",
//t    "struct_declaration : STRUCT struct_name generic_parameter_clause type_inheritance_clause struct_body",
//t    "struct_declaration : STRUCT struct_name generic_parameter_clause struct_body",
//t    "struct_declaration : STRUCT struct_name type_inheritance_clause struct_body",
//t    "struct_declaration : STRUCT struct_name struct_body",
//t    "struct_name : identifier",
//t    "struct_body : '{' declarations '}'",
//t    "struct_body : '{' '}'",
//t    "class_declaration : attributes CLASS class_name generic_parameter_clause type_inheritance_clause class_body",
//t    "class_declaration : attributes CLASS class_name generic_parameter_clause class_body",
//t    "class_declaration : attributes CLASS class_name type_inheritance_clause class_body",
//t    "class_declaration : attributes CLASS class_name class_body",
//t    "class_declaration : CLASS class_name generic_parameter_clause type_inheritance_clause class_body",
//t    "class_declaration : CLASS class_name generic_parameter_clause class_body",
//t    "class_declaration : CLASS class_name type_inheritance_clause class_body",
//t    "class_declaration : CLASS class_name class_body",
//t    "class_name : identifier",
//t    "class_body : '{' declarations '}'",
//t    "class_body : '{' '}'",
//t    "protocol_declaration : attributes PROTOCOL protocol_name type_inheritance_clause protocol_body",
//t    "protocol_declaration : attributes PROTOCOL protocol_name protocol_body",
//t    "protocol_declaration : PROTOCOL protocol_name type_inheritance_clause protocol_body",
//t    "protocol_declaration : PROTOCOL protocol_name protocol_body",
//t    "protocol_name : identifier",
//t    "protocol_body : '{' protocol_member_declarations '}'",
//t    "protocol_body : '{' '}'",
//t    "protocol_member_declaration : protocol_property_declaration",
//t    "protocol_member_declaration : protocol_method_declaration",
//t    "protocol_member_declaration : protocol_initializer_declaration",
//t    "protocol_member_declaration : protocol_subscript_declaration",
//t    "protocol_member_declaration : protocol_associated_type_declaration",
//t    "protocol_member_declarations : protocol_member_declaration",
//t    "protocol_member_declarations : protocol_member_declaration protocol_member_declarations",
//t    "protocol_property_declaration : variable_declaration_head variable_name type_annotation getter_setter_keyword_block",
//t    "protocol_method_declaration : function_head function_name generic_parameter_clause function_signature",
//t    "protocol_method_declaration : function_head function_name function_signature",
//t    "protocol_initializer_declaration : initializer_head generic_parameter_clause parameter_clause",
//t    "protocol_initializer_declaration : initializer_head parameter_clause",
//t    "protocol_subscript_declaration : subscript_head subscript_result getter_setter_keyword_block",
//t    "protocol_associated_type_declaration : typealias_head type_inheritance_clause typealias_assignment",
//t    "protocol_associated_type_declaration : typealias_head type_inheritance_clause",
//t    "protocol_associated_type_declaration : typealias_head typealias_assignment",
//t    "protocol_associated_type_declaration : typealias_head",
//t    "initializer_declaration : initializer_head generic_parameter_clause parameter_clause initializer_body",
//t    "initializer_declaration : initializer_head parameter_clause initializer_body",
//t    "initializer_head : attributes CONVENIENCE INIT",
//t    "initializer_head : attributes INIT",
//t    "initializer_head : CONVENIENCE INIT",
//t    "initializer_head : INIT",
//t    "initializer_body : code_block",
//t    "deinitializer_declaration : attributes DEINIT code_block",
//t    "deinitializer_declaration : DEINIT code_block",
//t    "extension_declaration : EXTENSION type_identifier type_inheritance_clause extension_body",
//t    "extension_declaration : EXTENSION type_identifier extension_body",
//t    "extension_body : '{' declarations '}'",
//t    "extension_body : '{' '}'",
//t    "subscript_declaration : subscript_head subscript_result code_block",
//t    "subscript_declaration : subscript_head subscript_result getter_setter_block",
//t    "subscript_declaration : subscript_head subscript_result getter_setter_keyword_block",
//t    "subscript_head : attributes SUBSCRIPT parameter_clause",
//t    "subscript_head : SUBSCRIPT parameter_clause",
//t    "subscript_result : attributes type",
//t    "subscript_result : type",
//t    "operator_declaration : prefix_operator_declaration",
//t    "operator_declaration : postfix_operator_declaration",
//t    "operator_declaration : infix_operator_declaration",
//t    "prefix_operator_declaration : OPERATOR PREFIX operator_ '{' '}'",
//t    "postfix_operator_declaration : OPERATOR POSTFIX operator_ '{' '}'",
//t    "infix_operator_declaration : OPERATOR INFIX operator_ '{' infix_operator_attributes '}'",
//t    "infix_operator_declaration : OPERATOR INFIX operator_ '{' '}'",
//t    "infix_operator_attributes : precedence_clause associativity_clause",
//t    "infix_operator_attributes : precedence_clause",
//t    "infix_operator_attributes : associativity_clause",
//t    "precedence_clause : PRECEDENCE NUMBER",
//t    "associativity_clause : ASSOCIATIVITY associativity_value",
//t    "associativity_value : LEFT",
//t    "associativity_value : RIGHT",
//t    "associativity_value : NONE",
//t    "type : array_type",
//t    "type : function_type",
//t    "type : type_identifier",
//t    "type : tuple_type",
//t    "type : optional_type",
//t    "type : implicitly_unwrapped_optional_type",
//t    "type : protocol_composition_type",
//t    "type : metatype_type",
//t    "type_annotation : attributes type",
//t    "type_annotation : type",
//t    "type_identifier : type_name generic_argument_clause",
//t    "type_identifier : type_name",
//t    "type_identifier : type_name generic_argument_clause '.' type_identifier",
//t    "type_identifier : type_name '.' type_identifier",
//t    "type_name : identifier",
//t    "tuple_type : '(' tuple_type_body ')'",
//t    "tuple_type : '(' ')'",
//t    "tuple_type_body : tuple_type_element_list DOTDOTDOT_OP",
//t    "tuple_type_body : tuple_type_element_list",
//t    "tuple_type_element_list : tuple_type_element",
//t    "tuple_type_element_list : tuple_type_element ',' tuple_type_element_list",
//t    "tuple_type_element : attributes INOUT type",
//t    "tuple_type_element : attributes type",
//t    "tuple_type_element : INOUT type",
//t    "tuple_type_element : type",
//t    "tuple_type_element : INOUT element_name type_annotation",
//t    "tuple_type_element : element_name type_annotation",
//t    "element_name : identifier",
//t    "function_type : type ARROW_OP type",
//t    "array_type : type '[' ']'",
//t    "array_type : array_type '[' ']'",
//t    "optional_type : type '?'",
//t    "implicitly_unwrapped_optional_type : type '!'",
//t    "protocol_composition_type : PROTOCOL '<' protocol_identifier_list '>'",
//t    "protocol_composition_type : PROTOCOL '<' '>'",
//t    "protocol_identifier_list : protocol_identifier",
//t    "protocol_identifier_list : protocol_identifier ',' protocol_identifier_list",
//t    "protocol_identifier : type_identifier",
//t    "metatype_type : type '.' UTYPE",
//t    "metatype_type : type '.' UPROTOCOL",
//t    "type_inheritance_clause : ':' type_inheritance_list",
//t    "type_inheritance_list : type_identifier",
//t    "type_inheritance_list : type_identifier ',' type_inheritance_list",
//t    "pattern : wildcard_pattern type_annotation",
//t    "pattern : wildcard_pattern",
//t    "pattern : identifier_pattern type_annotation",
//t    "pattern : identifier_pattern",
//t    "pattern : value_binding_pattern",
//t    "pattern : tuple_pattern type_annotation",
//t    "pattern : tuple_pattern",
//t    "pattern : enum_case_pattern",
//t    "pattern : type_casting_pattern",
//t    "pattern : expression_pattern",
//t    "wildcard_pattern : '_'",
//t    "identifier_pattern : identifier",
//t    "value_binding_pattern : VAR pattern",
//t    "value_binding_pattern : LET pattern",
//t    "tuple_pattern : '(' tuple_pattern_element_list ')'",
//t    "tuple_pattern : '(' ')'",
//t    "tuple_pattern_element_list : tuple_pattern_element",
//t    "tuple_pattern_element_list : tuple_pattern_element ',' tuple_pattern_element_list",
//t    "tuple_pattern_element : pattern",
//t    "enum_case_pattern : type_identifier '.' enum_case_name tuple_pattern",
//t    "enum_case_pattern : type_identifier '.' enum_case_name",
//t    "enum_case_pattern : '.' enum_case_name tuple_pattern",
//t    "enum_case_pattern : '.' enum_case_name",
//t    "type_casting_pattern : is_pattern",
//t    "type_casting_pattern : as_pattern",
//t    "is_pattern : IS type",
//t    "as_pattern : pattern AS type",
//t    "expression_pattern : expression",
//t    "attribute : '@' attribute_name attribute_argument_clause",
//t    "attribute : '@' attribute_name",
//t    "attribute_name : identifier",
//t    "attribute_argument_clause : '(' balanced_tokens ')'",
//t    "attribute_argument_clause : '(' ')'",
//t    "attributes : attribute",
//t    "attributes : attribute attributes",
//t    "balanced_tokens : balanced_token",
//t    "balanced_tokens : balanced_token balanced_tokens",
//t    "balanced_token : '(' balanced_tokens ')'",
//t    "balanced_token : '(' ')'",
//t    "balanced_token : '[' balanced_tokens ']'",
//t    "balanced_token : '[' ']'",
//t    "balanced_token : '{' balanced_tokens '}'",
//t    "balanced_token : '{' '}'",
//t    "balanced_token : BALANCED_TEXT",
//t    "expression : prefix_expression binary_expressions",
//t    "expression : prefix_expression",
//t    "expression_list : expression",
//t    "expression_list : expression ',' expression_list",
//t    "prefix_expression : prefix_operator postfix_expression",
//t    "prefix_expression : postfix_expression",
//t    "prefix_expression : in_out_expression",
//t    "in_out_expression : '&' identifier",
//t    "binary_expression : binary_operator prefix_expression",
//t    "binary_expression : assignment_operator prefix_expression",
//t    "binary_expression : conditional_operator prefix_expression",
//t    "binary_expression : type_casting_operator",
//t    "binary_expressions : binary_expression",
//t    "binary_expressions : binary_expression binary_expressions",
//t    "assignment_operator : '='",
//t    "conditional_operator : '?' expression ':'",
//t    "type_casting_operator : IS type",
//t    "type_casting_operator : AS '?' type",
//t    "type_casting_operator : AS type",
//t    "primary_expression : identifier generic_argument_clause",
//t    "primary_expression : identifier",
//t    "primary_expression : literal_expression",
//t    "primary_expression : self_expression",
//t    "primary_expression : superclass_expression",
//t    "primary_expression : closure_expression",
//t    "primary_expression : parenthesized_expression",
//t    "primary_expression : implicit_member_expression",
//t    "primary_expression : wildcard_expression",
//t    "literal_expression : literal",
//t    "literal_expression : array_literal",
//t    "literal_expression : dictionary_literal",
//t    "literal_expression : FILE_DEFINE",
//t    "literal_expression : LINE_DEFINE",
//t    "literal_expression : COLUMN_DEFINE",
//t    "literal_expression : FUNCTION_DEFINE",
//t    "array_literal : '[' array_literal_items ']'",
//t    "array_literal : '[' ']'",
//t    "array_literal_items : array_literal_item ','",
//t    "array_literal_items : array_literal_item",
//t    "array_literal_items : array_literal_item ',' array_literal_items",
//t    "array_literal_item : expression",
//t    "dictionary_literal : '[' dictionary_literal_items ']'",
//t    "dictionary_literal : '[' ':' ']'",
//t    "dictionary_literal_items : dictionary_literal_item ','",
//t    "dictionary_literal_items : dictionary_literal_item",
//t    "dictionary_literal_items : dictionary_literal_item ',' dictionary_literal_items",
//t    "dictionary_literal_item : expression ':' expression",
//t    "self_expression : SELF",
//t    "self_expression : SELF '.' identifier",
//t    "self_expression : SELF '[' expression ']'",
//t    "self_expression : SELF '.' INIT",
//t    "superclass_expression : superclass_method_expression",
//t    "superclass_expression : superclass_subscript_expression",
//t    "superclass_expression : superclass_initializer_expression",
//t    "superclass_method_expression : SUPER '.' identifier",
//t    "superclass_subscript_expression : SUPER '[' expression ']'",
//t    "superclass_initializer_expression : SUPER '.' INIT",
//t    "closure_expression : '{' closure_signature statements '}'",
//t    "closure_expression : '{' statements '}'",
//t    "closure_signature : parameter_clause function_result IN",
//t    "closure_signature : parameter_clause IN",
//t    "closure_signature : identifier_list function_result IN",
//t    "closure_signature : identifier_list IN",
//t    "closure_signature : capture_list parameter_clause function_result IN",
//t    "closure_signature : capture_list parameter_clause IN",
//t    "closure_signature : capture_list identifier_list function_result IN",
//t    "closure_signature : capture_list identifier_list IN",
//t    "closure_signature : capture_list IN",
//t    "capture_list : '[' capture_specifier expression ']'",
//t    "capture_specifier : WEAK",
//t    "capture_specifier : UNOWNED",
//t    "capture_specifier : UNOWNED_SAFE",
//t    "capture_specifier : UNOWNED_UNSAFE",
//t    "implicit_member_expression : '.' identifier",
//t    "parenthesized_expression : '(' expression_element_list ')'",
//t    "parenthesized_expression : '(' ')'",
//t    "expression_element_list : expression_element",
//t    "expression_element_list : expression_element ',' expression_element_list",
//t    "expression_element : expression",
//t    "expression_element : identifier ':' expression",
//t    "wildcard_expression : '_'",
//t    "postfix_expression : primary_expression",
//t    "postfix_expression : postfix_expression postfix_operator",
//t    "postfix_expression : function_call_expression",
//t    "postfix_expression : initializer_expression",
//t    "postfix_expression : explicit_member_expression",
//t    "postfix_expression : postfix_self_expression",
//t    "postfix_expression : dynamic_type_expression",
//t    "postfix_expression : subscript_expression",
//t    "postfix_expression : forced_value_expression",
//t    "postfix_expression : optional_chaining_expression",
//t    "function_call_expression : postfix_expression parenthesized_expression",
//t    "function_call_expression : postfix_expression parenthesized_expression trailing_closure",
//t    "function_call_expression : postfix_expression trailing_closure",
//t    "trailing_closure : closure_expression",
//t    "initializer_expression : postfix_expression '.' INIT",
//t    "explicit_member_expression : postfix_expression '.' NUMBER",
//t    "explicit_member_expression : postfix_expression '.' identifier generic_argument_clause",
//t    "explicit_member_expression : postfix_expression '.' identifier",
//t    "postfix_self_expression : postfix_expression '.' SELF",
//t    "dynamic_type_expression : postfix_expression '.' DYNAMICTYPE",
//t    "subscript_expression : postfix_expression '[' expression_list ']'",
//t    "forced_value_expression : postfix_expression '!'",
//t    "optional_chaining_expression : postfix_expression '?'",
//t    "identifier : IDENTIFIER",
//t    "identifier : '$' NUMBER",
//t    "identifier_list : identifier",
//t    "identifier_list : identifier ',' identifier_list",
//t    "literal : INTEGER_LITERAL",
//t    "literal : FLOATING_POINT_LITERAL",
//t    "literal : STRING_LITERAL",
//t    "operator_ : OPERATOR",
//t    "binary_operator : operator_",
//t    "prefix_operator : operator_",
//t    "postfix_operator : operator_",
//t  };
//t public static string getRule (int index) {
//t    return yyRule [index];
//t }
//t}
  protected static readonly string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"'!'",null,"'#'","'$'",null,"'&'",
    null,"'('","')'",null,null,"','",null,"'.'",null,null,null,null,null,
    null,null,null,null,null,null,"':'","';'","'<'","'='","'>'","'?'",
    "'@'",null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    "'['",null,"']'",null,"'_'",null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,"'{'",null,"'}'",null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    "IDENTIFIER","NUMBER","NEWLINE","FOR","IN","DO","WHILE","IF","ELSE",
    "SWITCH","CASE","DEFAULT","WHERE","BREAK","CONTINUE","FALLTHROUGH",
    "RETURN","EQEQ_OP","CLASS","MUTATING","NONMUTATING","OVERRIDE",
    "STATIC","UNOWNED","UNOWNED_SAFE","UNOWNED_UNSAFE","WEAK","IMPORT",
    "TYEPALIAS","STRUCT","ENUM","PROTOCOL","VAR","FUNC","LET","GET","SET",
    "WILLSET","DIDSET","TYPEALIAS","ARROW_OP","DOTDOTDOT_OP","INOUT",
    "CONVENIENCE","INIT","DEINIT","EXTENSION","SUBSCRIPT","OPERATOR",
    "PREFIX","POSTFIX","INFIX","PRECEDENCE","ASSOCIATIVITY","LEFT",
    "RIGHT","NONE","IS","AS","BALANCED_TEXT","FILE_DEFINE","LINE_DEFINE",
    "COLUMN_DEFINE","FUNCTION_DEFINE","SELF","SUPER","DYNAMICTYPE",
    "UTYPE","UPROTOCOL","INTEGER_LITERAL","FLOATING_POINT_LITERAL",
    "STRING_LITERAL","\"end of file\"",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
//t  public static string yyname (int token) {
//t    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
//t    string name;
//t    if ((name = yyNames[token]) != null) return name;
//t    return "[unknown]";
//t  }

  //int yyExpectingState;
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
//t    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
	protected bool use_global_stacks;
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
//t      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
//t            if (debug != null)
//t              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              //yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
//t              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
//t                  if (debug != null)
//t                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
//t                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
//t              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
//t                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
//t              if (debug != null)
//t                debug.discard(yyState, yyToken, yyname(yyToken),
//t  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
//t        if (debug != null)
//t          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
//t          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
//t            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
//t        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

/*
 All more than 3 lines long rules are wrapped into a method
*/
#line default
   static readonly short [] yyLhs  = {              -1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    8,    8,    4,
    4,    4,    4,    9,    9,    9,    9,    9,    9,    9,
    9,    9,    9,    9,    9,    9,    9,    9,    9,   13,
   13,   10,   11,   18,   18,   12,    5,    5,   19,   19,
   21,   21,   22,   22,   20,   20,   23,   23,   24,   24,
   24,   24,   25,   28,   28,   27,   27,   26,   29,   30,
    6,    6,   31,   32,    7,    7,    7,    7,   34,   34,
   35,   35,   36,   37,   37,   38,   38,   39,   39,   41,
   41,   41,   40,   45,   45,   46,   46,   47,   47,   48,
   49,   50,   50,   51,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,   66,   66,
   67,   67,   68,   68,   68,   68,   68,   68,   68,   68,
   68,    0,    0,   14,   14,   53,   53,   53,   53,   70,
   70,   70,   70,   70,   70,   70,   71,   71,   72,   72,
   54,   54,   54,   54,   74,   74,   75,   75,   76,   15,
   15,   15,   15,   15,   15,   77,   77,   77,   77,   78,
   80,   80,   80,   83,   83,   84,   84,   84,   84,   85,
   81,   81,   81,   86,   86,   87,   87,   82,   82,   82,
   88,   88,   88,   88,   89,   89,   89,   89,   55,   90,
   92,   91,   56,   56,   93,   93,   93,   93,   94,   94,
   95,   95,   98,   98,   96,   97,   97,   99,   99,   99,
  100,  100,  101,  101,  101,  101,  101,  101,  102,  102,
  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
  105,  105,  103,  103,  104,   57,   57,   57,   57,  106,
  106,  106,  106,  109,  109,  110,  110,  111,  111,  112,
  112,  113,  113,  108,  114,  107,  107,  107,  107,  116,
  116,  117,  117,  118,  118,  119,  119,  120,  120,  121,
   58,   58,   58,   58,   58,   58,   58,   58,  123,  125,
  125,   59,   59,   59,   59,   59,   59,   59,   59,  126,
  127,  127,   60,   60,   60,   60,  128,  129,  129,  131,
  131,  131,  131,  131,  130,  130,  132,  133,  133,  134,
  134,  135,  136,  136,  136,  136,   61,   61,  137,  137,
  137,  137,  140,   62,   62,   63,   63,  141,  141,   64,
   64,   64,  138,  138,  139,  139,   65,   65,   65,  142,
  143,  144,  144,  145,  145,  145,  146,  147,  148,  148,
  148,   52,   52,   52,   52,   52,   52,   52,   52,   79,
   79,   43,   43,   43,   43,   42,  115,  115,  154,  154,
  155,  155,  156,  156,  156,  156,  156,  156,  157,  150,
  149,  149,  151,  152,   44,   44,  158,  158,  159,  153,
  153,  124,  160,  160,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,  161,  162,  163,  163,  164,  164,
  168,  168,  169,  165,  165,  165,  165,  166,  166,  170,
  171,  167,  172,  172,  173,  174,  174,   69,   69,  175,
  175,  176,  176,  176,  176,  176,  176,  176,    2,    2,
   16,   16,  177,  177,  177,  181,  182,  182,  182,  182,
  178,  178,  184,  185,  186,  186,  186,  187,  187,  187,
  187,  187,  187,  187,  187,  187,  188,  188,  188,  188,
  188,  188,  188,  195,  195,  197,  197,  197,  198,  196,
  196,  199,  199,  199,  200,  189,  189,  189,  189,  190,
  190,  190,  201,  202,  203,  191,  191,  204,  204,  204,
  204,  204,  204,  204,  204,  204,  206,  207,  207,  207,
  207,  193,  192,  192,  208,  208,  209,  209,  194,  180,
  180,  180,  180,  180,  180,  180,  180,  180,  180,  211,
  211,  211,  219,  212,  213,  213,  213,  214,  215,  216,
  217,  218,   33,   33,  205,  205,  122,  122,  122,   73,
  183,  179,  210,
  };
   static readonly short [] yyLen = {           2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    1,    2,    1,
    1,    1,    1,    7,    6,    6,    5,    6,    5,    5,
    4,    9,    8,    8,    7,    8,    7,    7,    6,    1,
    1,    5,    3,    1,    1,    4,    1,    1,    4,    3,
    1,    1,    2,    2,    5,    4,    1,    2,    2,    2,
    2,    2,    3,    2,    1,    1,    2,    2,    2,    1,
    2,    2,    2,    1,    1,    1,    1,    1,    2,    1,
    2,    1,    1,    2,    1,    4,    3,    1,    3,    1,
    3,    3,    2,    1,    3,    1,    1,    3,    3,    3,
    3,    1,    3,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    0,    3,    2,    4,    3,    3,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    3,    1,    1,
    4,    3,    3,    2,    1,    3,    2,    1,    1,    2,
    4,    4,    4,    5,    4,    3,    2,    2,    1,    1,
    4,    3,    4,    3,    2,    4,    3,    3,    2,    3,
    4,    3,    4,    2,    1,    2,    1,    4,    3,    4,
    4,    3,    3,    2,    4,    3,    3,    2,    2,    2,
    1,    2,    5,    4,    3,    2,    2,    1,    1,    1,
    2,    1,    3,    2,    1,    1,    2,    2,    4,    3,
    1,    3,    4,    3,    3,    2,    2,    1,    4,    3,
    3,    2,    3,    2,    2,    1,    4,    3,    3,    2,
    1,    1,    1,    1,    1,    3,    2,    3,    2,    5,
    4,    4,    3,    1,    2,    1,    1,    3,    2,    1,
    3,    2,    1,    1,    1,    7,    6,    6,    5,    1,
    2,    1,    1,    3,    2,    1,    3,    2,    1,    2,
    6,    5,    5,    4,    5,    4,    4,    3,    1,    3,
    2,    6,    5,    5,    4,    5,    4,    4,    3,    1,
    3,    2,    5,    4,    4,    3,    1,    3,    2,    1,
    1,    1,    1,    1,    1,    2,    4,    4,    3,    3,
    2,    3,    3,    2,    2,    1,    4,    3,    3,    2,
    2,    1,    1,    3,    2,    4,    3,    3,    2,    3,
    3,    3,    3,    2,    2,    1,    1,    1,    1,    5,
    5,    6,    5,    2,    1,    1,    2,    2,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    1,    2,    1,    4,    3,    1,    3,    2,    2,    1,
    1,    3,    3,    2,    2,    1,    3,    2,    1,    3,
    3,    3,    2,    2,    4,    3,    1,    3,    1,    3,
    3,    2,    1,    3,    2,    1,    2,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    2,    2,    3,    2,
    1,    3,    1,    4,    3,    3,    2,    1,    1,    2,
    3,    1,    3,    2,    1,    3,    2,    1,    2,    1,
    2,    3,    2,    3,    2,    3,    2,    1,    2,    1,
    1,    3,    2,    1,    1,    2,    2,    2,    2,    1,
    1,    2,    1,    3,    2,    3,    2,    2,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    3,    2,    2,    1,    3,    1,    3,
    3,    2,    1,    3,    3,    1,    3,    4,    3,    1,
    1,    1,    3,    4,    3,    4,    3,    3,    2,    3,
    2,    4,    3,    4,    3,    2,    4,    1,    1,    1,
    1,    2,    3,    2,    1,    3,    1,    3,    1,    1,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    3,    2,    1,    3,    3,    4,    3,    3,    3,    4,
    2,    2,    1,    2,    1,    3,    1,    1,    1,    1,
    1,    1,    1,
  };
   static readonly short [] yyDefRed = {            0,
  553,    0,    0,    0,    0,    0,    0,    0,   83,    0,
    0,  124,  125,  126,  127,  128,  129,  130,  131,    0,
    0,    0,    0,  169,  208,    0,    0,    0,  332,    0,
    0,    0,    0,  480,  481,  482,  483,    0,    0,  557,
  558,  559,    0,    0,    0,  529,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  132,   20,
   21,   22,   23,  107,   47,   48,    0,    0,    0,   75,
   76,   77,   78,  105,  106,  108,  109,  110,  111,  112,
  113,  114,  115,  116,  117,  118,    0,    0,    0,  562,
    0,    0,    0,  477,    0,    0,  347,  348,  349,    0,
    0,    0,    0,  455,  530,  470,  471,  472,  473,  474,
  475,  476,  478,  479,  500,  501,  502,  532,  533,  534,
  535,  536,  537,  538,  539,  123,    0,    0,  560,    0,
    0,    0,    0,    0,    0,    0,   40,   41,    0,    0,
    0,    0,    0,    0,    0,    0,  409,    0,  412,  413,
  414,  428,  429,    0,    0,   44,   45,    0,    0,   51,
   52,    0,    0,   79,   74,   81,   84,  300,    0,  142,
  140,  141,  143,  144,  145,  146,  149,    0,  139,    0,
  150,  289,    0,  264,  247,  249,    0,  307,    0,    0,
    0,  432,    0,  154,    0,  201,  200,  331,  335,  376,
    0,    0,  344,    0,    0,    0,    0,    0,    0,    0,
  524,  527,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  522,    0,  485,    0,    0,    0,    0,
    0,  435,    0,  456,  554,   19,    1,    3,    2,    4,
    6,    5,    7,    9,    8,   10,   12,   11,   13,   14,
   15,   17,   16,   71,   72,   73,    0,  468,  168,  207,
    0,  122,    0,    0,    0,    0,    0,  167,  206,    0,
    0,  330,    0,    0,    0,    0,  160,    0,    0,  199,
  209,  210,    0,    0,    0,    0,    0,    0,  364,  368,
    0,    0,  365,    0,    0,  363,  366,  367,  369,  439,
    0,    0,  463,    0,  561,  449,    0,    0,    0,    0,
  460,    0,    0,    0,  552,  551,  563,  543,    0,  531,
  542,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  405,  407,  410,  135,
    0,    0,   43,    0,    0,    0,    0,    0,    0,  299,
  138,    0,    0,    0,    0,  288,    0,    0,    0,    0,
    0,  306,  432,  159,  157,    0,    0,    0,  337,    0,
    0,    0,  218,    0,  242,    0,    0,    0,    0,    0,
    0,  236,    0,    0,    0,  499,  497,    0,  505,  503,
    0,    0,  523,    0,    0,    0,    0,    0,  519,  520,
  521,  518,    0,  507,    0,  509,    0,    0,    0,  511,
    0,  516,    0,    0,    0,  491,    0,  484,    0,  490,
    0,    0,  433,    0,    0,    0,  153,    0,    0,  137,
    0,  246,  248,    0,  152,  329,  334,  343,  166,  205,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  333,  328,    0,    0,  378,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  393,  394,    0,    0,
  340,  341,  342,    0,    0,    0,    0,    0,  462,  457,
  458,  459,  545,  544,  548,  549,    0,    0,    0,  541,
    0,    0,   31,    0,    0,    0,    0,  419,    0,    0,
  426,  452,    0,    0,    0,    0,  375,    0,  265,    0,
    0,  134,   46,    0,   49,    0,    0,   56,    0,    0,
    0,    0,    0,  302,    0,    0,    0,  402,    0,  297,
  298,  148,  291,    0,    0,  286,  287,    0,  253,  256,
    0,    0,    0,  257,    0,    0,    0,  309,    0,    0,
    0,    0,    0,    0,    0,  310,  311,  312,  313,  314,
    0,    0,  305,  156,  339,    0,  336,    0,  241,  240,
    0,  234,    0,    0,    0,  232,  235,    0,    0,  220,
    0,  244,    0,    0,    0,    0,    0,    0,  498,  504,
  528,  526,    0,    0,    0,  556,    0,    0,  508,  506,
  510,  513,    0,  515,    0,  495,  489,  488,    0,  494,
  448,    0,  437,    0,    0,    0,    0,  101,    0,    0,
    0,  295,  136,    0,    0,  284,    0,  304,  151,    0,
  161,    0,  162,  163,  165,    0,  215,  204,  211,  217,
    0,   87,    0,    0,    0,  327,  396,  399,    0,    0,
    0,    0,    0,    0,  377,  379,    0,  388,    0,  400,
  401,  391,    0,    0,    0,    0,    0,    0,    0,  392,
    0,  464,  546,  550,    0,   30,    0,   29,    0,    0,
    0,    0,    0,  422,  420,    0,   27,    0,   42,  374,
  424,   53,   54,    0,    0,    0,   68,   55,   58,   61,
   59,   62,   60,  120,  301,    0,  296,  290,  285,  259,
    0,    0,    0,  252,  255,    0,  251,    0,    0,    0,
  170,    0,  325,    0,    0,  308,  316,    0,  321,    0,
  338,  239,  233,    0,  238,    0,  230,  231,  219,  222,
  245,  225,    0,  350,  351,    0,    0,  353,    0,    0,
  356,  517,    0,  512,  514,  443,    0,  447,    0,  445,
    0,  436,  441,  103,    0,  293,  294,    0,  282,  283,
  303,    0,    0,    0,    0,    0,    0,  164,  203,    0,
   93,    0,   96,   97,   86,   89,   91,   92,  395,    0,
  387,    0,  382,  175,    0,  179,    0,    0,    0,    0,
  172,    0,    0,    0,    0,    0,  187,  182,    0,    0,
  185,    0,    0,    0,   28,   39,    0,    0,    0,    0,
    0,    0,   26,    0,   25,    0,   64,   63,   67,  404,
    0,  262,  258,    0,  269,  272,    0,    0,    0,  273,
  250,    0,    0,  323,    0,  319,  320,    0,  322,  237,
  229,  223,  357,  359,  360,  361,  358,  352,  354,  442,
  446,  444,  292,  281,  194,    0,  198,    0,    0,    0,
  189,    0,    0,    0,    0,    0,    0,    0,    0,  398,
    0,  178,  174,  177,    0,    0,  171,    0,  173,  186,
  181,  184,  183,   38,   37,    0,   35,    0,    0,    0,
   24,   70,   69,  261,    0,  275,    0,    0,  268,  271,
  267,    0,  317,  318,    0,  193,  197,  192,    0,  196,
    0,  188,  190,  100,   98,   99,   95,  180,  176,   36,
   34,   33,    0,    0,  278,    0,  274,  266,  191,  195,
   32,  280,  277,
  };
  protected static readonly short [] yyDgoto  = {            51,
   52,  192,   54,   55,   56,   57,   58,  351,   60,   61,
   62,   63,  136,  462,   64,  138,  193,  158,   65,   66,
  162,  525,  529,  530,  531,  532,  705,  706,  837,  913,
   67,   68,  200,   70,   71,   72,   73,  285,  458,  653,
  459,  141,  289,  290,  791,  792,  793,  794,  258,  434,
  435,  345,   74,   75,   76,   77,   78,   79,   80,   81,
   82,   83,   84,   85,   86,  536,   87,   88,   89,  178,
  179,  180,   90,  194,  195,  375,   91,  278,  347,  482,
  483,  645,  676,  677,  807,  678,  679,  785,  786,   92,
  280,  197,   93,  283,  455,  648,  456,  418,  457,  389,
  390,  391,  595,  752,  392,  185,  186,  187,  552,  553,
  554,  720,  721,  722,  293,  848,  849,  850,  916,  917,
  945,   94,  183,  359,  366,  169,  360,  189,  372,  564,
  565,  566,  567,  568,  569,  570,   95,   96,  294,  463,
  379,   97,   98,   99,  759,  760,  761,  867,  295,  296,
  297,  298,  299,  470,  471,  472,  473,  659,  660,  538,
  145,  146,  147,  148,  149,  150,  151,  333,  334,  152,
  153,  100,  233,  433,  626,  627,  101,  306,  102,  103,
  104,  307,  308,  309,  310,  311,  105,  106,  107,  108,
  109,  110,  111,  112,  113,  114,  228,  229,  230,  231,
  115,  116,  117,  221,  222,  223,  413,  214,  215,  320,
  118,  119,  120,  121,  122,  123,  124,  125,  321,
  };
  protected static readonly short [] yySindex = {         6809,
    0, 7261,  -69, 7151, 7151, 7974,  139,  139,    0, 7974,
  139,    0,    0,    0,    0,    0,    0,    0,    0,  285,
  139,  139,  139,    0,    0, 1322,  139, -187,    0,  -69,
  139,  160,  462,    0,    0,    0,    0,    6,  505,    0,
    0,    0, 7620, 6881,  139,    0, 7327,  139,  139, -106,
    0, 6809,   26,   29,   57,   78,   74,   87,    0,    0,
    0,    0,    0,    0,    0,    0,  513,   86,  146,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  512,  684, 3005,    0,
 1322,  196,   20,    0,  537,  624,    0,    0,    0,  182,
  221, 8028,  195,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1322, 1322,    0,  423,
 7639, 7207,  139,    0,  288,  303,    0,    0, -135,  146,
  478,  385,  180,  767,  624,  624,    0,  624,    0,    0,
    0,    0,    0, 6323,  219,    0,    0,  -69,  146,    0,
    0,  -69,  384,    0,    0,    0,    0,    0,   65,    0,
    0,    0,    0,    0,    0,    0,    0,   20,    0,  502,
    0,    0,  575,    0,    0,    0,  629,    0,  376, 1322,
 3376,    0, 3993,    0,  558,    0,    0,    0,    0,    0,
  407,  359,    0,  309,  309,  309,   -1, 7974,    2, 7974,
    0,    0,  668,  578,  596, 5862, 7288,  532,  656,  347,
 6809,  370,  483,    0,  585,    0,  639,  616,  676,  632,
  685,    0,  693,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  423,    0,    0,    0,
 1322,    0,  139,  285,  139,  139,  139,    0,    0, 1322,
  434,    0,  -69,  160,  519,  146,    0,  624,  423,    0,
    0,    0,  537,  139,  160,  -69,  677,  547,    0,    0,
  215,  423,    0,  623,  660,    0,    0,    0,    0,    0,
  423,  573,    0, 7974,    0,    0,  221, 7974, 7974, 7974,
    0,  195,   50, 7974,    0,    0,    0,    0,  633,    0,
    0,  438,  438,  215, 8080,  703, 7657,    0,  288,  712,
  438,  668,  742,  761,    0,  774, 7974, 7711, 7974,  423,
  139,  770,  139,  529,  215,  423,    0,    0,    0,    0,
  696, 7151,    0,  574,  418, 8367,  139,  499,  700,    0,
    0,   20, 8413,  500,  721,    0, 1803,  139,  540, 1880,
  724,    0,    0,    0,    0, 1322, 8468,  725,    0,  420,
  461,  136,    0,  312,    0,    0,  215,  423,   -2,  806,
  373,    0,  728,  741,  752,    0,    0,  772,    0,    0,
  784, 7974,    0, 7974, 7467,    0,    0,  668,    0,    0,
    0,    0, 7974,    0,  139,    0,  624,  617,  757,    0,
  626,    0,  844,  378,  398,    0, 7974,    0, 7974,    0,
 7974,   60,    0,  827,  847,  215,    0,   65,   20,    0,
  575,    0,    0,  376,    0,    0,    0,    0,    0,    0,
 1322, 8120,  215,  160,  -69,  595,  160,    4,  849,  836,
  -69,    0,    0,  408,  423,    0,    0,  215,  424,  854,
  598,  857,  624,  423,  379,  809,    0,    0,  215, 6053,
    0,    0,    0,  822,  215,  423,  215,  851,    0,    0,
    0,    0,    0,    0,    0,    0,  146,  288,  823,    0,
 6395,  -69,    0, 8080, 7735,  846, 7761,    0, 1322, 5838,
    0,    0, 8080,  858,  -69,  215,    0,  139,    0,  774,
  215,    0,    0,  354,    0, 1322,  860,    0,  795,  474,
 6467, 6737,  462,    0, 6605,  796,  882,    0,  700,    0,
    0,    0,    0,  802,  721,    0,    0,  139,    0,    0,
 1287,  803, 5131,    0,  808, 6263,  139,    0,  488,  848,
  139,  567,   20,  804, 3500,    0,    0,    0,    0,    0,
  537,  624,    0,    0,    0,  810,    0,  312,    0,    0,
  312,    0,  504,  509,  312,    0,    0,  215,  896,    0,
  185,    0,    0, 7974,  624,  813,  815,  296,    0,    0,
    0,    0,    0,  668,  850,    0,  215,  423,    0,    0,
    0,    0,  681,    0,  683,    0,    0,    0,  639,    0,
    0,   72,    0,   51,   18,  904,   82,    0,  423,  499,
  700,    0,    0,  500,  721,    0,  724,    0,    0, 5980,
    0,  825,    0,    0,    0,  -69,    0,    0,    0,    0,
  139,    0,  884,  139,  336,    0,    0,    0,  887,  906,
  215,  624,  423,  215,    0,    0,  344,    0,  215,    0,
    0,    0,  -69,   36, 2661,  210,  -23,  211,   63,    0,
  215,    0,    0,    0,  826,    0,  -69,    0,  -69,  912,
 7787, 7827,  898,    0,    0,  -69,    0, 8080,    0,    0,
    0,    0,    0, -154,  910, 1322,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  139,    0,    0,    0,    0,
  925,  937,  139,    0,    0, 6677,    0,  855,  863,  501,
    0,  624,    0,  196,  537,    0,    0,  160,    0,  866,
    0,    0,    0,  312,    0,  312,    0,    0,    0,    0,
    0,    0, 7974,    0,    0,  723,  482,    0,  868,  686,
    0,    0,  215,    0,    0,    0,  950,    0,  870,    0,
  907,    0,    0,    0,  700,    0,    0,  721,    0,    0,
    0,   36,   36, 3161,  206,   25,  155,    0,    0,   19,
    0,  953,    0,    0,    0,    0,    0,    0,    0,  139,
    0,  215,    0,    0,  139,    0,  -69,  -69,   36,   36,
    0,  708,  877,  -69,  714,  879,    0,    0,  715,  885,
    0,  720,  886,    0,    0,    0,  -69,  -69,  973,  -69,
  974, 7950,    0,  -69,    0, 7974,    0,    0,    0,    0,
  139,    0,    0,  139,    0,    0, 2588,  893, 6533,    0,
    0, 8270,  866,    0,  160,    0,    0,  186,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -69,    0,  -69,   36,   36,
    0,  726,  895,  729,  899,  533,  139,  336,  139,    0,
  984,    0,    0,    0,  -69,   36,    0,  -69,    0,    0,
    0,    0,    0,    0,    0,  -69,    0,  -69,  -69,  987,
    0,    0,    0,    0,  968,    0,  986,  139,    0,    0,
    0,  908,    0,    0,  506,    0,    0,    0,  -69,    0,
  -69,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  -69,  527,    0,  139,    0,    0,    0,    0,
    0,    0,    0,
  };
  protected static readonly short [] yyRindex = {         1032,
    0,    0,    0,    0,    0,    0,   95,   99,    0,  119,
  812,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 8094,    0,    0,    0,    0, 2003,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   98,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  994,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  580,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 4831,
 3279,    0, 4555,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2076,  174,    0,    0,    0,    0, 2373,
 1106,    0,    0,    0, 5043, 5335,    0, 5405,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1561,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1051,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 5711,    0, 5519,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  124,    0,  995,    0,    0,    0,  673,    0,
    0,    0,    0,    0,    0,    0,   37,    0,  945,    0,
  948,    0, 2725,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  812,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3335,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  931,    0,    0,    0, 1487,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3628,    0,    0,    0,
    0, 4628,    0,    0,    0,    0,    0,    0, 1931,    0,
    0, 3700, 3773, 4900,    0,    0,    0, 2445,  -16,    0,
  630, 5918,    0, 1017, 2518, 4066,    0,    0,    0,    0,
    0, 1181,    0,    0, 4138,    0,    0,    0,    0,    0,
    0,    0,    0,  131,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1968,  -11,    0,    0,   43,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  976, 6375, 8193,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  433,    0,    0,    0,    0,    0,  966,    0,
  967,    0,    0,    0,  999,  583,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 5634,    0,    0, 2245, 2173,    0,  135,  105,
    0,    0,    0,    0,    0,    0,  816,   31,    0,    0,
 1021,  104,    0,    0,    0,    0,    0,    0,  940,    0,
    0,    0,    0,    0, 2862,    0, 2935,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1634,  123,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4972,    0,    0,    0, 4211,
 4483,    0,    0,    0,    0,    0,    0,    0,    0,  939,
    0,    0,    0,    0,  941,    0, 1430,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  943,    0,    0,    0,    0,    0,    0,    0,
    0, 2321,    0,    0,  944,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   49,    0,    0,
    0,    0, 5804,   66,    0,    0,    0,    0,    0,    0,
    0,    0, 2545, 3829,    0,    0, 3942,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  524,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1003,
   77,    0,    0,  112,    0,    0,    0,    0, 2790,    0,
    0,    0,  266,  120,    0,    0,    0,    0,    0,    0,
 3207,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 7581,    0, 1012,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 8301, 8184,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 4418,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  145,    0,    0,    0,    0,    0,    0,  946,
    0,    0, 4776,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1010,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  163,    0,    0,    0,    0,    0,  333,  132,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 5462,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  949,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 8239,    0, 8332,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,
  };
  protected static readonly short [] yyGindex = {            0,
    0,  782,   59, 1008,    0,    0,    0,   15,    0,    0,
    0,    0,  947,   76,  431,  -74,    8,  730,  552, 1011,
    0,    0,  550,    0,    0,    0,  371,    0,    0,    0,
    0,  824,    1,    0,    0,    0,    0, -114,  429,    0,
    0, -265,   11, -635,  208,    0,    0,    0, -141,  455,
    0,  350,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -281,   16,    0,   81,  834,
 -117,    0,  719,  -31,    0,  648, -253,  544, -112,  659,
 -436,  466,  435,  440,  -99,  439,  444,  346,  348, -208,
 -212,    0, -118,  572, -437,  490,  688,  245,  -30,  549,
    0,    0,    0,  388,  -90,  888,  889,    0,  126,    0,
    0, -599,    0, -129,  421, -147,    0,    0, -393,    0,
    0,  207,  891, -121, -333,  890, -288,  892, -324,  592,
    0,    0,    0,    0,    0,    0,  -75,  -10,  588,  701,
  783,    0,    0,    0,    0,    0,  403,    0,    0,    0,
    0,    0,    0,    0,  508,    0,  706,  366,    0,  456,
    0,    0,    0,   83,    0,    0,    0,  664,    0,    0,
    0,    0,    0,    0,  216,    0,  564,  871,    0, 1075,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  173,  -52,    0,    0,    0,    0,  750,    0,  749,    0,
    0,    0,    0,    0, -183,    0,    0,  778,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  864,
  };
  protected static readonly short [] yyTable = {           342,
   69,  203,  140,  336,  159,  159,  159,  165,  165,  139,
  159,  168,  142,  220,   59,  644,  646,  143,  460,  798,
  177,  182,  184,  188,  432,  238,  140,  196,  241,  228,
  546,  547,  228,  348,   50,  349,  142,   50,  590,  425,
   48,  201,  451,  213,  219,  224,  573,  159,  232,  234,
  319,  207,   69,  154,  358,   50,  244,  622,  218,  277,
  361,  365,  157,  161,  286,  652,  236,  371,  364,  540,
  541,  386,  369,  250,  386,  805,  888,  247,  155,  378,
  489,  544,  144,  221,  239,   50,  252,  242,   48,  227,
  622,  276,  227,  281,   80,  576,  208,   18,   82,  622,
  623,  142,  159,  262,  275,  199,  226,  636,  625,  226,
  770,  622,  766,  198,  836,  245,  561,  385,   85,  638,
  385,  622,  357,  843,  284,  339,   48,  140,  140,  489,
   50,  159,  332,  335,  322,  323,  248,  142,  142,  331,
  624,  625,  142,  256,  381,  253,  440,  143,   90,  632,
  625,  235,  384,   80,   69,  384,  469,   82,  154,  344,
  340,  562,  625,  469,  469,  452,   90,  469,  454,  469,
  585,   50,  625,  624,   50,  768,  292,   85,  177,  340,
  300,  451,  624,  187,  469,  224,  469,  356,  224,   50,
  140,  332,  424,  159,  624,  186,   88,  322,  331,  202,
  142,  142,  386,  383,  624,  257,  383,  397,  159,  400,
  159,  719,  144,  520,  469,  451,  408,  159,   48,  384,
   50,   69,   18,  423,  288,  346,  346,  316,  346,  437,
  385,  606,  451,  353,   43,  419,  539,  354,  445,  499,
  313,  914,  545,  448,  542,   48,  469,  478,   48,   48,
  717,  563,  936,  714,  461,    1,  279,  315,    1,  319,
  475,  140,  512,  168,  177,  182,  184,  188,  814,   48,
  140,  142,  651,   48,   48,  318,    1,  477,  594,  385,
  142,  303,  388,  304,  237,  314,  228,  240,  467,  580,
  582,  586,  887,  587,  571,  589,  388,  856,  432,  396,
  779,  780,  399,  859,  159,  476,    1,  493,  159,  159,
  159,  561,  781,  497,  159,  243,  631,   44,  782,  635,
   50,  633,  637,  630,  129,  159,  634,  159,  386,  185,
  881,  337,  249,  621,  811,  818,  246,  159,  159,  159,
  221,  776,  777,  519,  574,  251,  227,   50,  447,  733,
  494,  517,  159,   80,  821,  683,  562,   82,  346,  572,
  668,  338,  177,  226,   18,   18,  621,  537,  469,  481,
  495,   50,  496,   90,  385,  621,  140,   85,  555,   50,
  579,  579,  579,  288,  579,  559,  142,  621,  460,   50,
  185,  593,    1,  384,   50,    1,  184,  621,  288,  383,
  503,  381,  159,   88,  213,  604,  385,   48,   50,  384,
  157,  187,  288,  159,  535,  423,  923,  924,  511,  639,
  758,  535,   48,  186,  583,  550,  584,  159,  469,  159,
  343,  159,  137,  357,  432,  535,   48,  469,  469,  177,
  734,    1,  224,   50,  874,  291,  563,  551,  782,  783,
  560,  140,  159,  385,  578,   50,  738,  184,   50,   50,
  383,  142,  288,  288,  357,  467,  421,  592,  259,  657,
  220,  346,  287,  380,  658,  381,  154,  821,  817,  324,
   69,  352,  753,  382,  318,  469,  873,  742,  432,  571,
  743,  318,  745,  747,  748,  581,   50,  608,  370,  129,
  783,  219,  810,  817,  159,  159,  355,  159,  775,  140,
  140,  474,  778,  159,  385,  685,  331,  331,   50,  142,
  142,  854,  202,  341,  947,  129,  140,  641,  700,  377,
  647,   69,   69,  704,  301,  302,  142,  257,  744,   50,
  739,    1,  528,  746,   50,  711,  713,  362,  519,  801,
  209,  387,  953,  346,  572,  385,  357,  357,  185,  170,
  675,  731,  137,  281,  440,  387,  275,  729,    1,  171,
  172,  173,  174,  175,  176,  730,  202,  686,  579,  688,
  559,  579,   50,  579,  579,  579,  288,  466,  697,  129,
  699,  386,    1,  535,  159,  210,  284,  557,  385,  702,
    1,  376,  701,  385,  756,  757,  436,  416,   50,  220,
   48,  550,  288,  129,  550,    1,  440,    5,  403,  853,
  855,  356,  363,  287,  357,  184,  104,  279,  453,    1,
  420,  287,  357,  551,  284,  486,  551,  468,  612,  404,
  219,  479,  465,  417,  104,  560,  287,  380,  440,  381,
  485,  487,  292,  860,  685,  861,  414,  382,  614,   50,
  287,  790,  556,  288,    1,  797,  417,  467,  613,  615,
  423,  388,  469,  423,  417,  346,    1,  426,  725,    1,
    1,  728,  876,  878,  526,  527,  368,   48,  284,  516,
  275,  159,  159,  555,  417,  521,  427,  363,  159,  415,
  649,  920,  670,  671,  922,  469,  140,  857,  428,  895,
  287,  287,  469,  704,  915,  257,  142,    1,  469,  429,
  784,  647,  663,  519,  430,  402,  537,  257,  431,  555,
   74,  469,  432,  469,  446,  469,  464,  588,  181,    1,
  526,  527,  346,  422,  579,  480,  579,  469,  804,  806,
  484,  367,  340,  159,  468,   44,  812,  815,  819,  822,
    1,  504,  825,  469,  826,    1,  607,  204,  205,  206,
  507,  833,    2,  835,    3,    4,  259,  260,    6,  929,
  931,   53,  508,  135,  846,  156,  160,  163,  915,  449,
  450,  167,  864,  865,  866,  469,  895,  902,  900,  275,
  259,  260,  261,    1,  509,  891,  847,  449,  450,  451,
  658,  282,  346,  510,  661,  518,  915,  449,  664,  305,
  522,  317,  356,  669,  212,   53,  879,  880,  227,    1,
  164,  166,  159,   53,  287,  681,  159,  767,  524,  769,
  771,  519,  773,  363,  519,  465,  370,  377,  376,  591,
  596,  389,   40,   41,   42,  389,  376,  875,  877,  376,
  287,  376,  275,  597,  599,  882,  884,  886,  121,  121,
  121,  490,  491,  492,  598,  376,  600,  609,  376,  389,
    1,  610,  892,  893,  894,  806,  611,  415,  628,  804,
  629,  417,  654,  655,  665,  666,  181,  934,  935,  790,
  667,  672,  904,  905,  691,  907,  376,  846,  682,  911,
  846,  287,  326,  329,  680,  684,  698,  707,  519,  708,
  715,  291,  393,  394,  395,  716,  718,  724,  736,  847,
  726,  469,  847,  555,  741,   53,  749,  754,  925,  755,
  387,  764,  762,  765,  772,  795,  519,  787,  799,  800,
  824,  926,  827,  927,  928,  930,  832,  763,  126,   12,
   13,   14,   15,   16,   17,   18,   19,  838,  841,  555,
  939,  894,  373,  893,  374,  524,  288,  469,  436,  851,
  863,  940,  181,  941,  942,  852,  469,  469,  858,  398,
  870,  401,  868,  469,  871,  757,  889,  212,  227,  872,
  896,  897,   53,  899,  949,  898,  950,  900,  524,  901,
  903,  902,  802,  906,  908,  524,  468,  919,  951,  932,
  880,  524,  879,  933,  938,  305,  469,  943,  944,  946,
  317,  133,  948,  469,  524,  525,  524,  487,  524,  469,
  493,  126,   12,   13,   14,   15,   16,   17,   18,   19,
  147,   74,  469,  346,  469,  268,  469,  421,  486,  492,
  102,  380,  345,   57,  397,  119,  524,  254,  315,   66,
  355,   94,  389,  270,  254,  703,  839,  255,  330,  709,
  181,  523,  796,  774,  469,  488,  123,  123,  123,  123,
  123,  123,  123,  123,  123,  498,  937,  439,  524,  642,
  123,  123,  123,  389,  732,  373,  502,  788,  506,  147,
  643,  816,  376,  376,  147,  813,  469,  823,  498,  514,
  515,  820,  126,   12,   13,   14,   15,   16,   17,   18,
   19,  885,  883,  156,  735,  789,  268,  269,  373,  750,
  862,  373,  842,  373,  650,  373,  373,  271,  272,  373,
  952,  274,  438,  442,  443,  441,  737,  181,  444,  740,
  577,  656,  869,  373,  373,  890,  373,  373,  373,  373,
  662,  840,  694,  147,  803,  147,  312,  489,  618,  620,
  372,  602,  500,  601,    0,  212,  212,    0,    0,    0,
    0,    0,    0,    0,  605,    0,  373,    0,  373,    0,
  373,    0,    0,    0,    0,    0,    0,    0,  616,    0,
  617,    0,  619,  372,    0,    0,  372,    0,  372,    0,
  372,  372,    0,    0,  372,    0,    0,    0,  373,    0,
  373,    0,    0,  374,  524,    0,  218,    0,  372,  372,
    0,  372,  372,  372,  372,    0,    0,    0,    0,    0,
    0,    0,  469,    0,    0,    0,    0,    0,    0,    0,
    0,   53,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  372,  218,  372,    0,  372,    0,    0,    0,    0,
  524,  282,   53,    0,    0,  687,  690,    0,  693,  524,
  524,    0,    0,    0,  696,    0,    0,    0,  469,    0,
    0,    0,    0,  372,    0,  372,    0,  469,  469,  147,
    0,    0,   53,   53,    0,    0,    0,  147,    0,    0,
    0,    0,    0,    0,    0,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,    0,  147,  147,  147,  147,
  147,  147,    0,    0,    0,    0,  147,    0,    0,    0,
  147,  147,  147,  147,  147,  147,    0,   50,    0,   49,
    0,  191,  373,    0,  373,    0,  373,  133,    0,    0,
    0,    0,  373,    0,  373,  751,    0,    0,    0,  373,
  373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
    0,  373,  373,  373,  373,  373,  373,    0,    0,    0,
    0,  373,  373,  373,    0,  373,  373,  373,  373,  373,
  373,    0,   47,    0,    0,    0,  134,    0,    0,  373,
  373,   53,  373,  373,  373,  373,  373,  373,    0,    0,
    0,  373,  373,  373,    0,    0,    0,  372,    0,  372,
    0,  372,    0,    0,   44,    0,    0,  372,    0,  372,
    0,    0,    0,    0,  372,  372,  372,  372,  372,  372,
  372,  372,  372,  372,  372,    0,  372,  372,  372,  372,
  372,  372,  829,  831,    0,    0,  372,  372,  372,  834,
  372,  372,  372,  372,  372,  372,  362,    0,    0,    0,
  403,    0,    0,  403,  372,  372,    0,  372,  372,  372,
  372,  372,  372,    0,    0,    0,  372,  372,  372,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  362,
    0,    0,  362,    0,  362,    0,  362,  362,    0,    0,
  362,    0,  362,    0,  751,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  362,  362,    0,  362,  362,  362,
  362,    0,  403,  723,  403,    0,    0,    0,    0,    0,
  469,  263,   12,   13,   14,   15,   16,   17,   18,   19,
  264,    0,  265,  266,  267,  268,  269,  270,    1,  362,
    0,  362,    0,    0,    0,    0,  271,  272,  273,    0,
  274,    0,    0,  469,    0,    0,  469,    0,  469,    0,
  469,  469,    0,    0,  469,    0,  469,    0,    0,  362,
  190,  362,  128,  910,    0,    0,    0,  912,  469,  469,
    0,  469,    0,  469,  469,    0,  129,    0,    0,    0,
    0,    0,    0,  547,    0,  130,    0,    0,   34,   35,
   36,   37,   38,   39,    0,    0,    0,   40,   41,   42,
    0,  469,    0,  469,    0,  469,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  547,    0,    0,  547,
    0,  547,    0,  547,  547,    0,    0,  547,    0,  547,
    0,    0,    0,  469,    0,  469,    0,    0,    0,    0,
    0,  547,  547,    0,  547,    0,  547,  547,    0,    0,
    0,    0,    0,    0,  403,  403,  403,  403,  403,  403,
  403,  403,  403,    0,    0,    0,    0,    0,  403,  403,
    0,    0,    0,    0,  547,  403,  547,    0,  547,  403,
  403,    0,    0,  403,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  362,    0,  362,    0,  362,    0,    0,
    0,    0,    0,  362,    0,  362,  547,    0,  547,    0,
    0,  362,  362,  362,  362,  362,  362,  362,  362,  362,
  362,    0,  362,  362,  362,  362,  362,  362,    0,    0,
    0,    0,  362,  362,  362,    0,  362,  362,  362,  362,
  362,  362,    0,    0,    0,    0,    0,    0,    0,    0,
  362,  362,    0,  362,  362,  362,  362,  362,  362,    0,
    0,    0,  362,  362,  362,    0,    0,  469,    0,  469,
    0,  469,    0,    0,    0,    0,    0,  469,    0,  469,
    0,    0,    0,    0,    0,  469,  469,  469,  469,  469,
  469,  469,  469,  469,  469,    0,  469,  469,  469,  469,
  469,  469,    0,    0,    0,    0,  469,    0,  469,    0,
  469,  469,  469,  469,  469,  469,   48,    0,    0,    0,
    0,    0,    0,    0,  469,  469,    0,  469,  469,  469,
  469,  469,  469,    0,    0,    0,  469,  469,  469,    0,
  547,    0,  547,    0,  547,    0,    0,    0,    0,    0,
  547,    0,  547,    0,    0,    0,    0,    0,  547,  547,
  547,  547,  547,  547,  547,  547,  547,  547,    0,  547,
  547,  547,  547,  547,  547,    0,    0,  549,    0,  547,
  540,  547,    0,  547,  547,  547,  547,  547,  547,    0,
    0,    0,    0,   48,    0,    0,    0,  547,  547,    0,
  547,  547,  547,  547,  547,  547,    0,    0,    0,  547,
  547,  547,    0,  540,    0,    0,  540,    0,  540,    0,
  540,  540,    0,    0,  540,    0,  540,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  540,  540,
    0,  540,    0,  540,  540,    0,    0,    0,    0,    0,
  376,    0,  496,  241,  558,    0,    0,  241,  376,    0,
    0,  376,    0,  376,    0,    0,    0,    0,    0,    0,
    0,  540,    0,  540,    0,  540,    0,  376,    0,    0,
  376,  241,    0,    0,    0,  496,    0,    0,  496,    0,
  496,    0,  496,  496,    0,    0,  496,    0,    0,    0,
    0,    0,    0,    0,    0,  540,    0,    0,  376,    0,
  496,  496,  241,  496,    0,  496,  496,    0,    0,  548,
    0,    0,    0,    0,    0,  415,    0,   11,   12,   13,
   14,   15,   16,   17,   18,   19,   20,    0,   21,   22,
   23,   24,   25,   26,    0,  496,    0,  496,   27,    0,
    0,    0,   28,   29,   30,   31,   32,  533,  529,    0,
    0,  415,    0,  415,    0,  415,  415,    0,    0,  415,
    0,  415,    0,    0,    0,  496,    0,  496,    0,    0,
    0,    0,    0,  415,  415,    0,  529,    0,  529,  415,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  126,   12,   13,   14,   15,   16,
   17,   18,   19,    0,    0,    0,  415,    0,   24,   25,
  415,    0,    0,    0,    0,   27,    0,    0,    0,   28,
   29,    0,    0,   32,    0,    0,    0,  540,    0,  540,
    0,  540,    0,    0,    0,    0,    0,  540,  415,  540,
  415,    0,    0,    0,    0,  540,  540,  540,  540,  540,
  540,  540,  540,  540,  540,    0,  540,  540,  540,  540,
  540,  540,    0,    0,  241,    0,  540,    0,  540,    0,
  540,  540,  540,  540,  540,  540,  216,    0,    0,    0,
    0,    0,    0,    0,  540,  540,    0,  540,  540,  540,
  540,  540,  540,    0,    0,  241,  540,  540,  540,  496,
    0,  496,    0,  496,  376,  376,    0,    0,    0,  496,
    0,  496,    0,    0,    0,    0,    0,  496,  496,  496,
  496,  496,  496,  496,  496,  496,  496,    0,  496,  496,
  496,  496,  496,  496,    0,  216,    0,  216,  496,    0,
  496,    0,  496,  496,  496,  496,  496,  496,  212,    0,
    0,    0,    0,    0,    0,    0,  496,  496,    0,  496,
  496,  496,  496,  496,  496,    0,    0,    0,  496,  496,
  496,    0,  415,    0,  415,    0,  415,    0,    0,    0,
    0,    0,  415,    0,  415,    0,    0,    0,    0,    0,
  415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
    0,  415,  415,  415,  415,  415,  415,  212,    0,  212,
    0,  415,  416,    0,    0,  415,  415,  415,  415,  415,
  415,    0,    0,    0,  326,    0,    0,    0,    0,  415,
  415,    0,  415,  415,  415,  415,  415,  415,    0,    0,
    0,  415,  415,  415,    0,  469,    0,    0,  416,    0,
  416,    0,  416,  416,    0,    0,  416,    0,  376,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  416,  416,    0,  469,    0,  469,  416,    0,    0,    0,
    0,    0,    0,    0,  420,  326,    0,  216,  216,  216,
  216,  216,  216,  216,  216,  216,    0,    0,    0,    0,
    0,  216,  216,  416,    0,    0,    0,  416,  216,  216,
    0,    0,  216,  216,    0,    0,  216,  524,    0,    0,
  420,    0,  420,    0,  420,  420,    0,    0,  420,    0,
  420,    0,    0,    0,    0,  416,    0,  416,    0,    0,
    0,    0,  420,  420,    0,  524,    0,  524,  420,    0,
    0,    0,    0,    0,    0,    0,    0,  265,    0,  212,
  212,  212,  212,  212,  212,  212,  212,  212,    0,    0,
    0,    0,    0,  212,  212,  420,    0,    0,    0,  420,
  212,    0,    0,    0,  212,  212,    0,    0,  212,    0,
  522,    0,    0,  265,    0,  265,    0,  265,  265,    0,
    0,  265,    0,  265,    0,    0,    0,  420,    0,  420,
    0,    0,    0,    0,    0,  265,  265,  378,  522,    0,
  522,  265,    0,    0,  524,  378,    0,    0,  378,    0,
  378,    0,    0,    0,    0,  326,  326,  326,  326,  326,
  326,  326,  326,  326,    0,  524,    0,  378,  265,  326,
  326,    0,  265,    0,    0,    0,  326,    0,    0,    0,
  326,  326,    0,    0,  326,    0,    0,    0,    0,  416,
    0,  416,    0,  416,    0,  378,    0,    0,    0,  416,
  265,  416,  265,    0,    0,    0,    0,  416,  416,  416,
  416,  416,  416,  416,  416,  416,  416,    0,  416,  416,
  416,  416,  416,  416,    0,    0,    0,  524,  416,    0,
    0,    0,  416,  416,  416,  416,  416,  416,    0,    0,
    0,    0,    0,    0,    0,    0,  416,  416,    0,  416,
  416,  416,  416,  416,  416,    0,    0,    0,  416,  416,
  416,  420,    0,  420,    0,  420,    0,    0,    0,    0,
    0,  420,    0,  420,    0,    0,    0,    0,    0,  420,
  420,  420,  420,  420,  420,  420,  420,  420,  420,    0,
  420,  420,  420,  420,  420,  420,    0,    0,    0,    0,
  420,    0,    0,    0,  420,  420,  420,  420,  420,  420,
    0,    0,    0,    0,    0,    0,    0,    0,  420,  420,
  434,  420,  420,  420,  420,  420,  420,    0,    0,    0,
  420,  420,  420,    0,  265,    0,  265,    0,  265,    0,
    0,    0,    0,    0,  265,    0,  265,    0,  434,  390,
    0,    0,  265,  265,  265,  265,  265,  265,  265,  265,
  265,  265,    0,  265,  265,  265,  265,  265,  265,    0,
    0,    0,    0,  265,    0,    0,    0,  265,  265,  265,
  265,  265,  265,    0,    0,  390,    0,  390,    0,  390,
  390,  265,  265,  390,  265,  265,  265,  265,  265,  265,
    0,  378,  378,  265,  265,  265,    0,  390,  390,  524,
  390,  390,    0,  390,  918,    0,    0,    0,  524,  524,
    0,  465,  263,   12,   13,   14,   15,   16,   17,   18,
   19,  264,    0,  265,  266,  267,  268,  269,  270,    0,
    0,    0,  390,    0,  390,    0,    0,  271,  272,  273,
    0,  274,    0,    0,    0,    0,    0,  465,    0,  465,
    0,  465,  465,    0,    0,  465,    0,    0,    0,    0,
    0,    0,  390,    0,  390,    0,    0,    0,    0,  465,
  465,    0,  465,    0,    0,  465,    0,    0,    0,    0,
    0,    0,    0,    0,  467,  263,   12,   13,   14,   15,
   16,   17,   18,   19,  264,    0,  265,  266,  267,  268,
  269,  270,  808,  809,  465,    0,  465,    0,    0,    0,
  271,  272,  273,    0,  274,    0,    0,    0,    0,    0,
  467,    0,  467,    0,  467,  467,    0,    0,  467,    0,
    0,  434,    0,    0,  465,    0,  465,    0,    0,    0,
    0,  434,  467,  467,    0,  467,    0,    0,  467,  434,
  434,  434,  434,  434,  434,  434,  434,  434,  434,    0,
  434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
    0,    0,    0,  434,  434,  434,  434,  467,  434,  467,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  390,    0,  390,    0,
  390,    0,    0,    0,    0,    0,  390,  467,  390,  467,
    0,    0,    0,    0,  390,  390,  390,  390,  390,  390,
  390,  390,  390,  390,    0,  390,  390,  390,  390,  390,
  390,    0,    0,    0,    0,  390,    0,  390,    0,  390,
  390,  390,  390,  390,  390,    0,    0,    0,    0,    0,
    0,    0,    0,  390,  390,    0,  390,  390,  390,  390,
  390,  390,    0,    0,    0,  390,  390,  390,  465,    0,
  465,    0,  465,    0,    0,    0,    0,    0,  465,    0,
  465,    0,    0,    0,    0,    0,  465,  465,  465,  465,
  465,  465,  465,  465,  465,  465,    0,  465,  465,  465,
  465,  465,  465,    0,    0,    0,    0,  465,    0,  465,
    0,  465,  465,  465,  465,  465,  465,    0,    0,    0,
    0,    0,    0,    0,    0,  465,  465,    0,  465,  465,
  465,  465,  465,  465,    0,    0,    0,  465,  465,  465,
    0,  467,    0,  467,    0,  467,    0,    0,    0,    0,
    0,  467,    0,  467,    0,    0,  466,    0,    0,  467,
  467,  467,  467,  467,  467,  467,  467,  467,  467,    0,
  467,  467,  467,  467,  467,  467,    0,    0,    0,    0,
  467,    0,  467,    0,  467,  467,  467,  467,  467,  467,
    0,    0,  466,    0,  466,    0,  466,  466,  467,  467,
  466,  467,  467,  467,  467,  467,  467,    0,    0,    0,
  467,  467,  467,    0,  466,  466,    0,  466,    0,    0,
  466,    0,    0,    0,    0,    0,    0,    0,  450,  263,
   12,   13,   14,   15,   16,   17,   18,   19,  264,    0,
  265,  266,  267,  268,  269,  270,    0,    0,    0,  466,
    0,  466,    0,    0,  271,  272,  273,    0,  274,    0,
    0,    0,    0,    0,  450,    0,  450,    0,  450,  450,
    0,    0,  450,    0,  450,    0,    0,    0,    0,  466,
    0,  466,    0,    0,  416,    0,  450,  450,    0,    0,
    0,    0,  450,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  469,    0,  450,
  170,  450,  416,  450,  170,    0,    0,    0,  416,    0,
  376,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  416,    0,  469,    0,  469,  170,    0,
    0,  450,    0,  450,    0,    0,    0,    0,    0,    0,
    0,   50,    0,   49,    0,  191,  328,    0,    0,    0,
    0,  133,    0,    0,    0,  416,    0,    0,    0,  416,
    0,    0,    0,    0,    0,  263,   12,   13,   14,   15,
   16,   17,   18,   19,  264,    0,  265,  266,  267,  268,
  269,  270,  808,  809,  879,  880,    0,  416,    0,  416,
  271,  272,  273,  466,  274,  466,   47,  466,    0,    0,
  134,    0,    0,  466,    0,  466,    0,    0,    0,    0,
    0,  466,  466,  466,  466,  466,  466,  466,  466,  466,
  466,    0,  466,  466,  466,  466,  466,  466,   44,    0,
    0,    0,  466,    0,  466,    0,  466,  466,  466,  466,
  466,  466,    0,    0,    0,    0,    0,    0,    0,    0,
  466,  466,    0,  466,  466,  466,  466,  466,  466,    0,
    0,    0,  466,  466,  466,  450,    0,  450,    0,  450,
    0,    0,    0,    0,    0,  450,    0,  450,    0,    0,
    0,    0,    0,  450,  450,  450,  450,  450,  450,  450,
  450,  450,  450,   48,  450,  450,  450,  450,  450,  450,
    0,    0,    0,    0,  450,    0,  450,    0,  450,  450,
  450,  450,  450,    0,    0,    0,    0,    0,    0,    0,
    0,  170,    0,  416,    0,  450,  450,  450,  450,  450,
  450,  416,    0,    0,  450,  450,  450,    0,    0,  416,
  416,  416,  416,  416,  416,  416,  416,  416,  416,    0,
  416,  416,  170,  416,  416,  416,    0,  461,    0,    0,
  416,    0,    1,    0,  416,  416,  416,  416,  416,  416,
    0,    0,    0,    0,    0,    0,    0,    0,  469,  416,
    0,  416,  416,  416,  416,  416,  416,    0,    0,    0,
  416,  416,  416,  461,  190,  461,  128,  461,  461,    0,
    0,  461,    0,  461,    0,    0,    0,    0,    0,    0,
  129,    0,    0,    0,    0,  461,  461,    0,    0,  130,
    0,  461,   34,   35,   36,   37,   38,   39,    0,  417,
    0,   40,   41,   42,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  461,    0,
  461,    0,  461,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  417,    0,  417,    0,  417,
  417,    0,    0,  417,    0,  417,    0,    0,    0,    0,
  461,    0,  461,    0,    0,    0,    0,  417,  417,    0,
    0,    0,    0,  417,    0,    0,    0,    0,    0,    0,
    0,    0,  418,    0,  126,   12,   13,   14,   15,   16,
   17,   18,   19,    0,    0,    0,    0,    0,   24,   25,
  417,    0,    0,    0,  417,   27,    0,    0,    0,   28,
   29,    0,    0,   32,    0,    0,    0,    0,  418,    0,
  418,    0,  418,  418,    0,    0,  418,    0,  418,    0,
    0,    0,  417,    0,  417,    0,    0,    0,    0,    0,
  418,  418,    0,    0,    0,    0,  418,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  376,    0,  418,  389,    0,    0,  418,  389,  376,
    0,    0,  376,    0,  376,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  461,    0,  461,    0,  461,  469,
    0,  376,  389,    0,  461,  418,  461,  418,    0,    0,
    0,    0,  461,  461,  461,  461,  461,  461,  461,  461,
  461,  461,    0,  461,  461,  461,  461,  461,  461,  376,
    0,    0,    0,  461,    0,  461,    0,  461,  461,  461,
  461,  461,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  461,  461,  461,  461,  461,  461,
    0,  469,    0,  461,  461,  461,  417,    0,  417,    0,
  417,    0,    0,    0,    0,    0,  417,    0,  417,    0,
    0,    0,    0,    0,  417,  417,  417,  417,  417,  417,
  417,  417,  417,  417,    0,  417,  417,  417,  417,  417,
  417,    0,    0,    0,    0,  417,    0,    0,    0,  417,
  417,  417,  417,  417,  417,  214,    0,    0,    0,    0,
    0,    0,    0,  417,    0,    0,  417,  417,  417,  417,
  417,  417,    0,    0,    0,  417,  417,  417,   50,  418,
   49,  418,   43,  418,    0,    0,    0,    0,   45,  418,
    0,  418,    0,    0,    0,    0,    0,  418,  418,  418,
  418,  418,  418,  418,  418,  418,  418,    0,  418,  418,
  418,  418,  418,  418,  214,  427,  214,    0,  418,    0,
    0,    0,  418,  418,  418,  418,  418,  418,    0,    0,
    0,    0,    0,   47,    0,  389,  418,   46,    0,  418,
  418,  418,  418,  418,  418,    0,    0,    0,  418,  418,
  418,  427,    0,  427,    0,    0,  427,    0,    0,  427,
    0,  427,    0,    0,    0,   44,  389,    0,    0,    0,
    0,    0,    0,  427,  427,  376,  376,    0,    0,  427,
    0,    0,    0,  469,    0,    0,    0,  371,    0,    0,
    0,    0,  469,  469,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  427,    0,    0,    0,
  427,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  371,    0,  371,    0,  371,  371,    0,
    0,  371,    0,    0,    0,    0,    0,    0,  427,    0,
  427,    0,    0,    0,    0,  371,  371,    0,    0,    0,
    0,  371,  214,    0,    0,    0,    0,    0,    0,    0,
  425,    0,    0,    0,    0,    0,  214,  214,  214,  214,
  214,  214,  214,  214,  214,    0,    0,    0,    0,    0,
  214,  214,  371,    0,    0,    0,    0,  214,    0,    0,
    0,  214,  214,    0,    0,  214,  425,    0,  425,    1,
    0,  425,    0,    0,  425,    0,  425,    0,    0,    0,
  371,    0,  371,    0,    0,    0,    0,    0,  425,  425,
    0,    0,    0,    0,  425,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  129,    0,    0,
    0,  425,    0,    0,    0,  425,    0,  340,    0,   34,
   35,   36,   37,   38,   39,    0,    0,    0,   40,   41,
   42,    0,  427,    0,  427,    0,  427,    0,    0,    0,
    0,    0,  427,  425,  427,  425,    0,    0,    0,    0,
  427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
    0,  427,  427,  427,  427,  427,  427,    0,    0,    0,
    0,  427,    0,    0,    0,  427,  427,  427,  427,  427,
  427,    0,    0,    0,    0,    0,    0,    0,    0,  427,
  427,    0,  427,  427,  427,  427,  427,  427,    0,    0,
    0,  427,  427,  427,  371,    0,  371,    0,  371,    0,
    0,    0,    0,    0,  371,    0,  371,    0,    0,    0,
    0,    0,  371,  371,  371,  371,  371,  371,  371,  371,
  371,  371,    0,  371,  371,  371,  371,  371,  371,    0,
    0,    0,    0,  371,    0,  371,    0,  371,  371,  371,
  371,  371,  371,    0,    0,    0,    0,    0,    0,    0,
    0,  371,  371,    0,  371,  371,  371,  371,  371,  371,
    0,    0,    0,  371,  371,  371,    0,  425,    0,  425,
    0,  425,    0,    0,    0,    0,    0,  425,    0,  425,
    0,  324,  370,    0,    0,  425,  425,  425,  425,  425,
  425,  425,  425,  425,  425,    0,  425,  425,  425,  425,
  425,  425,    0,    0,    0,    0,  425,    0,    0,    0,
  425,  425,  425,  425,  425,  425,    0,    0,  370,    0,
  370,    0,  370,  370,  425,  425,  370,  425,  425,  425,
  425,  425,  425,    0,    0,    0,  425,  425,  425,    0,
  370,  370,  324,    0,    0,    0,  370,    0,    0,    0,
    0,    0,    0,    0,  454,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  370,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  454,    0,  454,    0,    0,  454,    0,    0,  454,    0,
    0,    0,    0,    0,    0,  370,    0,  370,    0,    0,
    0,    0,  454,  454,    0,  454,    0,    0,  454,    0,
    0,    0,    0,    0,    0,    0,    0,  453,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  454,    0,  454,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  453,    0,  453,    0,    0,  453,    0,
    0,  453,    0,    0,    0,    0,    0,    0,    0,  454,
    0,    0,    0,    0,    0,  453,  453,    0,  453,    0,
    0,  453,  324,  324,  324,  324,  324,  324,  324,  324,
  324,    0,    0,    0,    0,    0,  324,  324,    0,    0,
    0,    0,    0,  324,    0,    0,    0,  324,  324,    0,
  453,  324,  453,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  370,
    0,  370,    0,  370,    0,    0,    0,    0,    0,  370,
    0,  370,  453,    0,    0,    0,    0,  370,  370,  370,
  370,  370,  370,  370,  370,  370,  370,    0,  370,  370,
  370,  370,  370,  370,    0,    0,    0,    0,  370,    0,
  370,    0,  370,  370,  370,  370,  370,  370,    0,    0,
    0,    0,    0,    0,    0,    0,  370,  370,    0,  370,
  370,  370,  370,  370,  370,    0,    0,    0,  370,  370,
  370,  454,    0,  454,    0,  454,    0,    0,    0,    0,
    0,  454,    0,  454,    0,    0,    0,    0,    0,  454,
  454,  454,  454,  454,  454,  454,  454,  454,  454,  213,
  454,  454,  454,  454,  454,  454,    0,    0,    0,    0,
  454,    0,  454,    0,  454,  454,  454,  454,  454,    0,
    0,    0,    0,    0,    0,    0,  438,    0,  454,  454,
  438,  454,  454,  454,  454,  454,  454,    0,    0,    0,
  454,  454,  454,    0,  453,    0,  453,    0,  453,    0,
    0,    0,    0,    0,  453,    0,  453,    0,  213,  430,
  213,    0,  453,  453,  453,  453,  453,  453,  453,  453,
  453,  453,    0,  453,  453,  453,  453,  453,  453,    0,
    0,    0,    0,  453,    0,  453,    0,  453,  453,  453,
  453,  453,    0,    0,    0,  430,    0,  430,    0,  430,
  430,  453,  453,  430,  453,  453,  453,  453,  453,  453,
    0,    0,    0,  453,  453,  453,    0,  430,  430,    0,
    0,    0,    0,  430,    0,    0,    0,    0,    0,    0,
    0,  431,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  430,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  431,    0,  431,
    0,  431,  431,    0,    0,  431,    0,    0,    0,    0,
    0,    0,  430,    0,  430,    0,    0,    0,    0,  431,
  431,    0,    0,    0,    0,  431,  213,    0,    0,    0,
    0,    0,  406,    0,    0,    0,    0,    0,    0,    0,
  213,  213,  213,  213,  213,  213,  213,  213,  213,    0,
    0,    0,    0,    0,  213,  213,  431,    0,    0,    0,
    0,  213,    0,    0,    0,  213,  213,    0,    0,  213,
  406,    0,    0,  406,    0,    0,  406,  438,  406,    0,
    0,    0,    0,    0,  431,    0,  431,  438,    0,    0,
  406,  406,    0,    0,    0,  438,  438,  438,  438,  438,
  438,  438,  438,  438,  438,    0,  438,  438,  438,  438,
  438,  438,  438,  438,  438,  438,    0,    0,    0,  438,
  438,  438,  438,  406,  438,    0,    0,  406,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  430,    0,  430,    0,
  430,    0,    0,    0,    0,  406,  430,  406,  430,    0,
    0,    0,    0,    0,  430,  430,  430,  430,  430,  430,
  430,  430,  430,  430,    0,  430,  430,  430,  430,  430,
  430,    0,    0,    0,   48,  430,    0,    0,    0,  430,
  430,  430,  430,  430,  430,    0,    0,    0,    0,    0,
    0,    0,    0,  430,  430,    0,  430,  430,  430,  430,
  430,  430,    0,    0,    0,  430,  430,  430,  431,    0,
  431,    0,  431,    0,    0,    0,    0,    0,  431,    0,
  431,    0,    0,    0,    0,    0,  431,  431,  431,  431,
  431,  431,  431,  431,  431,  431,    0,  431,  431,  431,
  431,  431,  431,    0,    0,    0,    0,  431,    0,    0,
    0,  431,  431,  431,  431,  431,  431,    0,    0,    0,
    0,    0,    0,    0,    0,  431,  431,    0,  431,  431,
  431,  431,  431,  431,    0,    0,    0,  431,  431,  431,
    0,  406,    0,  406,    0,    0,    0,    0,    0,  406,
    0,  406,    0,    0,    0,    0,    0,  406,  406,  406,
  406,  406,  406,  406,  406,  406,  406,    0,  406,  406,
    0,  406,  406,  406,  408,    0,    0,    0,  406,    0,
    0,    0,  406,  406,  406,  406,  406,  406,    0,    0,
    0,    0,    0,    0,    0,    0,  406,  406,    0,  406,
  406,  406,  406,  406,  406,    0,    0,    0,  406,  406,
  406,    0,  408,    0,    0,  408,    0,    0,  408,    0,
  408,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  408,  408,    0,    0,    0,  548,    0,    0,
    0,    0,    0,    0,  411,   11,   12,   13,   14,   15,
   16,   17,   18,   19,   20,    0,   21,   22,   23,   24,
   25,   26,    0,    0,    0,  408,   27,    0,    0,  408,
   28,   29,   30,   31,   32,  533,    0,    0,    0,    0,
    0,    0,  411,    0,    0,  411,    0,    0,  411,    0,
  411,    0,    0,    0,    0,    0,    0,  408,    0,  408,
    0,  134,  411,  411,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  507,  411,    0,    0,    0,  411,
    0,  507,    0,    0,    0,    0,    0,  507,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  155,    0,
  134,    0,  507,    0,  507,  134,    0,  411,    0,  411,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  507,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  155,    0,    0,
    0,    0,  155,    0,  134,    0,  134,    0,    0,    0,
    0,    0,    0,  408,    0,  408,    0,    0,    0,    0,
    0,  408,    0,  408,    0,    0,    0,    0,    0,  408,
  408,  408,  408,  408,  408,  408,  408,  408,  408,    0,
  408,  408,    0,  408,  408,  408,    0,    0,    0,    0,
  408,    0,    0,  202,  408,  408,  408,  408,  408,  408,
    0,  155,    0,  155,    0,    0,    0,    0,  408,  408,
    0,  408,  408,  408,  408,  408,  408,    0,    0,    0,
  408,  408,  408,  411,    0,  411,    0,    0,    0,    0,
    0,  411,    0,  411,    0,    0,    0,    0,    0,  411,
  411,  411,  411,  411,  411,  411,  411,  411,  411,    0,
  411,  411,  202,  411,  411,  411,    0,  202,    0,    0,
  411,    0,    0,    0,  411,  411,  411,  411,  411,  411,
  158,    0,    0,    0,    0,    0,    0,    0,  411,  411,
  134,  411,  411,  411,  411,  411,  411,    0,  134,    0,
  411,  411,  411,    0,    0,    0,  134,  134,  134,  134,
  134,  134,  134,  134,  134,  134,    0,  134,  134,  134,
  134,  134,  134,    0,  158,    0,  202,  134,  202,    0,
    0,  134,  134,  134,  134,  134,  134,    0,    0,  158,
    0,    0,    0,    0,  158,  507,  507,  155,    0,    0,
    0,    0,    0,    0,    0,  155,    0,    0,    0,    0,
    0,    0,    0,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,    0,  155,  155,  155,  155,  155,  155,
    0,    0,    0,    0,  155,    0,    0,    0,  155,  155,
  155,  155,  155,  155,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  158,  376,    0,    0,  243,
    0,  376,    0,  243,  376,    0,    0,  376,    0,  376,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  376,    0,    0,  376,  243,    0,    0,
    0,    0,    0,   50,    0,   49,    0,  191,  695,    0,
    0,    0,    0,  133,    0,    0,    0,    0,    0,    0,
    0,    0,  202,    0,  376,    0,  384,   50,  376,   49,
  202,  405,  406,    0,    0,    0,    0,   45,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  202,    0,  202,
  202,  202,  202,  202,  202,   48,  376,    0,   47,  202,
    0,    0,  134,  202,  202,  202,  202,  202,  202,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  469,    0,   47,  416,    0,    0,  407,  416,  416,    0,
   44,  416,    0,  376,    0,    0,    0,    0,    0,  158,
    0,    0,    0,    0,    0,    0,  469,  158,  469,    0,
  469,  416,    0,    0,   44,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,    0,  158,  158,  158,  158,
  158,  158,    0,    0,    0,    0,  158,    0,  469,    0,
  158,  158,  158,  158,  158,   50,    0,   49,    0,  216,
    0,    0,    0,    0,    0,   45,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  469,    0,    0,   48,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  243,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  217,    0,    0,    0,   46,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   50,    0,
   49,  243,   43,    0,    1,    0,    0,    0,   45,    0,
  376,  376,   44,    0,  350,    0,    0,    0,  376,    0,
    0,    0,    0,    0,    0,    0,   48,    0,    1,    0,
  376,  376,  376,  376,  376,  376,  190,    0,  128,  376,
  376,  376,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  129,   47,    0,    0,    0,   46,    0,  287,
  380,  130,  381,    0,   34,   35,   36,   37,   38,   39,
  382,    0,    0,   40,   41,   42,  129,    0,    0,    0,
    0,    0,    0,    0,  416,   44,    0,  350,   34,   35,
   36,   37,   38,   39,    0,    0,    0,   40,   41,   42,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  416,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  469,    0,    0,    0,    0,    0,    0,    0,
    0,  469,  416,    0,    0,    0,    1,    0,    0,    2,
    0,    3,    4,    5,    0,    6,    0,    0,    0,    7,
    8,    9,   10,    0,   11,   12,   13,   14,   15,   16,
   17,   18,   19,   20,    0,   21,   22,   23,   24,   25,
   26,  673,  674,  782,  783,   27,    0,    0,    0,   28,
   29,   30,   31,   32,   33,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   34,   35,   36,   37,
   38,   39,    0,    0,    0,   40,   41,   42,    0,    1,
    0,    0,    2,    0,    3,    4,    5,    0,    6,    0,
    0,    0,    7,    8,    9,   10,   48,   11,   12,   13,
   14,   15,   16,   17,   18,   19,   20,    0,   21,   22,
   23,   24,   25,   26,  673,  674,    0,    0,   27,    0,
    0,    0,   28,   29,   30,   31,   32,   33,   50,    0,
   49,    0,   43,    0,    0,    0,    0,    0,   45,   34,
   35,   36,   37,   38,   39,    0,    0,    0,   40,   41,
   42,    0,    0,    0,    0,    0,   48,  727,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  529,    0,    0,
  242,    0,    0,   47,  242,  529,    0,   46,  529,    0,
  529,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   50,    0,   49,    0,  216,  529,    0,  529,  242,    0,
   45,    0,    0,    0,    0,   44,    0,  350,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   48,    0,
    0,    0,    0,    0,    0,  529,    0,    0,    0,  242,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  217,    0,    0,    0,   46,
    0,    0,    0,    0,    0,    0,    0,  529,    0,    0,
    0,    0,   50,    0,   49,    0,   43,    0,    0,    0,
    0,    0,   45,    0,    0,    0,    0,   44,    0,  350,
    0,    0,    0,    0,    0,  710,    0,    0,    0,  548,
   48,    0,    0,    0,    0,    0,    0,   11,   12,   13,
   14,   15,   16,   17,   18,   19,   20,    0,   21,   22,
   23,   24,   25,   26,    0,    0,    0,   47,   27,    0,
    0,   46,   28,   29,   30,   31,   32,  533,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
    0,    0,    2,    0,    3,    4,    5,    0,    6,   44,
    0,    0,    7,    8,    9,   10,   48,   11,   12,   13,
   14,   15,   16,   17,   18,   19,   20,    0,   21,   22,
   23,   24,   25,   26,    0,    0,    0,    0,   27,    0,
    0,    0,   28,   29,   30,   31,   32,   33,    0,    0,
    0,  242,    0,    0,    0,    0,    0,    0,    0,   34,
   35,   36,   37,   38,   39,    0,    0,    0,   40,   41,
   42,    1,    0,    0,    2,    0,    3,    4,    5,    0,
    6,    0,  242,    0,    7,    8,    9,   10,   48,   11,
   12,   13,   14,   15,   16,   17,   18,   19,   20,  529,
   21,   22,   23,   24,   25,   26,    0,    0,  529,  529,
   27,    0,    0,    0,   28,   29,   30,   31,   32,   33,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   34,   35,   36,   37,   38,   39,    0,    0,    0,
   40,   41,   42,    1,    0,    0,    2,    0,    3,    4,
    5,    0,    6,    0,    0,    0,    7,    8,    9,   10,
   48,   11,   12,   13,   14,   15,   16,   17,   18,   19,
   20,    0,   21,   22,   23,   24,   25,   26,    0,    0,
    0,    0,   27,    0,    0,    0,   28,   29,   30,   31,
   32,   33,   50,    0,   49,    0,   43,    0,    0,    0,
    0,    0,   45,   34,   35,   36,   37,   38,   39,    0,
    0,    0,   40,   41,   42,  712,    0,    0,    0,  844,
   48,  845,    0,    0,    0,    0,    0,   11,   12,   13,
   14,   15,   16,   17,   18,   19,   20,    0,   21,   22,
   23,   24,   25,   26,    0,    0,    0,   47,   27,    0,
    0,   46,   28,   29,   30,   31,   32,  533,    0,    0,
    0,    0,    0,    0,   50,    0,   49,    0,   43,    0,
    0,    0,    0,    0,   45,    0,    0,    0,    0,   44,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   48,    0,    0,    0,    0,    0,    0,   11,
   12,   13,   14,   15,   16,   17,   18,   19,   20,    0,
   21,   22,   23,   24,   25,   26,    0,    0,    0,   47,
   27,    0,    0,   46,   28,   29,   30,   31,   32,  533,
    0,    0,    0,    0,    0,    0,   50,    0,   49,    0,
  216,    0,    0,    0,    0,    0,   45,    0,    0,    0,
    0,   44,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  844,   48,    0,    0,    0,    0,    0,
    0,   11,   12,   13,   14,   15,   16,   17,   18,   19,
   20,    0,   21,   22,   23,   24,   25,   26,    0,    0,
    0,  217,   27,    0,    0,   46,   28,   29,   30,   31,
   32,  533,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    1,    0,    0,    2,    0,    3,    4,
    5,    0,    6,   44,    0,    0,    7,    8,    9,   10,
    0,   11,   12,   13,   14,   15,   16,   17,   18,   19,
   20,    0,   21,   22,   23,   24,   25,   26,    0,    0,
    0,    0,   27,    0,    0,    0,   28,   29,   30,   31,
   32,   33,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   34,   35,   36,   37,   38,   39,    0,
    0,    0,   40,   41,   42,    1,    0,    0,    2,    0,
    3,    4,    5,    0,    6,    0,    0,    0,    7,    8,
    9,   10,    0,   11,   12,   13,   14,   15,   16,   17,
   18,   19,   20,    0,   21,   22,   23,   24,   25,   26,
    0,    0,    0,    0,   27,    0,    0,    0,   28,   29,
   30,   31,   32,   33,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   34,   35,   36,   37,   38,
   39,    0,    0,    0,   40,   41,   42,    1,    0,    0,
    2,    0,    3,    4,    5,    0,    6,    0,    0,    0,
    7,    8,    9,   10,    0,   11,   12,   13,   14,   15,
   16,   17,   18,   19,   20,    0,   21,   22,   23,   24,
   25,   26,    0,    0,    0,    0,   27,    0,    0,    0,
   28,   29,   30,   31,   32,   33,   50,    0,   49,    0,
   43,    0,    0,    0,    0,    0,   45,   34,   35,   36,
   37,   38,   39,    0,    0,    0,   40,   41,   42,    0,
    0,    0,    0,    0,   48,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   47,   50,    0,   49,   46,  191,  328,    0,    0,
    0,    0,  133,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  327,    0,    0,    0,    0,
   48,    0,    0,   44,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   50,   47,   49,    0,
  132,  134,    0,    0,    0,    0,  133,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  131,
    0,    0,    0,   50,   48,   49,    0,   43,    0,   44,
    0,    0,    0,   45,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  225,    0,    0,    0,    0,
    0,   47,    0,    0,    0,  134,    0,    0,    0,    0,
    0,    0,   50,    0,   49,    0,   43,    0,    0,    0,
    0,    0,   45,    0,    0,    0,    0,    0,   47,    0,
  226,    0,   46,   44,  225,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,
   44,    0,    0,    0,    0,    0,    0,   47,    0,  226,
    0,   46,    0,    0,    0,   11,   12,   13,   14,   15,
   16,   17,   18,   19,   20,    0,   21,   22,   23,   24,
   25,   26,    0,    0,    0,    0,   27,    0,    0,   44,
   28,   29,   30,   31,   32,   33,    0,    0,    0,    0,
    0,    0,    0,    1,    0,    0,    0,   34,   35,   36,
   37,   38,   39,    0,    0,    0,   40,   41,   42,    0,
    0,  126,   12,   13,   14,   15,   16,   17,   18,   19,
    0,    0,    0,    0,    0,  127,    0,  128,    0,    0,
    0,    0,   50,    0,   49,    0,  405,  603,    0,    0,
    0,  129,   45,    0,    0,    0,    0,    1,    0,    0,
  130,    0,    0,   34,   35,   36,   37,   38,   39,    0,
   48,    0,   40,   41,   42,  126,   12,   13,   14,   15,
   16,   17,   18,   19,    1,    0,    0,    0,    0,  127,
    0,  128,    0,    0,    0,    0,    0,   47,    0,    0,
    0,   46,    0,    0,    0,  129,    0,  409,  410,  411,
  412,    0,    0,    0,  130,    0,    0,   34,   35,   36,
   37,   38,   39,    1,    0,    0,   40,   41,   42,   44,
    0,    0,  129,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   34,   35,   36,   37,   38,   39,
    0,    0,    0,   40,   41,   42,   65,    0,   65,    0,
   65,    0,    0,    0,    0,    0,   65,    0,    0,    0,
    0,  129,    0,    0,    0,    0,    0,    0,   65,    0,
    0,    0,    0,   34,   35,   36,   37,   38,   39,    0,
    0,    0,   40,   41,   42,   50,    0,   49,    0,   43,
  211,    0,    0,    0,    0,   45,    0,    0,    0,    0,
    0,   65,    0,    0,   50,   65,   49,    0,   43,    0,
    0,    0,    0,    0,   45,    0,    0,    0,    0,    0,
    0,    0,   50,    0,   49,    0,   43,  325,    0,    0,
    0,    0,   45,   65,    0,    0,    0,    0,    0,    0,
   47,    0,    0,    0,   46,  505,    0,    0,    0,    0,
    0,    0,    0,    1,    0,    0,    0,    0,    0,   47,
    0,    0,    0,   46,    0,    0,    0,    0,    0,    0,
    0,    0,   44,    0,    0,    0,   50,   47,   49,    0,
   43,   46,    0,    0,  287,    0,   45,    0,    0,    0,
    0,   44,    0,    0,    0,  465,    0,    0,    0,  513,
   50,  129,   49,    0,   43,  689,    0,    0,    0,   44,
   45,    0,    0,   34,   35,   36,   37,   38,   39,    0,
    0,    0,   40,   41,   42,    0,   50,    0,   49,    0,
   43,   47,    0,    0,    0,   46,   45,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  692,
    0,    0,   50,    0,   49,   47,   43,  828,    0,   46,
    0,    0,   45,   44,    0,    0,    0,   65,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   47,    0,    0,    0,   46,    0,   44,    0,    0,
    0,    0,   50,    0,   49,    0,   43,  830,    0,   65,
    0,   65,   45,    0,    0,    0,    1,   47,    0,    0,
    0,   46,    0,   44,    0,   65,    0,    0,    0,    0,
    0,    0,    0,    0,   65,    1,    0,   65,   65,   65,
   65,   65,   65,    0,    0,    0,   65,   65,   65,   44,
    0,    0,    0,    1,    0,    0,    0,   47,    0,    0,
    0,   46,    0,    0,  129,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   34,   35,   36,   37,
   38,   39,    0,  129,    0,   40,   41,   42,    0,   44,
    0,    0,    0,    0,    0,   34,   35,   36,   37,   38,
   39,  129,    0,    0,   40,   41,   42,    1,    0,    0,
    0,    0,    0,   34,   35,   36,   37,   38,   39,    0,
    0,    0,   40,   41,   42,   50,    0,   49,    0,   43,
  909,    1,    0,    0,    0,   45,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   50,
    0,   49,    0,   43,    0,  129,    0,    1,    0,   45,
    0,    0,    0,    0,    0,    0,    0,   34,   35,   36,
   37,   38,   39,    0,    0,    0,   40,   41,   42,  129,
   47,    0,    0,    1,   46,    0,    0,    0,    0,    0,
    0,   34,   35,   36,   37,   38,   39,    0,    0,    0,
   40,   41,   42,   50,   47,  129,    0,   43,   46,    0,
    0,    0,   44,   45,    0,    0,    0,   34,   35,   36,
   37,   38,   39,    1,    0,    0,   40,   41,   42,    0,
    0,  129,    0,    0,    0,    0,   44,    0,    0,    0,
    0,    0,    0,   34,   35,   36,   37,   38,   39,    0,
    0,    0,   40,   41,   42,   50,    0,   49,   47,   43,
    0,    0,   46,    0,    0,   45,    0,    0,    0,  560,
    0,  129,    0,  560,    0,    0,    0,    0,    0,  560,
    0,    0,    0,   34,   35,   36,   37,   38,   39,    0,
   44,    0,   40,   41,   42,   50,    0,   49,    0,   43,
    0,    0,    0,    0,    0,   45,    0,    0,    0,    0,
   47,    0,    0,    0,   46,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  560,    0,    0,    0,  560,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  501,    0,    0,    0,    1,    0,    0,    0,
   47,    0,    0,    0,   46,    0,  560,    0,    0,    0,
    0,    0,    0,    0,    0,  376,    0,  263,  241,    0,
    1,    0,  241,  376,    0,    0,  376,    0,  376,    0,
    0,    0,  640,    0,    0,    0,    0,  263,    0,    0,
    0,    0,    0,  469,  129,  376,  241,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   34,   35,   36,   37,
   38,   39,    0,    0,    0,   40,   41,   42,  129,    0,
    0,    0,  279,  376,    1,    0,    0,  241,    0,    0,
   34,   35,   36,   37,   38,   39,    0,    0,    0,   40,
   41,   42,  279,    0,    0,    0,    0,    0,  263,    0,
    0,    0,    0,    0,    0,  469,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   48,    0,    0,    1,    0,    0,    0,
    0,    0,    0,    0,   34,   35,   36,   37,   38,   39,
  560,    0,    0,   40,   41,   42,    0,    0,    0,    0,
    0,    0,    0,  279,  260,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,
    0,    0,    0,    0,  129,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  921,  276,   34,   35,   36,   37,
   38,   39,    0,    0,    0,   40,   41,   42,    0,    0,
  560,  560,  560,  560,  560,  560,    0,    0,    0,  560,
  560,  560,    0,    0,  129,  260,    0,    0,    0,    0,
   48,    0,    0,    0,    0,    0,   34,   35,   36,   37,
   38,   39,    0,    0,    0,   40,   41,   42,    0,  241,
  263,    0,    0,    0,    0,    0,  276,    0,  263,  263,
  263,  263,  263,  263,  263,  263,  263,  263,    0,  263,
  263,  263,  263,  263,  263,    0,   48,    0,    0,  263,
  241,    0,    0,  263,  263,  263,  263,  263,  263,  376,
  376,  534,    0,    0,    0,    0,    0,  469,    0,    0,
    0,    0,    0,    0,    0,  279,  469,  469,    0,    0,
    0,    0,    0,  279,  279,  279,  279,  279,  279,  279,
  279,  279,  279,    0,  279,  279,  279,  279,  279,  279,
    0,   48,    0,    0,  279,    0,  844,  543,  279,  279,
  279,  279,  279,  279,   11,   12,   13,   14,   15,   16,
   17,   18,   19,   20,    0,   21,   22,   23,   24,   25,
   26,    0,    0,    0,    0,   27,    0,  260,    0,   28,
   29,   30,   31,   32,  533,  260,  260,  260,  260,  260,
  260,  260,  260,  260,  260,    0,  260,  260,  260,  260,
  260,  260,  575,    0,    0,    0,  260,    0,  276,    0,
  260,  260,  260,  260,  260,  260,  276,  276,  276,  276,
  276,  276,  276,  276,  276,  276,    0,  276,  276,  276,
  276,  276,  276,    0,    0,    0,    0,  276,    0,    0,
    0,  276,  276,  276,  276,  276,  276,    0,    0,    0,
    0,   11,   12,   13,   14,   15,   16,   17,   18,   19,
   20,    0,   21,   22,   23,   24,   25,   26,    0,    0,
    0,    0,   27,    0,    0,    0,   28,   29,   30,   31,
   32,  533,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   11,   12,   13,
   14,   15,   16,   17,   18,   19,   20,    0,   21,   22,
   23,   24,   25,   26,    0,    0,    0,    0,   27,    0,
    0,    0,   28,   29,   30,   31,   32,  533,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   11,   12,   13,   14,   15,   16,   17,   18,
   19,   20,    0,   21,   22,   23,   24,   25,   26,    0,
    0,    0,    0,   27,    0,    0,    0,   28,   29,   30,
   31,   32,  533,
  };
  protected static readonly short [] yyCheck = {           141,
    0,   32,    2,  133,    4,    5,    6,    7,    8,    2,
   10,   11,    2,   44,    0,  452,  454,    2,  284,  655,
   20,   21,   22,   23,   41,    0,   26,   27,    0,   41,
  364,  365,   44,  146,   36,  148,   26,   36,   41,  223,
   64,   31,   59,   43,   44,   45,  371,   47,   48,   49,
  103,   46,   52,  123,  169,   36,    0,   40,   44,   91,
  178,  183,    4,    5,   95,   62,   52,  189,  183,  358,
  359,   41,  187,    0,   44,   40,   58,    0,    3,  201,
   44,  363,    2,   41,   59,   36,    0,   59,   64,   41,
   40,   91,   44,   93,    0,  377,   91,    0,    0,   40,
   41,   91,  102,   88,   89,   30,   41,  441,   91,   44,
   93,   40,   41,  301,  269,   59,  370,   41,    0,  444,
   44,   40,   58,  723,   60,  261,   64,  127,  128,   93,
    0,  131,  132,  133,  127,  128,   59,  127,  128,  132,
  123,   91,  132,   58,   41,   59,  264,  132,   44,  438,
   91,  258,   41,   59,  154,   44,   33,   59,  123,  144,
  315,  370,   91,   40,   41,  278,   62,   44,  283,   46,
   35,   36,   91,  123,   36,  125,   96,   59,  178,  315,
  100,   59,  123,   64,   61,   41,   63,  123,   44,   59,
  190,  191,  223,  193,  123,   64,   62,  190,  191,   40,
  190,  191,  202,   41,  123,   60,   44,  207,  208,  209,
  210,  545,  132,  343,   91,   93,  216,  217,   64,   35,
   36,  221,  125,  223,   40,  145,  146,   33,  148,  261,
   95,  415,   59,  158,   40,  221,  358,  162,  270,  314,
   46,  841,  364,  274,  362,   64,  123,   33,   64,   64,
  539,  370,  888,  535,  285,  257,   61,   63,  257,  312,
   46,  261,  337,  263,  264,  265,  266,  267,  292,   64,
  270,  261,  269,   64,   64,  103,  257,   63,  391,   95,
  270,   61,  202,   63,  259,   91,  298,  259,  288,  380,
  381,  382,  274,  384,  370,  298,  216,  735,  315,  301,
  634,  635,  301,  740,  304,   91,  257,  258,  308,  309,
  310,  565,  637,  313,  314,  259,  438,  123,  294,  441,
   36,  439,  444,  438,  305,  325,  441,  327,  298,   64,
  125,   44,  259,  316,  125,  125,  259,  337,  338,  339,
  298,  630,  631,  343,  376,  259,  298,   36,  273,  562,
  301,  341,  352,  259,  292,  497,  565,  259,  278,  370,
  473,   59,  362,  298,  267,  268,  316,  357,  288,  294,
  321,   36,  323,  269,  298,  316,  376,  259,  368,   36,
  380,  381,  382,   40,  384,  370,  376,  316,  654,  259,
  125,  391,  257,   35,   36,  257,   64,  316,   40,   41,
  325,  298,  402,  269,  404,  405,   95,   64,   36,  298,
  352,  292,   40,  413,  356,  415,  853,  855,  336,  451,
  125,  363,   64,  292,  289,  367,  291,  427,  305,  429,
   46,  431,    2,   58,  261,  377,   64,  314,  315,  439,
  562,  257,  298,   36,  778,   96,  565,  367,  294,  295,
  370,  451,  452,   95,   35,   36,  571,  125,   36,   36,
  298,  451,   40,   40,   58,  465,  222,   95,  289,   62,
  501,  391,  288,  289,  464,  291,  123,  292,  293,  130,
  480,  263,  595,  299,  312,  405,  775,  578,  315,  565,
  581,  319,  583,  584,  585,   35,   36,  417,  123,  305,
  295,  501,  293,  293,  504,  505,  123,  507,  630,  509,
  510,  297,  634,  513,   95,  501,  509,  510,   36,  509,
  510,  734,   40,   46,  918,  305,  526,  452,  518,  123,
  455,  531,  532,  526,  314,  315,  526,   60,   35,   36,
  571,  257,  125,   35,   36,  531,  532,   46,  548,  662,
   46,  202,  946,  473,  565,   95,   58,   58,  293,  275,
  480,  561,  132,  563,   41,  216,  551,  557,  257,  285,
  286,  287,  288,  289,  290,  560,   40,  502,  578,  504,
  565,  581,   36,  583,  584,  585,   40,   41,  513,  305,
  515,  591,  257,  535,  594,   91,   60,   58,   95,  524,
  257,   44,  520,   95,  309,  310,  257,  261,   36,  640,
   64,  553,   40,  305,  556,  257,   93,  264,   41,  732,
  735,  123,  123,  288,   58,  293,   44,   61,  279,  257,
  261,  288,   58,  553,   60,   63,  556,  288,  261,   44,
  640,  292,  299,  297,   62,  565,  288,  289,  125,  291,
  301,  302,  572,  744,  640,  746,  125,  299,  261,   36,
  288,  651,  123,   40,  257,  655,  297,  667,  424,  425,
   41,  591,    0,   44,  297,  595,  257,   93,  553,  257,
  257,  556,  782,  783,  267,  268,   58,   64,   60,  340,
  675,  691,  692,  261,  297,  346,   58,  123,  698,   44,
  456,  849,  324,  325,  852,   33,  706,  738,   93,  809,
  288,  288,   40,  706,  844,   60,  706,  257,   46,   44,
  640,  646,  299,  723,   93,   58,  716,   60,   44,  297,
   58,   59,   40,   61,  301,   63,   60,  388,   20,  257,
  267,  268,  662,  261,  744,  123,  746,  667,  673,  674,
   91,  123,  315,  753,  405,  123,  676,  677,  678,  679,
  257,   59,  687,   91,  689,  257,  417,  306,  307,  308,
   59,  696,  260,  698,  262,  263,  289,  290,  266,  879,
  880,    0,   41,    2,  726,    4,    5,    6,  918,  289,
  290,   10,  311,  312,  313,  123,  896,  292,  293,  784,
  289,  290,  291,  257,   44,  805,  726,  289,  290,  291,
  800,   93,  732,   40,  465,   46,  946,  289,  469,  101,
  125,  103,  123,  474,   43,   44,  294,  295,   47,  257,
    7,    8,  832,   52,  288,  486,  836,  622,  265,  624,
  625,  841,  627,  123,  844,  299,  123,  123,   33,   44,
  123,   36,  326,  327,  328,   40,   41,  782,  783,   44,
  288,   46,  847,  123,   93,  785,  786,  787,  289,  290,
  291,  308,  309,  310,  123,   60,   93,  261,   63,   64,
  257,  125,  807,  808,  809,  810,  261,   44,   62,  814,
   44,  297,   44,   58,   41,  298,  178,  887,  888,  889,
   44,   93,  827,  828,   59,  830,   91,  849,   58,  834,
  852,  288,  131,  132,   93,   93,   59,   58,  918,  125,
  125,  572,  204,  205,  206,   44,  125,  125,  125,  849,
  123,  259,  852,  261,  125,  154,   41,  125,  858,  125,
  591,  261,   93,  261,   41,   62,  946,  123,   62,   44,
  125,  876,   41,  878,  879,  880,   59,  608,  275,  276,
  277,  278,  279,  280,  281,  282,  283,   58,   44,  297,
  895,  896,  191,  898,  193,    0,   40,  305,  629,  125,
  258,  906,  264,  908,  909,  123,  314,  315,  123,  208,
   41,  210,  125,    0,  125,  310,   44,  216,  217,   93,
  293,  125,  221,  125,  929,  292,  931,  293,   33,  125,
  125,  292,  663,   41,   41,   40,  667,  125,  943,  125,
  295,   46,  294,  125,   41,  307,   33,   41,   61,   44,
  312,    0,  125,   40,   59,   41,   61,   93,   63,   46,
   93,  275,  276,  277,  278,  279,  280,  281,  282,  283,
    0,   58,   59,  123,   61,  289,   63,   41,   93,   93,
   62,   41,  123,  125,   62,  125,   91,  125,  125,   58,
  125,   62,  257,  125,   67,  524,  706,   67,  132,  530,
  362,  352,  654,  629,   91,  304,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  314,  889,  264,  123,  452,
  289,  290,  291,  288,  561,    0,  325,  642,  327,   59,
  452,  677,  297,  298,   64,  676,  123,  679,  337,  338,
  339,  678,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  786,  785,  352,  563,  646,  289,  290,   33,  591,
  753,   36,  722,   38,  457,   40,   41,  300,  301,   44,
  944,  304,  263,  266,  266,  265,  565,  439,  267,  572,
  378,  461,  760,   58,   59,  800,   61,   62,   63,   64,
  465,  716,  509,  123,  667,  125,  102,  307,  429,  431,
    0,  404,  319,  402,   -1,  404,  405,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  413,   -1,   91,   -1,   93,   -1,
   95,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  427,   -1,
  429,   -1,  431,   33,   -1,   -1,   36,   -1,   38,   -1,
   40,   41,   -1,   -1,   44,   -1,   -1,   -1,  123,   -1,
  125,   -1,   -1,  452,  259,   -1,  261,   -1,   58,   59,
   -1,   61,   62,   63,   64,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  259,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  480,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,  297,   93,   -1,   95,   -1,   -1,   -1,   -1,
  305,  563,  501,   -1,   -1,  504,  505,   -1,  507,  314,
  315,   -1,   -1,   -1,  513,   -1,   -1,   -1,  305,   -1,
   -1,   -1,   -1,  123,   -1,  125,   -1,  314,  315,  259,
   -1,   -1,  531,  532,   -1,   -1,   -1,  267,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,
  300,  301,  302,  303,  304,  305,   -1,   36,   -1,   38,
   -1,   40,  257,   -1,  259,   -1,  261,   46,   -1,   -1,
   -1,   -1,  267,   -1,  269,  594,   -1,   -1,   -1,  274,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
   -1,  286,  287,  288,  289,  290,  291,   -1,   -1,   -1,
   -1,  296,  297,  298,   -1,  300,  301,  302,  303,  304,
  305,   -1,   91,   -1,   -1,   -1,   95,   -1,   -1,  314,
  315,  640,  317,  318,  319,  320,  321,  322,   -1,   -1,
   -1,  326,  327,  328,   -1,   -1,   -1,  257,   -1,  259,
   -1,  261,   -1,   -1,  123,   -1,   -1,  267,   -1,  269,
   -1,   -1,   -1,   -1,  274,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,  691,  692,   -1,   -1,  296,  297,  298,  698,
  300,  301,  302,  303,  304,  305,    0,   -1,   -1,   -1,
   61,   -1,   -1,   64,  314,  315,   -1,  317,  318,  319,
  320,  321,  322,   -1,   -1,   -1,  326,  327,  328,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   -1,   36,   -1,   38,   -1,   40,   41,   -1,   -1,
   44,   -1,   46,   -1,  753,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   -1,   61,   62,   63,
   64,   -1,  123,  267,  125,   -1,   -1,   -1,   -1,   -1,
    0,  275,  276,  277,  278,  279,  280,  281,  282,  283,
  284,   -1,  286,  287,  288,  289,  290,  291,  257,   93,
   -1,   95,   -1,   -1,   -1,   -1,  300,  301,  302,   -1,
  304,   -1,   -1,   33,   -1,   -1,   36,   -1,   38,   -1,
   40,   41,   -1,   -1,   44,   -1,   46,   -1,   -1,  123,
  289,  125,  291,  832,   -1,   -1,   -1,  836,   58,   59,
   -1,   61,   -1,   63,   64,   -1,  305,   -1,   -1,   -1,
   -1,   -1,   -1,    0,   -1,  314,   -1,   -1,  317,  318,
  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,  328,
   -1,   91,   -1,   93,   -1,   95,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   36,
   -1,   38,   -1,   40,   41,   -1,   -1,   44,   -1,   46,
   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,
   -1,   58,   59,   -1,   61,   -1,   63,   64,   -1,   -1,
   -1,   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,   -1,   -1,   -1,   -1,   -1,  289,  290,
   -1,   -1,   -1,   -1,   91,  296,   93,   -1,   95,  300,
  301,   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,   -1,  259,   -1,  261,   -1,   -1,
   -1,   -1,   -1,  267,   -1,  269,  123,   -1,  125,   -1,
   -1,  275,  276,  277,  278,  279,  280,  281,  282,  283,
  284,   -1,  286,  287,  288,  289,  290,  291,   -1,   -1,
   -1,   -1,  296,  297,  298,   -1,  300,  301,  302,  303,
  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  314,  315,   -1,  317,  318,  319,  320,  321,  322,   -1,
   -1,   -1,  326,  327,  328,   -1,   -1,  257,   -1,  259,
   -1,  261,   -1,   -1,   -1,   -1,   -1,  267,   -1,  269,
   -1,   -1,   -1,   -1,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,   -1,   -1,   -1,   -1,  296,   -1,  298,   -1,
  300,  301,  302,  303,  304,  305,   64,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  314,  315,   -1,  317,  318,  319,
  320,  321,  322,   -1,   -1,   -1,  326,  327,  328,   -1,
  257,   -1,  259,   -1,  261,   -1,   -1,   -1,   -1,   -1,
  267,   -1,  269,   -1,   -1,   -1,   -1,   -1,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
  287,  288,  289,  290,  291,   -1,   -1,  125,   -1,  296,
    0,  298,   -1,  300,  301,  302,  303,  304,  305,   -1,
   -1,   -1,   -1,   64,   -1,   -1,   -1,  314,  315,   -1,
  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,
  327,  328,   -1,   33,   -1,   -1,   36,   -1,   38,   -1,
   40,   41,   -1,   -1,   44,   -1,   46,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   -1,   61,   -1,   63,   64,   -1,   -1,   -1,   -1,   -1,
   33,   -1,    0,   36,  125,   -1,   -1,   40,   41,   -1,
   -1,   44,   -1,   46,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   93,   -1,   95,   -1,   60,   -1,   -1,
   63,   64,   -1,   -1,   -1,   33,   -1,   -1,   36,   -1,
   38,   -1,   40,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  125,   -1,   -1,   91,   -1,
   58,   59,   95,   61,   -1,   63,   64,   -1,   -1,  267,
   -1,   -1,   -1,   -1,   -1,    0,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
  288,  289,  290,  291,   -1,   93,   -1,   95,  296,   -1,
   -1,   -1,  300,  301,  302,  303,  304,  305,   33,   -1,
   -1,   36,   -1,   38,   -1,   40,   41,   -1,   -1,   44,
   -1,   46,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,
   -1,   -1,   -1,   58,   59,   -1,   61,   -1,   63,   64,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,   -1,   -1,   -1,   91,   -1,  289,  290,
   95,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,  300,
  301,   -1,   -1,  304,   -1,   -1,   -1,  257,   -1,  259,
   -1,  261,   -1,   -1,   -1,   -1,   -1,  267,  123,  269,
  125,   -1,   -1,   -1,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,   -1,   -1,  257,   -1,  296,   -1,  298,   -1,
  300,  301,  302,  303,  304,  305,   64,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  314,  315,   -1,  317,  318,  319,
  320,  321,  322,   -1,   -1,  288,  326,  327,  328,  257,
   -1,  259,   -1,  261,  297,  298,   -1,   -1,   -1,  267,
   -1,  269,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
  288,  289,  290,  291,   -1,  123,   -1,  125,  296,   -1,
  298,   -1,  300,  301,  302,  303,  304,  305,   64,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,   -1,  317,
  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,
  328,   -1,  257,   -1,  259,   -1,  261,   -1,   -1,   -1,
   -1,   -1,  267,   -1,  269,   -1,   -1,   -1,   -1,   -1,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
   -1,  286,  287,  288,  289,  290,  291,  123,   -1,  125,
   -1,  296,    0,   -1,   -1,  300,  301,  302,  303,  304,
  305,   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,  314,
  315,   -1,  317,  318,  319,  320,  321,  322,   -1,   -1,
   -1,  326,  327,  328,   -1,   33,   -1,   -1,   36,   -1,
   38,   -1,   40,   41,   -1,   -1,   44,   -1,   46,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   59,   -1,   61,   -1,   63,   64,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,    0,  125,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,  283,   -1,   -1,   -1,   -1,
   -1,  289,  290,   91,   -1,   -1,   -1,   95,  296,  297,
   -1,   -1,  300,  301,   -1,   -1,  304,   33,   -1,   -1,
   36,   -1,   38,   -1,   40,   41,   -1,   -1,   44,   -1,
   46,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,
   -1,   -1,   58,   59,   -1,   61,   -1,   63,   64,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,  283,   -1,   -1,
   -1,   -1,   -1,  289,  290,   91,   -1,   -1,   -1,   95,
  296,   -1,   -1,   -1,  300,  301,   -1,   -1,  304,   -1,
   33,   -1,   -1,   36,   -1,   38,   -1,   40,   41,   -1,
   -1,   44,   -1,   46,   -1,   -1,   -1,  123,   -1,  125,
   -1,   -1,   -1,   -1,   -1,   58,   59,   33,   61,   -1,
   63,   64,   -1,   -1,   40,   41,   -1,   -1,   44,   -1,
   46,   -1,   -1,   -1,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,   -1,   61,   -1,   63,   91,  289,
  290,   -1,   95,   -1,   -1,   -1,  296,   -1,   -1,   -1,
  300,  301,   -1,   -1,  304,   -1,   -1,   -1,   -1,  257,
   -1,  259,   -1,  261,   -1,   91,   -1,   -1,   -1,  267,
  123,  269,  125,   -1,   -1,   -1,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
  288,  289,  290,  291,   -1,   -1,   -1,  123,  296,   -1,
   -1,   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,   -1,  317,
  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,
  328,  257,   -1,  259,   -1,  261,   -1,   -1,   -1,   -1,
   -1,  267,   -1,  269,   -1,   -1,   -1,   -1,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   -1,
  286,  287,  288,  289,  290,  291,   -1,   -1,   -1,   -1,
  296,   -1,   -1,   -1,  300,  301,  302,  303,  304,  305,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,
   36,  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,
  326,  327,  328,   -1,  257,   -1,  259,   -1,  261,   -1,
   -1,   -1,   -1,   -1,  267,   -1,  269,   -1,   64,    0,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,  287,  288,  289,  290,  291,   -1,
   -1,   -1,   -1,  296,   -1,   -1,   -1,  300,  301,  302,
  303,  304,  305,   -1,   -1,   36,   -1,   38,   -1,   40,
   41,  314,  315,   44,  317,  318,  319,  320,  321,  322,
   -1,  297,  298,  326,  327,  328,   -1,   58,   59,  305,
   61,   62,   -1,   64,  267,   -1,   -1,   -1,  314,  315,
   -1,    0,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,  287,  288,  289,  290,  291,   -1,
   -1,   -1,   93,   -1,   95,   -1,   -1,  300,  301,  302,
   -1,  304,   -1,   -1,   -1,   -1,   -1,   36,   -1,   38,
   -1,   40,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,   58,
   59,   -1,   61,   -1,   -1,   64,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,    0,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,  292,  293,   93,   -1,   95,   -1,   -1,   -1,
  300,  301,  302,   -1,  304,   -1,   -1,   -1,   -1,   -1,
   36,   -1,   38,   -1,   40,   41,   -1,   -1,   44,   -1,
   -1,  257,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,
   -1,  267,   58,   59,   -1,   61,   -1,   -1,   64,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   -1,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
   -1,   -1,   -1,  299,  300,  301,  302,   93,  304,   95,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,  259,   -1,
  261,   -1,   -1,   -1,   -1,   -1,  267,  123,  269,  125,
   -1,   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,  287,  288,  289,  290,
  291,   -1,   -1,   -1,   -1,  296,   -1,  298,   -1,  300,
  301,  302,  303,  304,  305,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  314,  315,   -1,  317,  318,  319,  320,
  321,  322,   -1,   -1,   -1,  326,  327,  328,  257,   -1,
  259,   -1,  261,   -1,   -1,   -1,   -1,   -1,  267,   -1,
  269,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   -1,  286,  287,  288,
  289,  290,  291,   -1,   -1,   -1,   -1,  296,   -1,  298,
   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,  315,   -1,  317,  318,
  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,  328,
   -1,  257,   -1,  259,   -1,  261,   -1,   -1,   -1,   -1,
   -1,  267,   -1,  269,   -1,   -1,    0,   -1,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   -1,
  286,  287,  288,  289,  290,  291,   -1,   -1,   -1,   -1,
  296,   -1,  298,   -1,  300,  301,  302,  303,  304,  305,
   -1,   -1,   36,   -1,   38,   -1,   40,   41,  314,  315,
   44,  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,
  326,  327,  328,   -1,   58,   59,   -1,   61,   -1,   -1,
   64,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   -1,
  286,  287,  288,  289,  290,  291,   -1,   -1,   -1,   93,
   -1,   95,   -1,   -1,  300,  301,  302,   -1,  304,   -1,
   -1,   -1,   -1,   -1,   36,   -1,   38,   -1,   40,   41,
   -1,   -1,   44,   -1,   46,   -1,   -1,   -1,   -1,  123,
   -1,  125,   -1,   -1,    0,   -1,   58,   59,   -1,   -1,
   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   91,
   36,   93,   38,   95,   40,   -1,   -1,   -1,   44,   -1,
   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   61,   -1,   63,   64,   -1,
   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   36,   -1,   38,   -1,   40,   41,   -1,   -1,   -1,
   -1,   46,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,
   -1,   -1,   -1,   -1,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,   -1,  123,   -1,  125,
  300,  301,  302,  257,  304,  259,   91,  261,   -1,   -1,
   95,   -1,   -1,  267,   -1,  269,   -1,   -1,   -1,   -1,
   -1,  275,  276,  277,  278,  279,  280,  281,  282,  283,
  284,   -1,  286,  287,  288,  289,  290,  291,  123,   -1,
   -1,   -1,  296,   -1,  298,   -1,  300,  301,  302,  303,
  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  314,  315,   -1,  317,  318,  319,  320,  321,  322,   -1,
   -1,   -1,  326,  327,  328,  257,   -1,  259,   -1,  261,
   -1,   -1,   -1,   -1,   -1,  267,   -1,  269,   -1,   -1,
   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,  281,
  282,  283,  284,   64,  286,  287,  288,  289,  290,  291,
   -1,   -1,   -1,   -1,  296,   -1,  298,   -1,  300,  301,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,   -1,  259,   -1,  317,  318,  319,  320,  321,
  322,  267,   -1,   -1,  326,  327,  328,   -1,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   -1,
  286,  287,  288,  289,  290,  291,   -1,    0,   -1,   -1,
  296,   -1,  257,   -1,  300,  301,  302,  303,  304,  305,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,
   -1,  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,
  326,  327,  328,   36,  289,   38,  291,   40,   41,   -1,
   -1,   44,   -1,   46,   -1,   -1,   -1,   -1,   -1,   -1,
  305,   -1,   -1,   -1,   -1,   58,   59,   -1,   -1,  314,
   -1,   64,  317,  318,  319,  320,  321,  322,   -1,    0,
   -1,  326,  327,  328,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   93,   -1,   95,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   36,   -1,   38,   -1,   40,
   41,   -1,   -1,   44,   -1,   46,   -1,   -1,   -1,   -1,
  123,   -1,  125,   -1,   -1,   -1,   -1,   58,   59,   -1,
   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,    0,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,   -1,   -1,   -1,   -1,   -1,  289,  290,
   91,   -1,   -1,   -1,   95,  296,   -1,   -1,   -1,  300,
  301,   -1,   -1,  304,   -1,   -1,   -1,   -1,   36,   -1,
   38,   -1,   40,   41,   -1,   -1,   44,   -1,   46,   -1,
   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,
   58,   59,   -1,   -1,   -1,   -1,   64,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   91,   36,   -1,   -1,   95,   40,   41,
   -1,   -1,   44,   -1,   46,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,   -1,  259,   -1,  261,   61,
   -1,   63,   64,   -1,  267,  123,  269,  125,   -1,   -1,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,  287,  288,  289,  290,  291,   91,
   -1,   -1,   -1,  296,   -1,  298,   -1,  300,  301,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  317,  318,  319,  320,  321,  322,
   -1,  123,   -1,  326,  327,  328,  257,   -1,  259,   -1,
  261,   -1,   -1,   -1,   -1,   -1,  267,   -1,  269,   -1,
   -1,   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,  287,  288,  289,  290,
  291,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,  300,
  301,  302,  303,  304,  305,   64,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  314,   -1,   -1,  317,  318,  319,  320,
  321,  322,   -1,   -1,   -1,  326,  327,  328,   36,  257,
   38,  259,   40,  261,   -1,   -1,   -1,   -1,   46,  267,
   -1,  269,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
  288,  289,  290,  291,  123,    0,  125,   -1,  296,   -1,
   -1,   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,
   -1,   -1,   -1,   91,   -1,  257,  314,   95,   -1,  317,
  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,
  328,   36,   -1,   38,   -1,   -1,   41,   -1,   -1,   44,
   -1,   46,   -1,   -1,   -1,  123,  288,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   59,  297,  298,   -1,   -1,   64,
   -1,   -1,   -1,  305,   -1,   -1,   -1,    0,   -1,   -1,
   -1,   -1,  314,  315,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,
   95,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   36,   -1,   38,   -1,   40,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,
  125,   -1,   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,
   -1,   64,  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    0,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,   -1,   -1,   -1,   -1,   -1,
  289,  290,   95,   -1,   -1,   -1,   -1,  296,   -1,   -1,
   -1,  300,  301,   -1,   -1,  304,   36,   -1,   38,  257,
   -1,   41,   -1,   -1,   44,   -1,   46,   -1,   -1,   -1,
  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,   58,   59,
   -1,   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  305,   -1,   -1,
   -1,   91,   -1,   -1,   -1,   95,   -1,  315,   -1,  317,
  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,
  328,   -1,  257,   -1,  259,   -1,  261,   -1,   -1,   -1,
   -1,   -1,  267,  123,  269,  125,   -1,   -1,   -1,   -1,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
   -1,  286,  287,  288,  289,  290,  291,   -1,   -1,   -1,
   -1,  296,   -1,   -1,   -1,  300,  301,  302,  303,  304,
  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,
  315,   -1,  317,  318,  319,  320,  321,  322,   -1,   -1,
   -1,  326,  327,  328,  257,   -1,  259,   -1,  261,   -1,
   -1,   -1,   -1,   -1,  267,   -1,  269,   -1,   -1,   -1,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,  287,  288,  289,  290,  291,   -1,
   -1,   -1,   -1,  296,   -1,  298,   -1,  300,  301,  302,
  303,  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  314,  315,   -1,  317,  318,  319,  320,  321,  322,
   -1,   -1,   -1,  326,  327,  328,   -1,  257,   -1,  259,
   -1,  261,   -1,   -1,   -1,   -1,   -1,  267,   -1,  269,
   -1,   64,    0,   -1,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,
  300,  301,  302,  303,  304,  305,   -1,   -1,   36,   -1,
   38,   -1,   40,   41,  314,  315,   44,  317,  318,  319,
  320,  321,  322,   -1,   -1,   -1,  326,  327,  328,   -1,
   58,   59,  125,   -1,   -1,   -1,   64,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   36,   -1,   38,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,
   -1,   -1,   58,   59,   -1,   61,   -1,   -1,   64,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,   95,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   36,   -1,   38,   -1,   -1,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  125,
   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   61,   -1,
   -1,   64,  275,  276,  277,  278,  279,  280,  281,  282,
  283,   -1,   -1,   -1,   -1,   -1,  289,  290,   -1,   -1,
   -1,   -1,   -1,  296,   -1,   -1,   -1,  300,  301,   -1,
   93,  304,   95,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
   -1,  259,   -1,  261,   -1,   -1,   -1,   -1,   -1,  267,
   -1,  269,  125,   -1,   -1,   -1,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
  288,  289,  290,  291,   -1,   -1,   -1,   -1,  296,   -1,
  298,   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,   -1,  317,
  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,
  328,  257,   -1,  259,   -1,  261,   -1,   -1,   -1,   -1,
   -1,  267,   -1,  269,   -1,   -1,   -1,   -1,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   64,
  286,  287,  288,  289,  290,  291,   -1,   -1,   -1,   -1,
  296,   -1,  298,   -1,  300,  301,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   36,   -1,  314,  315,
   40,  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,
  326,  327,  328,   -1,  257,   -1,  259,   -1,  261,   -1,
   -1,   -1,   -1,   -1,  267,   -1,  269,   -1,  123,    0,
  125,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,  287,  288,  289,  290,  291,   -1,
   -1,   -1,   -1,  296,   -1,  298,   -1,  300,  301,  302,
  303,  304,   -1,   -1,   -1,   36,   -1,   38,   -1,   40,
   41,  314,  315,   44,  317,  318,  319,  320,  321,  322,
   -1,   -1,   -1,  326,  327,  328,   -1,   58,   59,   -1,
   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   95,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   36,   -1,   38,
   -1,   40,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,   58,
   59,   -1,   -1,   -1,   -1,   64,  261,   -1,   -1,   -1,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  275,  276,  277,  278,  279,  280,  281,  282,  283,   -1,
   -1,   -1,   -1,   -1,  289,  290,   95,   -1,   -1,   -1,
   -1,  296,   -1,   -1,   -1,  300,  301,   -1,   -1,  304,
   38,   -1,   -1,   41,   -1,   -1,   44,  257,   46,   -1,
   -1,   -1,   -1,   -1,  123,   -1,  125,  267,   -1,   -1,
   58,   59,   -1,   -1,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,   -1,   -1,   -1,  299,
  300,  301,  302,   91,  304,   -1,   -1,   95,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,  259,   -1,
  261,   -1,   -1,   -1,   -1,  123,  267,  125,  269,   -1,
   -1,   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,  287,  288,  289,  290,
  291,   -1,   -1,   -1,   64,  296,   -1,   -1,   -1,  300,
  301,  302,  303,  304,  305,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  314,  315,   -1,  317,  318,  319,  320,
  321,  322,   -1,   -1,   -1,  326,  327,  328,  257,   -1,
  259,   -1,  261,   -1,   -1,   -1,   -1,   -1,  267,   -1,
  269,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   -1,  286,  287,  288,
  289,  290,  291,   -1,   -1,   -1,   -1,  296,   -1,   -1,
   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,  315,   -1,  317,  318,
  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,  328,
   -1,  259,   -1,  261,   -1,   -1,   -1,   -1,   -1,  267,
   -1,  269,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
   -1,  289,  290,  291,    0,   -1,   -1,   -1,  296,   -1,
   -1,   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,   -1,  317,
  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,
  328,   -1,   38,   -1,   -1,   41,   -1,   -1,   44,   -1,
   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   59,   -1,   -1,   -1,  267,   -1,   -1,
   -1,   -1,   -1,   -1,    0,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,   -1,   -1,   -1,   91,  296,   -1,   -1,   95,
  300,  301,  302,  303,  304,  305,   -1,   -1,   -1,   -1,
   -1,   -1,   38,   -1,   -1,   41,   -1,   -1,   44,   -1,
   46,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,
   -1,    0,   58,   59,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   33,   91,   -1,   -1,   -1,   95,
   -1,   40,   -1,   -1,   -1,   -1,   -1,   46,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,
   59,   -1,   61,   -1,   63,   64,   -1,  123,   -1,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,
   -1,   -1,   64,   -1,  123,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,  259,   -1,  261,   -1,   -1,   -1,   -1,
   -1,  267,   -1,  269,   -1,   -1,   -1,   -1,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   -1,
  286,  287,   -1,  289,  290,  291,   -1,   -1,   -1,   -1,
  296,   -1,   -1,    0,  300,  301,  302,  303,  304,  305,
   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,  314,  315,
   -1,  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,
  326,  327,  328,  259,   -1,  261,   -1,   -1,   -1,   -1,
   -1,  267,   -1,  269,   -1,   -1,   -1,   -1,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   -1,
  286,  287,   59,  289,  290,  291,   -1,   64,   -1,   -1,
  296,   -1,   -1,   -1,  300,  301,  302,  303,  304,  305,
    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,
  259,  317,  318,  319,  320,  321,  322,   -1,  267,   -1,
  326,  327,  328,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   -1,  286,  287,  288,
  289,  290,  291,   -1,   44,   -1,  123,  296,  125,   -1,
   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,   59,
   -1,   -1,   -1,   -1,   64,  314,  315,  259,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  267,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,  281,
  282,  283,  284,   -1,  286,  287,  288,  289,  290,  291,
   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,  300,  301,
  302,  303,  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  125,   33,   -1,   -1,   36,
   -1,   38,   -1,   40,   41,   -1,   -1,   44,   -1,   46,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   -1,   -1,   63,   64,   -1,   -1,
   -1,   -1,   -1,   36,   -1,   38,   -1,   40,   41,   -1,
   -1,   -1,   -1,   46,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  259,   -1,   91,   -1,   35,   36,   95,   38,
  267,   40,   41,   -1,   -1,   -1,   -1,   46,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
  287,  288,  289,  290,  291,   64,  123,   -1,   91,  296,
   -1,   -1,   95,  300,  301,  302,  303,  304,  305,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   33,   -1,   91,   36,   -1,   -1,   95,   40,   41,   -1,
  123,   44,   -1,   46,   -1,   -1,   -1,   -1,   -1,  259,
   -1,   -1,   -1,   -1,   -1,   -1,   59,  267,   61,   -1,
   63,   64,   -1,   -1,  123,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,   -1,   -1,   -1,   -1,  296,   -1,   91,   -1,
  300,  301,  302,  303,  304,   36,   -1,   38,   -1,   40,
   -1,   -1,   -1,   -1,   -1,   46,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   -1,   95,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   36,   -1,
   38,  288,   40,   -1,  257,   -1,   -1,   -1,   46,   -1,
  297,  298,  123,   -1,  125,   -1,   -1,   -1,  305,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   64,   -1,  257,   -1,
  317,  318,  319,  320,  321,  322,  289,   -1,  291,  326,
  327,  328,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  305,   91,   -1,   -1,   -1,   95,   -1,  288,
  289,  314,  291,   -1,  317,  318,  319,  320,  321,  322,
  299,   -1,   -1,  326,  327,  328,  305,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  123,   -1,  125,  317,  318,
  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,  328,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  288,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  314,  315,   -1,   -1,   -1,  257,   -1,   -1,  260,
   -1,  262,  263,  264,   -1,  266,   -1,   -1,   -1,  270,
  271,  272,  273,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,   -1,   -1,   -1,  300,
  301,  302,  303,  304,  305,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  317,  318,  319,  320,
  321,  322,   -1,   -1,   -1,  326,  327,  328,   -1,  257,
   -1,   -1,  260,   -1,  262,  263,  264,   -1,  266,   -1,
   -1,   -1,  270,  271,  272,  273,   64,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
  288,  289,  290,  291,  292,  293,   -1,   -1,  296,   -1,
   -1,   -1,  300,  301,  302,  303,  304,  305,   36,   -1,
   38,   -1,   40,   -1,   -1,   -1,   -1,   -1,   46,  317,
  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,
  328,   -1,   -1,   -1,   -1,   -1,   64,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,
   36,   -1,   -1,   91,   40,   41,   -1,   95,   44,   -1,
   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   36,   -1,   38,   -1,   40,   61,   -1,   63,   64,   -1,
   46,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   64,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,
   -1,   -1,   36,   -1,   38,   -1,   40,   -1,   -1,   -1,
   -1,   -1,   46,   -1,   -1,   -1,   -1,  123,   -1,  125,
   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,  267,
   64,   -1,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
  288,  289,  290,  291,   -1,   -1,   -1,   91,  296,   -1,
   -1,   95,  300,  301,  302,  303,  304,  305,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
   -1,   -1,  260,   -1,  262,  263,  264,   -1,  266,  123,
   -1,   -1,  270,  271,  272,  273,   64,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
  288,  289,  290,  291,   -1,   -1,   -1,   -1,  296,   -1,
   -1,   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  317,
  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,  327,
  328,  257,   -1,   -1,  260,   -1,  262,  263,  264,   -1,
  266,   -1,  288,   -1,  270,  271,  272,  273,   64,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,  305,
  286,  287,  288,  289,  290,  291,   -1,   -1,  314,  315,
  296,   -1,   -1,   -1,  300,  301,  302,  303,  304,  305,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,
  326,  327,  328,  257,   -1,   -1,  260,   -1,  262,  263,
  264,   -1,  266,   -1,   -1,   -1,  270,  271,  272,  273,
   64,  275,  276,  277,  278,  279,  280,  281,  282,  283,
  284,   -1,  286,  287,  288,  289,  290,  291,   -1,   -1,
   -1,   -1,  296,   -1,   -1,   -1,  300,  301,  302,  303,
  304,  305,   36,   -1,   38,   -1,   40,   -1,   -1,   -1,
   -1,   -1,   46,  317,  318,  319,  320,  321,  322,   -1,
   -1,   -1,  326,  327,  328,   59,   -1,   -1,   -1,  267,
   64,  125,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
  288,  289,  290,  291,   -1,   -1,   -1,   91,  296,   -1,
   -1,   95,  300,  301,  302,  303,  304,  305,   -1,   -1,
   -1,   -1,   -1,   -1,   36,   -1,   38,   -1,   40,   -1,
   -1,   -1,   -1,   -1,   46,   -1,   -1,   -1,   -1,  123,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   -1,
  286,  287,  288,  289,  290,  291,   -1,   -1,   -1,   91,
  296,   -1,   -1,   95,  300,  301,  302,  303,  304,  305,
   -1,   -1,   -1,   -1,   -1,   -1,   36,   -1,   38,   -1,
   40,   -1,   -1,   -1,   -1,   -1,   46,   -1,   -1,   -1,
   -1,  123,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  267,   64,   -1,   -1,   -1,   -1,   -1,
   -1,  275,  276,  277,  278,  279,  280,  281,  282,  283,
  284,   -1,  286,  287,  288,  289,  290,  291,   -1,   -1,
   -1,   91,  296,   -1,   -1,   95,  300,  301,  302,  303,
  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,   -1,   -1,  260,   -1,  262,  263,
  264,   -1,  266,  123,   -1,   -1,  270,  271,  272,  273,
   -1,  275,  276,  277,  278,  279,  280,  281,  282,  283,
  284,   -1,  286,  287,  288,  289,  290,  291,   -1,   -1,
   -1,   -1,  296,   -1,   -1,   -1,  300,  301,  302,  303,
  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  317,  318,  319,  320,  321,  322,   -1,
   -1,   -1,  326,  327,  328,  257,   -1,   -1,  260,   -1,
  262,  263,  264,   -1,  266,   -1,   -1,   -1,  270,  271,
  272,  273,   -1,  275,  276,  277,  278,  279,  280,  281,
  282,  283,  284,   -1,  286,  287,  288,  289,  290,  291,
   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,  300,  301,
  302,  303,  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  317,  318,  319,  320,  321,
  322,   -1,   -1,   -1,  326,  327,  328,  257,   -1,   -1,
  260,   -1,  262,  263,  264,   -1,  266,   -1,   -1,   -1,
  270,  271,  272,  273,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,
  300,  301,  302,  303,  304,  305,   36,   -1,   38,   -1,
   40,   -1,   -1,   -1,   -1,   -1,   46,  317,  318,  319,
  320,  321,  322,   -1,   -1,   -1,  326,  327,  328,   -1,
   -1,   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   36,   -1,   38,   95,   40,   41,   -1,   -1,
   -1,   -1,   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,
   64,   -1,   -1,  123,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   36,   91,   38,   -1,
   40,   95,   -1,   -1,   -1,   -1,   46,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   -1,   -1,   -1,   36,   64,   38,   -1,   40,   -1,  123,
   -1,   -1,   -1,   46,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   -1,   95,   -1,   -1,   -1,   -1,
   -1,   -1,   36,   -1,   38,   -1,   40,   -1,   -1,   -1,
   -1,   -1,   46,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   93,   -1,   95,  123,   58,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,
  123,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,
   -1,   95,   -1,   -1,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,   -1,   -1,   -1,   -1,  296,   -1,   -1,  123,
  300,  301,  302,  303,  304,  305,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,   -1,   -1,   -1,  317,  318,  319,
  320,  321,  322,   -1,   -1,   -1,  326,  327,  328,   -1,
   -1,  275,  276,  277,  278,  279,  280,  281,  282,  283,
   -1,   -1,   -1,   -1,   -1,  289,   -1,  291,   -1,   -1,
   -1,   -1,   36,   -1,   38,   -1,   40,   41,   -1,   -1,
   -1,  305,   46,   -1,   -1,   -1,   -1,  257,   -1,   -1,
  314,   -1,   -1,  317,  318,  319,  320,  321,  322,   -1,
   64,   -1,  326,  327,  328,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  257,   -1,   -1,   -1,   -1,  289,
   -1,  291,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   -1,   95,   -1,   -1,   -1,  305,   -1,  280,  281,  282,
  283,   -1,   -1,   -1,  314,   -1,   -1,  317,  318,  319,
  320,  321,  322,  257,   -1,   -1,  326,  327,  328,  123,
   -1,   -1,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  317,  318,  319,  320,  321,  322,
   -1,   -1,   -1,  326,  327,  328,   36,   -1,   38,   -1,
   40,   -1,   -1,   -1,   -1,   -1,   46,   -1,   -1,   -1,
   -1,  305,   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,
   -1,   -1,   -1,  317,  318,  319,  320,  321,  322,   -1,
   -1,   -1,  326,  327,  328,   36,   -1,   38,   -1,   40,
   41,   -1,   -1,   -1,   -1,   46,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   36,   95,   38,   -1,   40,   -1,
   -1,   -1,   -1,   -1,   46,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   36,   -1,   38,   -1,   40,   59,   -1,   -1,
   -1,   -1,   46,  123,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   -1,   95,   59,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   -1,   -1,   95,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  123,   -1,   -1,   -1,   36,   91,   38,   -1,
   40,   95,   -1,   -1,  288,   -1,   46,   -1,   -1,   -1,
   -1,  123,   -1,   -1,   -1,  299,   -1,   -1,   -1,   59,
   36,  305,   38,   -1,   40,   41,   -1,   -1,   -1,  123,
   46,   -1,   -1,  317,  318,  319,  320,  321,  322,   -1,
   -1,   -1,  326,  327,  328,   -1,   36,   -1,   38,   -1,
   40,   91,   -1,   -1,   -1,   95,   46,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   -1,   -1,   36,   -1,   38,   91,   40,   41,   -1,   95,
   -1,   -1,   46,  123,   -1,   -1,   -1,  257,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   -1,   95,   -1,  123,   -1,   -1,
   -1,   -1,   36,   -1,   38,   -1,   40,   41,   -1,  289,
   -1,  291,   46,   -1,   -1,   -1,  257,   91,   -1,   -1,
   -1,   95,   -1,  123,   -1,  305,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  314,  257,   -1,  317,  318,  319,
  320,  321,  322,   -1,   -1,   -1,  326,  327,  328,  123,
   -1,   -1,   -1,  257,   -1,   -1,   -1,   91,   -1,   -1,
   -1,   95,   -1,   -1,  305,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  317,  318,  319,  320,
  321,  322,   -1,  305,   -1,  326,  327,  328,   -1,  123,
   -1,   -1,   -1,   -1,   -1,  317,  318,  319,  320,  321,
  322,  305,   -1,   -1,  326,  327,  328,  257,   -1,   -1,
   -1,   -1,   -1,  317,  318,  319,  320,  321,  322,   -1,
   -1,   -1,  326,  327,  328,   36,   -1,   38,   -1,   40,
   41,  257,   -1,   -1,   -1,   46,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   36,
   -1,   38,   -1,   40,   -1,  305,   -1,  257,   -1,   46,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  317,  318,  319,
  320,  321,  322,   -1,   -1,   -1,  326,  327,  328,  305,
   91,   -1,   -1,  257,   95,   -1,   -1,   -1,   -1,   -1,
   -1,  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,
  326,  327,  328,   36,   91,  305,   -1,   40,   95,   -1,
   -1,   -1,  123,   46,   -1,   -1,   -1,  317,  318,  319,
  320,  321,  322,  257,   -1,   -1,  326,  327,  328,   -1,
   -1,  305,   -1,   -1,   -1,   -1,  123,   -1,   -1,   -1,
   -1,   -1,   -1,  317,  318,  319,  320,  321,  322,   -1,
   -1,   -1,  326,  327,  328,   36,   -1,   38,   91,   40,
   -1,   -1,   95,   -1,   -1,   46,   -1,   -1,   -1,   36,
   -1,  305,   -1,   40,   -1,   -1,   -1,   -1,   -1,   46,
   -1,   -1,   -1,  317,  318,  319,  320,  321,  322,   -1,
  123,   -1,  326,  327,  328,   36,   -1,   38,   -1,   40,
   -1,   -1,   -1,   -1,   -1,   46,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   -1,   95,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,   95,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  123,   -1,   -1,   -1,  257,   -1,   -1,   -1,
   91,   -1,   -1,   -1,   95,   -1,  123,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   33,   -1,   44,   36,   -1,
  257,   -1,   40,   41,   -1,   -1,   44,   -1,   46,   -1,
   -1,   -1,  123,   -1,   -1,   -1,   -1,   64,   -1,   -1,
   -1,   -1,   -1,   61,  305,   63,   64,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  317,  318,  319,  320,
  321,  322,   -1,   -1,   -1,  326,  327,  328,  305,   -1,
   -1,   -1,   44,   91,  257,   -1,   -1,   95,   -1,   -1,
  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,
  327,  328,   64,   -1,   -1,   -1,   -1,   -1,  125,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   64,   -1,   -1,  257,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  317,  318,  319,  320,  321,  322,
  257,   -1,   -1,  326,  327,  328,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  125,   64,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  305,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  125,   64,  317,  318,  319,  320,
  321,  322,   -1,   -1,   -1,  326,  327,  328,   -1,   -1,
  317,  318,  319,  320,  321,  322,   -1,   -1,   -1,  326,
  327,  328,   -1,   -1,  305,  125,   -1,   -1,   -1,   -1,
   64,   -1,   -1,   -1,   -1,   -1,  317,  318,  319,  320,
  321,  322,   -1,   -1,   -1,  326,  327,  328,   -1,  257,
  267,   -1,   -1,   -1,   -1,   -1,  125,   -1,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
  287,  288,  289,  290,  291,   -1,   64,   -1,   -1,  296,
  288,   -1,   -1,  300,  301,  302,  303,  304,  305,  297,
  298,  125,   -1,   -1,   -1,   -1,   -1,  305,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  267,  314,  315,   -1,   -1,
   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,  281,
  282,  283,  284,   -1,  286,  287,  288,  289,  290,  291,
   -1,   64,   -1,   -1,  296,   -1,  267,  125,  300,  301,
  302,  303,  304,  305,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,  287,  288,  289,  290,
  291,   -1,   -1,   -1,   -1,  296,   -1,  267,   -1,  300,
  301,  302,  303,  304,  305,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,  125,   -1,   -1,   -1,  296,   -1,  267,   -1,
  300,  301,  302,  303,  304,  305,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   -1,  286,  287,  288,
  289,  290,  291,   -1,   -1,   -1,   -1,  296,   -1,   -1,
   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,   -1,
   -1,  275,  276,  277,  278,  279,  280,  281,  282,  283,
  284,   -1,  286,  287,  288,  289,  290,  291,   -1,   -1,
   -1,   -1,  296,   -1,   -1,   -1,  300,  301,  302,  303,
  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
  288,  289,  290,  291,   -1,   -1,   -1,   -1,  296,   -1,
   -1,   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,  287,  288,  289,  290,  291,   -1,
   -1,   -1,   -1,  296,   -1,   -1,   -1,  300,  301,  302,
  303,  304,  305,
  };

#line 1324 "Swiften/SwiftParser.jay"

}



















#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 System.Diagnostics.Debug.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int IDENTIFIER = 257;
  public const int NUMBER = 258;
  public const int NEWLINE = 259;
  public const int FOR = 260;
  public const int IN = 261;
  public const int DO = 262;
  public const int WHILE = 263;
  public const int IF = 264;
  public const int ELSE = 265;
  public const int SWITCH = 266;
  public const int CASE = 267;
  public const int DEFAULT = 268;
  public const int WHERE = 269;
  public const int BREAK = 270;
  public const int CONTINUE = 271;
  public const int FALLTHROUGH = 272;
  public const int RETURN = 273;
  public const int EQEQ_OP = 274;
  public const int CLASS = 275;
  public const int MUTATING = 276;
  public const int NONMUTATING = 277;
  public const int OVERRIDE = 278;
  public const int STATIC = 279;
  public const int UNOWNED = 280;
  public const int UNOWNED_SAFE = 281;
  public const int UNOWNED_UNSAFE = 282;
  public const int WEAK = 283;
  public const int IMPORT = 284;
  public const int TYEPALIAS = 285;
  public const int STRUCT = 286;
  public const int ENUM = 287;
  public const int PROTOCOL = 288;
  public const int VAR = 289;
  public const int FUNC = 290;
  public const int LET = 291;
  public const int GET = 292;
  public const int SET = 293;
  public const int WILLSET = 294;
  public const int DIDSET = 295;
  public const int TYPEALIAS = 296;
  public const int ARROW_OP = 297;
  public const int DOTDOTDOT_OP = 298;
  public const int INOUT = 299;
  public const int CONVENIENCE = 300;
  public const int INIT = 301;
  public const int DEINIT = 302;
  public const int EXTENSION = 303;
  public const int SUBSCRIPT = 304;
  public const int OPERATOR = 305;
  public const int PREFIX = 306;
  public const int POSTFIX = 307;
  public const int INFIX = 308;
  public const int PRECEDENCE = 309;
  public const int ASSOCIATIVITY = 310;
  public const int LEFT = 311;
  public const int RIGHT = 312;
  public const int NONE = 313;
  public const int IS = 314;
  public const int AS = 315;
  public const int BALANCED_TEXT = 316;
  public const int FILE_DEFINE = 317;
  public const int LINE_DEFINE = 318;
  public const int COLUMN_DEFINE = 319;
  public const int FUNCTION_DEFINE = 320;
  public const int SELF = 321;
  public const int SUPER = 322;
  public const int DYNAMICTYPE = 323;
  public const int UTYPE = 324;
  public const int UPROTOCOL = 325;
  public const int INTEGER_LITERAL = 326;
  public const int FLOATING_POINT_LITERAL = 327;
  public const int STRING_LITERAL = 328;
  public const int END = 0;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
