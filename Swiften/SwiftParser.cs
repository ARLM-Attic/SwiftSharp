// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "Swiften/SwiftParser.jay"
using System.Text;
using System.IO;
using System;
using System.Collections.Generic;

#pragma warning disable 219,414

namespace Swiften
{
	public partial class SwiftParser
	{
		const int yacc_verbose_flag = 1;
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = new StringWriter ();

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }

  /* An EOF token */
  public int eof_token;

  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
//t  internal yydebug.yyDebug debug;

  protected const int yyFinal = 37;
//t // Put this array into a separate class so it is only initialized if debugging is actually used
//t // Use MarshalByRefObject to disable inlining
//t class YYRules : MarshalByRefObject {
//t  public static readonly string [] yyRule = {
//t    "$accept : top_level_declaration",
//t    "statement : expression NEWLINE",
//t    "statement : expression ';'",
//t    "statement : declaration NEWLINE",
//t    "statement : declaration ';'",
//t    "statement : loop_statement NEWLINE",
//t    "statement : loop_statement ';'",
//t    "statement : branch_statement NEWLINE",
//t    "statement : branch_statement ';'",
//t    "statement : labeled_statement NEWLINE",
//t    "statement : control_transfer_statement NEWLINE",
//t    "statement : control_transfer_statement ';'",
//t    "statements : statement",
//t    "statements : statement statements",
//t    "loop_statement : for_statement",
//t    "loop_statement : for_in_statement",
//t    "loop_statement : while_statement",
//t    "loop_statement : do_while_statement",
//t    "for_statement : FOR for_init ';' expression ';' expression code_block",
//t    "for_statement : FOR for_init ';' expression ';' code_block",
//t    "for_statement : FOR for_init ';' ';' expression code_block",
//t    "for_statement : FOR for_init ';' ';' code_block",
//t    "for_statement : FOR ';' expression ';' expression code_block",
//t    "for_statement : FOR ';' expression ';' code_block",
//t    "for_statement : FOR ';' ';' expression code_block",
//t    "for_statement : FOR ';' ';' code_block",
//t    "for_statement : FOR '(' for_init ';' expression ';' expression ')' code_block",
//t    "for_statement : FOR '(' for_init ';' expression ';' ')' code_block",
//t    "for_statement : FOR '(' for_init ';' ';' expression ')' code_block",
//t    "for_statement : FOR '(' for_init ';' ';' ')' code_block",
//t    "for_statement : FOR '(' ';' expression ';' expression ')' code_block",
//t    "for_statement : FOR '(' ';' expression ';' ')' code_block",
//t    "for_statement : FOR '(' ';' ';' expression ')' code_block",
//t    "for_statement : FOR '(' ';' ';' ')' code_block",
//t    "for_init : variable_declaration",
//t    "for_init : expression_list",
//t    "for_in_statement : FOR pattern IN expression code_block",
//t    "while_statement : WHILE while_condition code_block",
//t    "while_condition : expression",
//t    "while_condition : declaration",
//t    "do_while_statement : DO code_block WHILE while_condition",
//t    "branch_statement : if_statement",
//t    "branch_statement : switch_statement",
//t    "if_statement : IF if_condition code_block else_clause",
//t    "if_statement : IF if_condition code_block",
//t    "if_condition : expression",
//t    "if_condition : declaration",
//t    "else_clause : ELSE code_block",
//t    "else_clause : ELSE if_statement",
//t    "switch_statement : SWITCH expression '{' switch_cases '}'",
//t    "switch_statement : SWITCH expression '{' '}'",
//t    "switch_cases : switch_case",
//t    "switch_cases : switch_case switch_cases",
//t    "switch_case : case_label statements",
//t    "switch_case : default_label statements",
//t    "switch_case : case_label ';'",
//t    "switch_case : default_label ';'",
//t    "case_label : CASE case_item_list ':'",
//t    "case_item : pattern guard_clause",
//t    "case_item : pattern",
//t    "case_item_list : case_item",
//t    "case_item_list : case_item case_item_list",
//t    "default_label : DEFAULT ':'",
//t    "guard_clause : WHERE guard_expression",
//t    "guard_expression : expression",
//t    "labeled_statement : statement_label loop_statement",
//t    "labeled_statement : statement_label switch_statement",
//t    "statement_label : label_name ':'",
//t    "label_name : identifier",
//t    "control_transfer_statement : break_statement",
//t    "control_transfer_statement : continue_statement",
//t    "control_transfer_statement : fallthrough_statement",
//t    "control_transfer_statement : return_statement",
//t    "break_statement : BREAK label_name",
//t    "break_statement : BREAK",
//t    "continue_statement : CONTINUE label_name",
//t    "continue_statement : CONTINUE",
//t    "fallthrough_statement : FALLTHROUGH",
//t    "return_statement : RETURN expression",
//t    "return_statement : RETURN",
//t    "generic_parameter_clause : '<' generic_parameter_list requirement_clause '>'",
//t    "generic_parameter_clause : '<' generic_parameter_list '>'",
//t    "generic_parameter_list : generic_parameter",
//t    "generic_parameter_list : generic_parameter ',' generic_parameter_list",
//t    "generic_parameter : type_name",
//t    "generic_parameter : type_name ':' type_identifier",
//t    "generic_parameter : type_name ':' protocol_composition_type",
//t    "requirement_clause : WHERE requirement_list",
//t    "requirement_list : requirement",
//t    "requirement_list : requirement ',' requirement_list",
//t    "requirement : conformance_requirement",
//t    "requirement : same_type_requirement",
//t    "conformance_requirement : type_identifier ':' type_identifier",
//t    "conformance_requirement : type_identifier ':' protocol_composition_type",
//t    "same_type_requirement : type_identifier EQEQ_OP type_identifier",
//t    "generic_argument_clause : '<' generic_argument_list '>'",
//t    "generic_argument_list : generic_argument",
//t    "generic_argument_list : generic_argument ',' generic_argument_list",
//t    "generic_argument : type",
//t    "declaration : import_declaration",
//t    "declaration : constant_declaration",
//t    "declaration : variable_declaration",
//t    "declaration : typealias_declaration",
//t    "declaration : function_declaration",
//t    "declaration : enum_declaration",
//t    "declaration : struct_declaration",
//t    "declaration : class_declaration",
//t    "declaration : protocol_declaration",
//t    "declaration : initializer_declaration",
//t    "declaration : deinitializer_declaration",
//t    "declaration : extension_declaration",
//t    "declaration : subscript_declaration",
//t    "declaration : operator_declaration",
//t    "declarations : declaration",
//t    "declarations : declaration declarations",
//t    "declaration_specifiers : declaration_specifier",
//t    "declaration_specifiers : declaration_specifier declaration_specifiers",
//t    "declaration_specifier : CLASS",
//t    "declaration_specifier : MUTATING",
//t    "declaration_specifier : NONMUTATING",
//t    "declaration_specifier : OVERRIDE",
//t    "declaration_specifier : STATIC",
//t    "declaration_specifier : UNOWNED",
//t    "declaration_specifier : UNOWNED_SAFE",
//t    "declaration_specifier : UNOWNED_UNSAFE",
//t    "declaration_specifier : WEAK",
//t    "top_level_declaration : statements",
//t    "top_level_declaration :",
//t    "code_block : '{' statements '}'",
//t    "code_block : '{' '}'",
//t    "import_declaration : attributes IMPORT import_kind import_path",
//t    "import_declaration : attributes IMPORT import_path",
//t    "import_declaration : IMPORT import_kind import_path",
//t    "import_declaration : IMPORT import_path",
//t    "import_kind : TYEPALIAS",
//t    "import_kind : STRUCT",
//t    "import_kind : CLASS",
//t    "import_kind : ENUM",
//t    "import_kind : PROTOCOL",
//t    "import_kind : VAR",
//t    "import_kind : FUNC",
//t    "import_path : import_path_identifier",
//t    "import_path : import_path_identifier '.' import_path",
//t    "import_path_identifier : identifier",
//t    "import_path_identifier : operator_",
//t    "constant_declaration : attributes declaration_specifiers LET pattern_initializer_list",
//t    "constant_declaration : attributes LET pattern_initializer_list",
//t    "constant_declaration : declaration_specifiers LET pattern_initializer_list",
//t    "constant_declaration : LET pattern_initializer_list",
//t    "pattern_initializer_list : pattern_initializer",
//t    "pattern_initializer_list : pattern_initializer ',' pattern_initializer_list",
//t    "pattern_initializer : pattern initializer",
//t    "pattern_initializer : pattern",
//t    "initializer : expression",
//t    "variable_declaration : variable_declaration_head pattern_initializer_list",
//t    "variable_declaration : variable_declaration_head variable_name type_annotation code_block",
//t    "variable_declaration : variable_declaration_head variable_name type_annotation getter_setter_block",
//t    "variable_declaration : variable_declaration_head variable_name type_annotation getter_setter_keyword_block",
//t    "variable_declaration : variable_declaration_head variable_name type_annotation initializer willSet_didSet_block",
//t    "variable_declaration : variable_declaration_head variable_name type_annotation willSet_didSet_block",
//t    "variable_declaration_head : attributes declaration_specifiers VAR",
//t    "variable_declaration_head : attributes VAR",
//t    "variable_declaration_head : declaration_specifiers VAR",
//t    "variable_declaration_head : VAR",
//t    "variable_name : identifier",
//t    "getter_setter_block : '{' getter_clause setter_clause '}'",
//t    "getter_setter_block : '{' getter_clause '}'",
//t    "getter_setter_block : '{' setter_clause getter_clause '}'",
//t    "getter_clause : attributes GET code_block",
//t    "getter_clause : GET code_block",
//t    "setter_clause : attributes SET setter_name code_block",
//t    "setter_clause : attributes SET code_block",
//t    "setter_clause : SET setter_name code_block",
//t    "setter_clause : SET code_block",
//t    "setter_name : '(' identifier ')'",
//t    "getter_setter_keyword_block : '{' getter_keyword_clause setter_keyword_clause '}'",
//t    "getter_setter_keyword_block : '{' getter_keyword_clause '}'",
//t    "getter_setter_keyword_block : '{' setter_keyword_clause getter_keyword_clause '}'",
//t    "getter_keyword_clause : attributes GET",
//t    "getter_keyword_clause : GET",
//t    "setter_keyword_clause : attributes SET",
//t    "setter_keyword_clause : SET",
//t    "willSet_didSet_block : '{' willSet_clause didSet_clause '}'",
//t    "willSet_didSet_block : '{' willSet_clause '}'",
//t    "willSet_didSet_block : '{' didSet_clause willSet_clause '}'",
//t    "willSet_clause : attributes WILLSET setter_name code_block",
//t    "willSet_clause : attributes WILLSET code_block",
//t    "willSet_clause : WILLSET setter_name code_block",
//t    "willSet_clause : WILLSET code_block",
//t    "didSet_clause : attributes DIDSET setter_name code_block",
//t    "didSet_clause : attributes DIDSET code_block",
//t    "didSet_clause : DIDSET setter_name code_block",
//t    "didSet_clause : DIDSET code_block",
//t    "typealias_declaration : typealias_head typealias_assignment",
//t    "typealias_head : TYPEALIAS typealias_name",
//t    "typealias_name : identifier",
//t    "typealias_assignment : '=' type",
//t    "function_declaration : function_head function_name generic_parameter_clause function_signature function_body",
//t    "function_declaration : function_head function_name function_signature function_body",
//t    "function_head : attributes declaration_specifiers FUNC",
//t    "function_head : attributes FUNC",
//t    "function_head : declaration_specifiers FUNC",
//t    "function_head : FUNC",
//t    "function_name : identifier",
//t    "function_name : operator_",
//t    "function_signature : parameter_clauses function_result",
//t    "function_signature : parameter_clauses",
//t    "function_result : ARROW_OP attributes type",
//t    "function_result : ARROW_OP type",
//t    "function_body : code_block",
//t    "parameter_clauses : parameter_clause",
//t    "parameter_clauses : parameter_clause parameter_clauses",
//t    "parameter_clause : '(' ')'",
//t    "parameter_clause : '(' parameter_list DOTDOTDOT_OP ')'",
//t    "parameter_clause : '(' parameter_list ')'",
//t    "parameter_list : parameter",
//t    "parameter_list : parameter ',' parameter_list",
//t    "parameter : parameter_head local_parameter_name type_annotation default_argument_clause",
//t    "parameter : parameter_head local_parameter_name type_annotation",
//t    "parameter : parameter_head type_annotation default_argument_clause",
//t    "parameter : parameter_head type_annotation",
//t    "parameter : attributes type",
//t    "parameter : type",
//t    "parameter_head : INOUT LET '#' parameter_name",
//t    "parameter_head : INOUT LET parameter_name",
//t    "parameter_head : INOUT '#' parameter_name",
//t    "parameter_head : INOUT parameter_name",
//t    "parameter_head : LET '#' parameter_name",
//t    "parameter_head : LET parameter_name",
//t    "parameter_head : '#' parameter_name",
//t    "parameter_head : parameter_name",
//t    "parameter_head : INOUT VAR '#' parameter_name",
//t    "parameter_head : INOUT VAR parameter_name",
//t    "parameter_head : VAR '#' parameter_name",
//t    "parameter_head : VAR parameter_name",
//t    "parameter_name : identifier",
//t    "parameter_name : '_'",
//t    "local_parameter_name : identifier",
//t    "local_parameter_name : '_'",
//t    "default_argument_clause : expression",
//t    "enum_declaration : attributes ENUM union_style_enum",
//t    "enum_declaration : ENUM union_style_enum",
//t    "enum_declaration : attributes ENUM raw_value_style_enum",
//t    "enum_declaration : ENUM raw_value_style_enum",
//t    "union_style_enum : enum_name generic_parameter_clause '{' union_style_enum_members '}'",
//t    "union_style_enum : enum_name generic_parameter_clause '{' '}'",
//t    "union_style_enum : enum_name '{' union_style_enum_members '}'",
//t    "union_style_enum : enum_name '{' '}'",
//t    "union_style_enum_members : union_style_enum_member",
//t    "union_style_enum_members : union_style_enum_member union_style_enum_members",
//t    "union_style_enum_member : declaration",
//t    "union_style_enum_member : union_style_enum_case_clause",
//t    "union_style_enum_case_clause : attributes CASE union_style_enum_case_list",
//t    "union_style_enum_case_clause : CASE union_style_enum_case_list",
//t    "union_style_enum_case_list : union_style_enum_case",
//t    "union_style_enum_case_list : union_style_enum_case ',' union_style_enum_case_list",
//t    "union_style_enum_case : enum_case_name tuple_type",
//t    "union_style_enum_case : enum_case_name",
//t    "enum_name : identifier",
//t    "enum_case_name : identifier",
//t    "raw_value_style_enum : enum_name generic_parameter_clause ':' type_identifier '{' raw_value_style_enum_members '}'",
//t    "raw_value_style_enum : enum_name generic_parameter_clause ':' type_identifier '{' '}'",
//t    "raw_value_style_enum : enum_name ':' type_identifier '{' raw_value_style_enum_members '}'",
//t    "raw_value_style_enum : enum_name ':' type_identifier '{' '}'",
//t    "raw_value_style_enum_members : raw_value_style_enum_member",
//t    "raw_value_style_enum_members : raw_value_style_enum_member raw_value_style_enum_members",
//t    "raw_value_style_enum_member : declaration",
//t    "raw_value_style_enum_member : raw_value_style_enum_case_clause",
//t    "raw_value_style_enum_case_clause : attributes CASE raw_value_style_enum_case_list",
//t    "raw_value_style_enum_case_clause : CASE raw_value_style_enum_case_list",
//t    "raw_value_style_enum_case_list : raw_value_style_enum_case",
//t    "raw_value_style_enum_case_list : raw_value_style_enum_case ',' raw_value_style_enum_case_list",
//t    "raw_value_style_enum_case : enum_case_name raw_value_assignment",
//t    "raw_value_style_enum_case : enum_case_name",
//t    "raw_value_assignment : '=' literal",
//t    "struct_declaration : attributes STRUCT struct_name generic_parameter_clause type_inheritance_clause struct_body",
//t    "struct_declaration : attributes STRUCT struct_name generic_parameter_clause struct_body",
//t    "struct_declaration : attributes STRUCT struct_name type_inheritance_clause struct_body",
//t    "struct_declaration : attributes STRUCT struct_name struct_body",
//t    "struct_declaration : STRUCT struct_name generic_parameter_clause type_inheritance_clause struct_body",
//t    "struct_declaration : STRUCT struct_name generic_parameter_clause struct_body",
//t    "struct_declaration : STRUCT struct_name type_inheritance_clause struct_body",
//t    "struct_declaration : STRUCT struct_name struct_body",
//t    "struct_name : identifier",
//t    "struct_body : '{' declarations '}'",
//t    "struct_body : '{' '}'",
//t    "class_declaration : attributes CLASS class_name generic_parameter_clause type_inheritance_clause class_body",
//t    "class_declaration : attributes CLASS class_name generic_parameter_clause class_body",
//t    "class_declaration : attributes CLASS class_name type_inheritance_clause class_body",
//t    "class_declaration : attributes CLASS class_name class_body",
//t    "class_declaration : CLASS class_name generic_parameter_clause type_inheritance_clause class_body",
//t    "class_declaration : CLASS class_name generic_parameter_clause class_body",
//t    "class_declaration : CLASS class_name type_inheritance_clause class_body",
//t    "class_declaration : CLASS class_name class_body",
//t    "class_name : identifier",
//t    "class_body : '{' declarations '}'",
//t    "class_body : '{' '}'",
//t    "protocol_declaration : attributes PROTOCOL protocol_name type_inheritance_clause protocol_body",
//t    "protocol_declaration : attributes PROTOCOL protocol_name protocol_body",
//t    "protocol_declaration : PROTOCOL protocol_name type_inheritance_clause protocol_body",
//t    "protocol_declaration : PROTOCOL protocol_name protocol_body",
//t    "protocol_name : identifier",
//t    "protocol_body : '{' protocol_member_declarations '}'",
//t    "protocol_body : '{' '}'",
//t    "protocol_member_declaration : protocol_property_declaration",
//t    "protocol_member_declaration : protocol_method_declaration",
//t    "protocol_member_declaration : protocol_initializer_declaration",
//t    "protocol_member_declaration : protocol_subscript_declaration",
//t    "protocol_member_declaration : protocol_associated_type_declaration",
//t    "protocol_member_declarations : protocol_member_declaration",
//t    "protocol_member_declarations : protocol_member_declaration protocol_member_declarations",
//t    "protocol_property_declaration : variable_declaration_head variable_name type_annotation getter_setter_keyword_block",
//t    "protocol_method_declaration : function_head function_name generic_parameter_clause function_signature",
//t    "protocol_method_declaration : function_head function_name function_signature",
//t    "protocol_initializer_declaration : initializer_head generic_parameter_clause parameter_clause",
//t    "protocol_initializer_declaration : initializer_head parameter_clause",
//t    "protocol_subscript_declaration : subscript_head subscript_result getter_setter_keyword_block",
//t    "protocol_associated_type_declaration : typealias_head type_inheritance_clause typealias_assignment",
//t    "protocol_associated_type_declaration : typealias_head type_inheritance_clause",
//t    "protocol_associated_type_declaration : typealias_head typealias_assignment",
//t    "protocol_associated_type_declaration : typealias_head",
//t    "initializer_declaration : initializer_head generic_parameter_clause parameter_clause initializer_body",
//t    "initializer_declaration : initializer_head parameter_clause initializer_body",
//t    "initializer_head : attributes CONVENIENCE INIT",
//t    "initializer_head : attributes INIT",
//t    "initializer_head : CONVENIENCE INIT",
//t    "initializer_head : INIT",
//t    "initializer_body : code_block",
//t    "deinitializer_declaration : attributes DEINIT code_block",
//t    "deinitializer_declaration : DEINIT code_block",
//t    "extension_declaration : EXTENSION type_identifier type_inheritance_clause extension_body",
//t    "extension_declaration : EXTENSION type_identifier extension_body",
//t    "extension_body : '{' declarations '}'",
//t    "extension_body : '{' '}'",
//t    "subscript_declaration : subscript_head subscript_result code_block",
//t    "subscript_declaration : subscript_head subscript_result getter_setter_block",
//t    "subscript_declaration : subscript_head subscript_result getter_setter_keyword_block",
//t    "subscript_head : attributes SUBSCRIPT parameter_clause",
//t    "subscript_head : SUBSCRIPT parameter_clause",
//t    "subscript_result : attributes type",
//t    "subscript_result : type",
//t    "operator_declaration : prefix_operator_declaration",
//t    "operator_declaration : postfix_operator_declaration",
//t    "operator_declaration : infix_operator_declaration",
//t    "prefix_operator_declaration : OPERATOR PREFIX operator_ '{' '}'",
//t    "postfix_operator_declaration : OPERATOR POSTFIX operator_ '{' '}'",
//t    "infix_operator_declaration : OPERATOR INFIX operator_ '{' infix_operator_attributes '}'",
//t    "infix_operator_declaration : OPERATOR INFIX operator_ '{' '}'",
//t    "infix_operator_attributes : precedence_clause associativity_clause",
//t    "infix_operator_attributes : precedence_clause",
//t    "infix_operator_attributes : associativity_clause",
//t    "precedence_clause : PRECEDENCE NUMBER",
//t    "associativity_clause : ASSOCIATIVITY associativity_value",
//t    "associativity_value : LEFT",
//t    "associativity_value : RIGHT",
//t    "associativity_value : NONE",
//t    "type : array_type",
//t    "type : function_type",
//t    "type : type_identifier",
//t    "type : tuple_type",
//t    "type : optional_type",
//t    "type : implicitly_unwrapped_optional_type",
//t    "type : protocol_composition_type",
//t    "type : metatype_type",
//t    "type_annotation : attributes type",
//t    "type_annotation : type",
//t    "type_identifier : type_name generic_argument_clause",
//t    "type_identifier : type_name",
//t    "type_identifier : type_name generic_argument_clause '.' type_identifier",
//t    "type_identifier : type_name '.' type_identifier",
//t    "type_name : identifier",
//t    "tuple_type : '(' tuple_type_body ')'",
//t    "tuple_type : '(' ')'",
//t    "tuple_type_body : tuple_type_element_list DOTDOTDOT_OP",
//t    "tuple_type_body : tuple_type_element_list",
//t    "tuple_type_element_list : tuple_type_element",
//t    "tuple_type_element_list : tuple_type_element ',' tuple_type_element_list",
//t    "tuple_type_element : attributes INOUT type",
//t    "tuple_type_element : attributes type",
//t    "tuple_type_element : INOUT type",
//t    "tuple_type_element : type",
//t    "tuple_type_element : INOUT element_name type_annotation",
//t    "tuple_type_element : element_name type_annotation",
//t    "element_name : identifier",
//t    "function_type : type ARROW_OP type",
//t    "array_type : type '[' ']'",
//t    "array_type : array_type '[' ']'",
//t    "optional_type : type '?'",
//t    "implicitly_unwrapped_optional_type : type '!'",
//t    "protocol_composition_type : PROTOCOL '<' protocol_identifier_list '>'",
//t    "protocol_composition_type : PROTOCOL '<' '>'",
//t    "protocol_identifier_list : protocol_identifier",
//t    "protocol_identifier_list : protocol_identifier ',' protocol_identifier_list",
//t    "protocol_identifier : type_identifier",
//t    "metatype_type : type '.' UTYPE",
//t    "metatype_type : type '.' UPROTOCOL",
//t    "type_inheritance_clause : ':' type_inheritance_list",
//t    "type_inheritance_list : type_identifier",
//t    "type_inheritance_list : type_identifier ',' type_inheritance_list",
//t    "pattern : wildcard_pattern type_annotation",
//t    "pattern : wildcard_pattern",
//t    "pattern : identifier_pattern type_annotation",
//t    "pattern : identifier_pattern",
//t    "pattern : value_binding_pattern",
//t    "pattern : tuple_pattern type_annotation",
//t    "pattern : tuple_pattern",
//t    "pattern : enum_case_pattern",
//t    "pattern : type_casting_pattern",
//t    "pattern : expression_pattern",
//t    "wildcard_pattern : '_'",
//t    "identifier_pattern : identifier",
//t    "value_binding_pattern : VAR pattern",
//t    "value_binding_pattern : LET pattern",
//t    "tuple_pattern : '(' tuple_pattern_element_list ')'",
//t    "tuple_pattern : '(' ')'",
//t    "tuple_pattern_element_list : tuple_pattern_element",
//t    "tuple_pattern_element_list : tuple_pattern_element ',' tuple_pattern_element_list",
//t    "tuple_pattern_element : pattern",
//t    "enum_case_pattern : type_identifier '.' enum_case_name tuple_pattern",
//t    "enum_case_pattern : type_identifier '.' enum_case_name",
//t    "enum_case_pattern : '.' enum_case_name tuple_pattern",
//t    "enum_case_pattern : '.' enum_case_name",
//t    "type_casting_pattern : is_pattern",
//t    "type_casting_pattern : as_pattern",
//t    "is_pattern : IS type",
//t    "as_pattern : pattern AS type",
//t    "expression_pattern : expression",
//t    "attribute : '@' attribute_name attribute_argument_clause",
//t    "attribute : '@' attribute_name",
//t    "attribute_name : identifier",
//t    "attribute_argument_clause : '(' balanced_tokens ')'",
//t    "attribute_argument_clause : '(' ')'",
//t    "attributes : attribute",
//t    "attributes : attribute attributes",
//t    "balanced_tokens : balanced_token",
//t    "balanced_tokens : balanced_token balanced_tokens",
//t    "balanced_token : '(' balanced_tokens ')'",
//t    "balanced_token : '(' ')'",
//t    "balanced_token : '[' balanced_tokens ']'",
//t    "balanced_token : '[' ']'",
//t    "balanced_token : '{' balanced_tokens '}'",
//t    "balanced_token : '{' '}'",
//t    "balanced_token : BALANCED_TEXT",
//t    "expression : prefix_expression binary_expressions",
//t    "expression : prefix_expression",
//t    "expression_list : expression",
//t    "expression_list : expression ',' expression_list",
//t    "prefix_expression : prefix_operator postfix_expression",
//t    "prefix_expression : in_out_expression",
//t    "in_out_expression : '&' identifier",
//t    "binary_expression : binary_operator prefix_expression",
//t    "binary_expression : assignment_operator prefix_expression",
//t    "binary_expression : conditional_operator prefix_expression",
//t    "binary_expression : type_casting_operator",
//t    "binary_expressions : binary_expression",
//t    "binary_expressions : binary_expression binary_expressions",
//t    "assignment_operator : '='",
//t    "conditional_operator : '?' expression ':'",
//t    "type_casting_operator : IS type",
//t    "type_casting_operator : AS '?' type",
//t    "type_casting_operator : AS type",
//t    "primary_expression : identifier generic_argument_clause",
//t    "primary_expression : identifier",
//t    "primary_expression : literal_expression",
//t    "primary_expression : self_expression",
//t    "primary_expression : superclass_expression",
//t    "primary_expression : closure_expression",
//t    "primary_expression : parenthesized_expression",
//t    "primary_expression : implicit_member_expression",
//t    "primary_expression : wildcard_expression",
//t    "literal_expression : literal",
//t    "literal_expression : array_literal",
//t    "literal_expression : dictionary_literal",
//t    "literal_expression : FILE_DEFINE",
//t    "literal_expression : LINE_DEFINE",
//t    "literal_expression : COLUMN_DEFINE",
//t    "literal_expression : FUNCTION_DEFINE",
//t    "array_literal : '[' array_literal_items ']'",
//t    "array_literal : '[' ']'",
//t    "array_literal_items : array_literal_item ','",
//t    "array_literal_items : array_literal_item",
//t    "array_literal_items : array_literal_item ',' array_literal_items",
//t    "array_literal_item : expression",
//t    "dictionary_literal : '[' dictionary_literal_items ']'",
//t    "dictionary_literal : '[' ':' ']'",
//t    "dictionary_literal_items : dictionary_literal_item ','",
//t    "dictionary_literal_items : dictionary_literal_item",
//t    "dictionary_literal_items : dictionary_literal_item ',' dictionary_literal_items",
//t    "dictionary_literal_item : expression ':' expression",
//t    "self_expression : SELF",
//t    "self_expression : SELF '.' identifier",
//t    "self_expression : SELF '[' expression ']'",
//t    "self_expression : SELF '.' INIT",
//t    "superclass_expression : superclass_method_expression",
//t    "superclass_expression : superclass_subscript_expression",
//t    "superclass_expression : superclass_initializer_expression",
//t    "superclass_method_expression : SUPER '.' identifier",
//t    "superclass_subscript_expression : SUPER '[' expression ']'",
//t    "superclass_initializer_expression : SUPER '.' INIT",
//t    "closure_expression : '{' closure_signature statements '}'",
//t    "closure_expression : '{' statements '}'",
//t    "closure_signature : parameter_clause function_result IN",
//t    "closure_signature : parameter_clause IN",
//t    "closure_signature : identifier_list function_result IN",
//t    "closure_signature : identifier_list IN",
//t    "closure_signature : capture_list parameter_clause function_result IN",
//t    "closure_signature : capture_list parameter_clause IN",
//t    "closure_signature : capture_list identifier_list function_result IN",
//t    "closure_signature : capture_list identifier_list IN",
//t    "closure_signature : capture_list IN",
//t    "capture_list : '[' capture_specifier expression ']'",
//t    "capture_specifier : WEAK",
//t    "capture_specifier : UNOWNED",
//t    "capture_specifier : UNOWNED_SAFE",
//t    "capture_specifier : UNOWNED_UNSAFE",
//t    "implicit_member_expression : '.' identifier",
//t    "parenthesized_expression : '(' expression_element_list ')'",
//t    "parenthesized_expression : '(' ')'",
//t    "expression_element_list : expression_element",
//t    "expression_element_list : expression_element ',' expression_element_list",
//t    "expression_element : expression",
//t    "expression_element : identifier ':' expression",
//t    "wildcard_expression : '_'",
//t    "postfix_expression : primary_expression",
//t    "postfix_expression : postfix_expression postfix_operator",
//t    "postfix_expression : function_call_expression",
//t    "postfix_expression : initializer_expression",
//t    "postfix_expression : explicit_member_expression",
//t    "postfix_expression : postfix_self_expression",
//t    "postfix_expression : dynamic_type_expression",
//t    "postfix_expression : subscript_expression",
//t    "postfix_expression : forced_value_expression",
//t    "postfix_expression : optional_chaining_expression",
//t    "function_call_expression : postfix_expression parenthesized_expression",
//t    "function_call_expression : postfix_expression parenthesized_expression trailing_closure",
//t    "function_call_expression : postfix_expression trailing_closure",
//t    "trailing_closure : closure_expression",
//t    "initializer_expression : postfix_expression '.' INIT",
//t    "explicit_member_expression : postfix_expression '.' NUMBER",
//t    "explicit_member_expression : postfix_expression '.' identifier generic_argument_clause",
//t    "explicit_member_expression : postfix_expression '.' identifier",
//t    "postfix_self_expression : postfix_expression '.' SELF",
//t    "dynamic_type_expression : postfix_expression '.' DYNAMICTYPE",
//t    "subscript_expression : postfix_expression '[' expression_list ']'",
//t    "forced_value_expression : postfix_expression '!'",
//t    "optional_chaining_expression : postfix_expression '?'",
//t    "identifier : IDENTIFIER",
//t    "identifier : '$' NUMBER",
//t    "identifier_list : identifier",
//t    "identifier_list : identifier ',' identifier_list",
//t    "literal : INTEGER_LITERAL",
//t    "literal : FLOATING_POINT_LITERAL",
//t    "literal : STRING_LITERAL",
//t    "operator_ : OPERATOR",
//t    "binary_operator : operator_",
//t    "prefix_operator : operator_",
//t    "postfix_operator : operator_",
//t  };
//t public static string getRule (int index) {
//t    return yyRule [index];
//t }
//t}
  protected static readonly string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"'!'",null,"'#'","'$'",null,"'&'",
    null,"'('","')'",null,null,"','",null,"'.'",null,null,null,null,null,
    null,null,null,null,null,null,"':'","';'","'<'","'='","'>'","'?'",
    "'@'",null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    "'['",null,"']'",null,"'_'",null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,"'{'",null,"'}'",null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    "IDENTIFIER","NUMBER","NEWLINE","FOR","IN","DO","WHILE","IF","ELSE",
    "SWITCH","CASE","DEFAULT","WHERE","BREAK","CONTINUE","FALLTHROUGH",
    "RETURN","EQEQ_OP","CLASS","MUTATING","NONMUTATING","OVERRIDE",
    "STATIC","UNOWNED","UNOWNED_SAFE","UNOWNED_UNSAFE","WEAK","IMPORT",
    "TYEPALIAS","STRUCT","ENUM","PROTOCOL","VAR","FUNC","LET","GET","SET",
    "WILLSET","DIDSET","TYPEALIAS","ARROW_OP","DOTDOTDOT_OP","INOUT",
    "CONVENIENCE","INIT","DEINIT","EXTENSION","SUBSCRIPT","OPERATOR",
    "PREFIX","POSTFIX","INFIX","PRECEDENCE","ASSOCIATIVITY","LEFT",
    "RIGHT","NONE","IS","AS","BALANCED_TEXT","FILE_DEFINE","LINE_DEFINE",
    "COLUMN_DEFINE","FUNCTION_DEFINE","SELF","SUPER","DYNAMICTYPE",
    "UTYPE","UPROTOCOL","INTEGER_LITERAL","FLOATING_POINT_LITERAL",
    "STRING_LITERAL",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
//t  public static string yyname (int token) {
//t    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
//t    string name;
//t    if ((name = yyNames[token]) != null) return name;
//t    return "[unknown]";
//t  }

  //int yyExpectingState;
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
//t    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
	protected bool use_global_stacks;
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
//t      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
//t            if (debug != null)
//t              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              //yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
//t              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
//t                  if (debug != null)
//t                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
//t                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
//t              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
//t                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
//t              if (debug != null)
//t                debug.discard(yyState, yyToken, yyname(yyToken),
//t  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
//t        if (debug != null)
//t          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
//t          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
//t            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
//t        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

/*
 All more than 3 lines long rules are wrapped into a method
*/
#line default
   static readonly short [] yyLhs  = {              -1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    8,    8,    4,    4,    4,    4,    9,    9,    9,
    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
    9,    9,    9,   13,   13,   10,   11,   18,   18,   12,
    5,    5,   19,   19,   21,   21,   22,   22,   20,   20,
   23,   23,   24,   24,   24,   24,   25,   28,   28,   27,
   27,   26,   29,   30,    6,    6,   31,   32,    7,    7,
    7,    7,   34,   34,   35,   35,   36,   37,   37,   38,
   38,   39,   39,   41,   41,   41,   40,   45,   45,   46,
   46,   47,   47,   48,   49,   50,   50,   51,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,   66,   66,   67,   67,   68,   68,   68,   68,
   68,   68,   68,   68,   68,    0,    0,   14,   14,   53,
   53,   53,   53,   70,   70,   70,   70,   70,   70,   70,
   71,   71,   72,   72,   54,   54,   54,   54,   74,   74,
   75,   75,   76,   15,   15,   15,   15,   15,   15,   77,
   77,   77,   77,   78,   80,   80,   80,   83,   83,   84,
   84,   84,   84,   85,   81,   81,   81,   86,   86,   87,
   87,   82,   82,   82,   88,   88,   88,   88,   89,   89,
   89,   89,   55,   90,   92,   91,   56,   56,   93,   93,
   93,   93,   94,   94,   95,   95,   98,   98,   96,   97,
   97,   99,   99,   99,  100,  100,  101,  101,  101,  101,
  101,  101,  102,  102,  102,  102,  102,  102,  102,  102,
  102,  102,  102,  102,  105,  105,  103,  103,  104,   57,
   57,   57,   57,  106,  106,  106,  106,  109,  109,  110,
  110,  111,  111,  112,  112,  113,  113,  108,  114,  107,
  107,  107,  107,  116,  116,  117,  117,  118,  118,  119,
  119,  120,  120,  121,   58,   58,   58,   58,   58,   58,
   58,   58,  123,  125,  125,   59,   59,   59,   59,   59,
   59,   59,   59,  126,  127,  127,   60,   60,   60,   60,
  128,  129,  129,  131,  131,  131,  131,  131,  130,  130,
  132,  133,  133,  134,  134,  135,  136,  136,  136,  136,
   61,   61,  137,  137,  137,  137,  140,   62,   62,   63,
   63,  141,  141,   64,   64,   64,  138,  138,  139,  139,
   65,   65,   65,  142,  143,  144,  144,  145,  145,  145,
  146,  147,  148,  148,  148,   52,   52,   52,   52,   52,
   52,   52,   52,   79,   79,   43,   43,   43,   43,   42,
  115,  115,  154,  154,  155,  155,  156,  156,  156,  156,
  156,  156,  157,  150,  149,  149,  151,  152,   44,   44,
  158,  158,  159,  153,  153,  124,  160,  160,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   17,  161,  162,
  163,  163,  164,  164,  168,  168,  169,  165,  165,  165,
  165,  166,  166,  170,  171,  167,  172,  172,  173,  174,
  174,   69,   69,  175,  175,  176,  176,  176,  176,  176,
  176,  176,    2,    2,   16,   16,  177,  177,  181,  182,
  182,  182,  182,  178,  178,  184,  185,  186,  186,  186,
  187,  187,  187,  187,  187,  187,  187,  187,  187,  188,
  188,  188,  188,  188,  188,  188,  195,  195,  197,  197,
  197,  198,  196,  196,  199,  199,  199,  200,  189,  189,
  189,  189,  190,  190,  190,  201,  202,  203,  191,  191,
  204,  204,  204,  204,  204,  204,  204,  204,  204,  206,
  207,  207,  207,  207,  193,  192,  192,  208,  208,  209,
  209,  194,  180,  180,  180,  180,  180,  180,  180,  180,
  180,  180,  211,  211,  211,  219,  212,  213,  213,  213,
  214,  215,  216,  217,  218,   33,   33,  205,  205,  122,
  122,  122,   73,  183,  179,  210,
  };
   static readonly short [] yyLen = {           2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    1,    2,    1,    1,    1,    1,    7,    6,    6,
    5,    6,    5,    5,    4,    9,    8,    8,    7,    8,
    7,    7,    6,    1,    1,    5,    3,    1,    1,    4,
    1,    1,    4,    3,    1,    1,    2,    2,    5,    4,
    1,    2,    2,    2,    2,    2,    3,    2,    1,    1,
    2,    2,    2,    1,    2,    2,    2,    1,    1,    1,
    1,    1,    2,    1,    2,    1,    1,    2,    1,    4,
    3,    1,    3,    1,    3,    3,    2,    1,    3,    1,
    1,    3,    3,    3,    3,    1,    3,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    2,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    0,    3,    2,    4,
    3,    3,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    3,    1,    1,    4,    3,    3,    2,    1,    3,
    2,    1,    1,    2,    4,    4,    4,    5,    4,    3,
    2,    2,    1,    1,    4,    3,    4,    3,    2,    4,
    3,    3,    2,    3,    4,    3,    4,    2,    1,    2,
    1,    4,    3,    4,    4,    3,    3,    2,    4,    3,
    3,    2,    2,    2,    1,    2,    5,    4,    3,    2,
    2,    1,    1,    1,    2,    1,    3,    2,    1,    1,
    2,    2,    4,    3,    1,    3,    4,    3,    3,    2,
    2,    1,    4,    3,    3,    2,    3,    2,    2,    1,
    4,    3,    3,    2,    1,    1,    1,    1,    1,    3,
    2,    3,    2,    5,    4,    4,    3,    1,    2,    1,
    1,    3,    2,    1,    3,    2,    1,    1,    1,    7,
    6,    6,    5,    1,    2,    1,    1,    3,    2,    1,
    3,    2,    1,    2,    6,    5,    5,    4,    5,    4,
    4,    3,    1,    3,    2,    6,    5,    5,    4,    5,
    4,    4,    3,    1,    3,    2,    5,    4,    4,    3,
    1,    3,    2,    1,    1,    1,    1,    1,    1,    2,
    4,    4,    3,    3,    2,    3,    3,    2,    2,    1,
    4,    3,    3,    2,    2,    1,    1,    3,    2,    4,
    3,    3,    2,    3,    3,    3,    3,    2,    2,    1,
    1,    1,    1,    5,    5,    6,    5,    2,    1,    1,
    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    2,    1,    2,    1,    4,    3,    1,
    3,    2,    2,    1,    1,    3,    3,    2,    2,    1,
    3,    2,    1,    3,    3,    3,    2,    2,    4,    3,
    1,    3,    1,    3,    3,    2,    1,    3,    2,    1,
    2,    1,    1,    2,    1,    1,    1,    1,    1,    1,
    2,    2,    3,    2,    1,    3,    1,    4,    3,    3,
    2,    1,    1,    2,    3,    1,    3,    2,    1,    3,
    2,    1,    2,    1,    2,    3,    2,    3,    2,    3,
    2,    1,    2,    1,    1,    3,    2,    1,    2,    2,
    2,    2,    1,    1,    2,    1,    3,    2,    3,    2,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    3,    2,    2,    1,
    3,    1,    3,    3,    2,    1,    3,    3,    1,    3,
    4,    3,    1,    1,    1,    3,    4,    3,    4,    3,
    3,    2,    3,    2,    4,    3,    4,    3,    2,    4,
    1,    1,    1,    1,    2,    3,    2,    1,    3,    1,
    3,    1,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    3,    2,    1,    3,    3,    4,    3,
    3,    3,    4,    2,    2,    1,    2,    1,    3,    1,
    1,    1,    1,    1,    1,    1,
  };
   static readonly short [] yyDefRed = {            0,
  546,    0,    0,    0,    0,    0,    0,    0,   77,    0,
    0,  118,  119,  120,  121,  122,  123,  124,  125,    0,
    0,    0,    0,  163,  202,    0,    0,    0,  326,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  126,   14,   15,   16,   17,  101,
   41,   42,    0,    0,   68,   69,   70,   71,   72,   99,
  100,  102,  103,  104,  105,  106,  107,  108,  109,  110,
  111,  112,    0,    0,    0,  555,    0,    0,    0,    0,
    0,  341,  342,  343,    0,    0,    0,  448,  117,    0,
    0,  553,    0,    0,    0,    0,  409,    0,    0,   34,
   35,    0,    0,    0,    0,    0,    0,    0,    0,  403,
    0,  406,  407,  408,  422,  423,    0,    0,   38,   39,
    0,   45,   46,    0,    0,   73,   75,   78,  294,    0,
  136,  134,  135,  137,  138,  139,  140,  143,    0,  133,
    0,  144,  283,    0,  258,  241,  243,    0,  301,    0,
    0,    0,  426,    0,  148,    0,  195,  194,  325,  329,
  370,    0,    0,  338,    0,    0,    0,  429,    0,  449,
  547,   13,    1,    2,    3,    4,    5,    6,    7,    8,
    9,   10,   11,   65,   66,   67,  162,  201,    0,  116,
    0,    0,    0,    0,    0,  161,  200,    0,    0,  324,
    0,    0,    0,    0,  154,    0,    0,  193,  203,  204,
    0,    0,    0,    0,    0,    0,  358,  362,    0,    0,
  359,    0,    0,  357,  360,  361,  363,  433,    0,    0,
  456,    0,  554,  443,    0,    0,    0,    0,  453,  473,
  474,  475,  476,    0,    0,  550,  551,  552,    0,    0,
    0,  522,    0,    0,  470,    0,  523,  463,  464,  465,
  466,  467,  468,  469,  471,  472,  493,  494,  495,  525,
  526,  527,  528,  529,  530,  531,  532,    0,    0,    0,
    0,    0,    0,  414,    0,    0,    0,    0,  259,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  399,  401,  404,  129,    0,    0,   37,    0,    0,
    0,    0,    0,    0,  293,  132,    0,    0,    0,    0,
  282,    0,    0,    0,    0,    0,  300,  153,  151,    0,
    0,    0,  331,    0,    0,    0,  212,    0,  236,    0,
    0,    0,    0,    0,    0,  230,    0,    0,    0,    0,
  427,  147,    0,    0,  131,    0,  240,  242,    0,  146,
  323,  328,  337,  160,  199,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  327,  322,    0,    0,
  372,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  387,  388,    0,    0,  334,  335,  336,    0,    0,
    0,    0,    0,  455,  450,  451,  452,    0,    0,    0,
    0,  517,  520,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  515,    0,  478,    0,    0,    0,    0,
    0,  461,    0,    0,  545,  544,  556,  536,    0,  524,
  535,    0,   25,    0,    0,    0,    0,  413,    0,  420,
    0,  446,    0,    0,    0,    0,    0,    0,    0,  369,
    0,    0,    0,  128,   40,    0,   43,    0,    0,   50,
    0,    0,    0,    0,    0,  296,    0,    0,    0,  396,
    0,  291,  292,  142,  285,    0,    0,  280,  281,    0,
  247,  250,    0,    0,    0,  251,    0,    0,    0,  303,
    0,    0,    0,    0,    0,    0,    0,  304,  305,  306,
  307,  308,    0,    0,  299,  150,  333,    0,  330,    0,
  235,  234,    0,  228,    0,    0,    0,  226,  229,    0,
    0,  214,    0,  238,    0,    0,    0,    0,    0,    0,
  442,    0,  431,    0,    0,    0,    0,    0,    0,  289,
  130,    0,    0,  278,    0,  298,  145,    0,  155,    0,
  156,  157,  159,    0,  209,  198,    0,  205,  211,    0,
   81,    0,    0,    0,  321,  390,  393,    0,    0,    0,
    0,    0,    0,  371,  373,    0,  382,    0,  394,  395,
  385,    0,    0,    0,    0,    0,    0,    0,  386,    0,
  457,  492,  490,    0,  498,  496,    0,    0,  516,    0,
  512,  513,  514,  511,    0,  500,    0,  502,    0,    0,
  504,    0,  509,    0,    0,    0,  484,    0,  477,    0,
  483,    0,  538,  537,  541,  542,    0,    0,  534,   24,
    0,   23,    0,    0,    0,    0,    0,  416,    0,   21,
    0,   36,   95,    0,  368,  418,   47,   48,    0,    0,
    0,   62,   49,   52,   55,   53,   56,   54,  114,  295,
    0,  290,  284,  279,  253,    0,    0,    0,  246,  249,
    0,  245,    0,    0,    0,  164,    0,  319,    0,    0,
  302,  310,    0,  315,    0,  332,  233,  227,    0,  232,
    0,  224,  225,  213,  216,  239,  219,    0,  344,  345,
    0,    0,  347,    0,    0,  350,  437,    0,  441,    0,
  439,    0,  430,  435,    0,  287,  288,    0,  276,  277,
  297,    0,    0,    0,    0,    0,    0,  158,  197,    0,
    0,    0,   87,    0,   90,   91,   80,   83,   85,   86,
  389,    0,  381,    0,  376,  169,    0,  173,    0,    0,
    0,    0,  166,    0,    0,    0,    0,    0,  181,  176,
    0,    0,  179,    0,    0,  491,  497,  521,  519,    0,
  549,  501,  499,  503,  506,    0,  508,    0,  488,  482,
  481,    0,  487,  539,  543,   22,   33,    0,    0,    0,
    0,    0,    0,   20,    0,   19,   97,    0,   58,   57,
   61,  398,    0,  256,  252,    0,  263,  266,    0,    0,
    0,  267,  244,    0,    0,  317,    0,  313,  314,    0,
  316,  231,  223,  217,  351,  353,  354,  355,  352,  346,
  348,  436,  440,  438,  286,  275,  188,    0,  192,    0,
    0,    0,  183,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  392,    0,  172,  168,  171,    0,    0,  165,
    0,  167,  180,  175,  178,  177,  510,  505,  507,   32,
   31,    0,   29,    0,    0,    0,   18,   64,   63,  255,
    0,  269,    0,    0,  262,  265,  261,    0,  311,  312,
    0,  187,  191,  186,    0,  190,    0,  182,  184,   94,
   92,   93,   89,  174,  170,   30,   28,   27,    0,    0,
  272,    0,  268,  260,  185,  189,   26,  274,  271,
  };
  protected static readonly short [] yyDgoto  = {            37,
   38,  153,   40,   41,   42,   43,   44,  306,   46,   47,
   48,   49,   99,  377,   50,  101,  154,  121,   51,   52,
  124,  467,  471,  472,  473,  474,  660,  661,  809,  889,
   53,   54,  161,   56,   57,   58,   59,  213,  373,  572,
  374,  104,  217,  218,  743,  744,  745,  746,  297,  457,
  458,  300,   60,   61,   62,   63,   64,   65,   66,   67,
   68,   69,   70,   71,   72,  478,   73,   74,   75,  139,
  140,  141,   76,  155,  156,  329,   77,  206,  302,  397,
  398,  563,  595,  596,  759,  597,  598,  735,  736,   78,
  208,  158,   79,  211,  370,  566,  371,  568,  372,  343,
  344,  345,  537,  707,  346,  146,  147,  148,  494,  495,
  496,  675,  676,  677,  221,  820,  821,  822,  892,  893,
  921,  255,  144,  314,  321,  130,  315,  150,  327,  506,
  507,  508,  509,  510,  511,  512,   80,   81,  222,  378,
  333,   82,   83,   84,  714,  715,  716,  839,  223,  224,
  225,  226,  227,  385,  386,  387,  388,  578,  579,  480,
  108,  109,  110,  111,  112,  113,  114,  287,  288,  115,
  116,   85,  169,  351,  546,  547,   86,  234,   87,  256,
   88,  235,  236,  237,  238,  239,  257,  258,  259,  260,
  438,  262,  263,  264,  265,  266,  428,  429,  430,  431,
  267,  268,  269,  421,  422,  423,  615,  415,  416,  440,
  270,  271,  272,  273,  274,  275,  276,  277,  441,
  };
  protected static readonly short [] yySindex = {         4080,
    0, 3429,  -51, 1699, 1699,   37,  185,  185,    0,   37,
  185,    0,    0,    0,    0,    0,    0,    0,    0,  409,
  185,  185,  185,    0,    0,  416,  185, -211,    0,  -51,
  185,   58,  536,  185,  185, -102,    0, 4080,   -4,   17,
  107,  141,  -48,  211,    0,    0,    0,    0,    0,    0,
    0,    0,  575,  255,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  573,  510, 5419,    0,  416,  167,   33,  588,
  508,    0,    0,    0,  387,  417,  634,    0,    0,  416,
  416,    0,  229,   45, 1302,  185,    0,  454,  466,    0,
    0, -111,    0,  673,  469,  275,  711,  508,  508,    0,
  508,    0,    0,    0,    0,    0, 3851,  274,    0,    0,
  -51,    0,    0,  -51,  487,    0,    0,    0,    0,  580,
    0,    0,    0,    0,    0,    0,    0,    0,   33,    0,
  630,    0,    0,  625,    0,    0,    0,  682,    0,  385,
  416,  208,    0,  -13,    0,  593,    0,    0,    0,    0,
    0,  389,  527,    0,  405,  405,  405,    0,  705,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  416,    0,
  185,  409,  185,  185,  185,    0,    0,  416,  459,    0,
  -51,   58,  586,    0,    0,  508,  229,    0,    0,    0,
  588,  185,   58,  -51,  707,  591,    0,    0,  439,  229,
    0,  660,  704,    0,    0,    0,    0,    0,  229,  563,
    0,   37,    0,    0,  417,   37,   37,   37,    0,    0,
    0,    0,    0,  618,  621,    0,    0,    0,   15, 3801,
  185,    0,   51,  744,    0,   97,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  517,  517,  439,
  -12,  780,   72,    0,  790,  517,  815,  825,    0,  818,
   37,   74,   37,  229,  229,  185,  832,  185,  594,  439,
  229,    0,    0,    0,    0,  757, 1699,    0,  620,  233,
 5030,  185,  519,  769,    0,    0,   33, 5069,  531,  770,
    0, 4596,  185,  592, 3266,  773,    0,    0,    0,  416,
 5131,  775,    0,  518,  525,  325,    0,  279,    0,    0,
  439,  229,   66,  855,  161,    0,  778,  779,  785,    9,
    0,    0,  580,   33,    0,  625,    0,    0,  385,    0,
    0,    0,    0,    0,    0,  416,   35,  439,   58,  -51,
  613,   58,  -24,  869,  860,  -51,    0,    0,  431,  229,
    0,    0,  439,  456,  878,  622,  892,  508,  229,  -87,
  844,    0,    0,  439, 3729,    0,    0,    0,  852,  439,
  229,  439,  888,    0,    0,    0,    0,    5,   37,   31,
   37,    0,    0,  889,  916,  914,  496,  834,  926,   -8,
 4080,  268,  509,    0,  882,    0,  913,  883,  933,  885,
  937,    0,  -26,   37,    0,    0,    0,    0,  859,    0,
    0,  -51,    0,  -12,   44,  925,   79,    0,  416,    0,
  454,    0,  -12,  939,  -51,  439,  934,  955,  439,    0,
  185,  818,  439,    0,    0,  353,    0,  416,  944,    0,
  879,  449, 3918, 3988,  536,    0, 4494,  881,  963,    0,
  769,    0,    0,    0,    0,  887,  770,    0,    0,  185,
    0,    0, 2585,  890, 5100,    0,  891, 4824,  185,    0,
  483, 2406,  185,  643,   33,  895, 2507,    0,    0,    0,
    0,    0,  588,  508,    0,    0,    0,  897,    0,  279,
    0,    0,  279,    0,  562,  611,  279,    0,    0,  439,
  969,    0,  623,    0,    0,   37,  508,  898,  901,  380,
    0,   25,    0,  -20,  -29,  972,   28,  519,  769,    0,
    0,  531,  770,    0,  773,    0,    0, 3657,    0,  893,
    0,    0,    0,  -51,    0,    0,  508,    0,    0,  185,
    0,  966,  185,  206,    0,    0,    0,  968,  973,  439,
  508,  229,  439,    0,    0,  183,    0,  439,    0,    0,
    0,  -51,  516, 4312,   60,   91,  104,  114,    0,  439,
    0,    0,    0,  938,    0,    0,  940,   37,    0,   57,
    0,    0,    0,    0,   37,    0,  185,    0,  771,  910,
    0,  777,    0,  926,  296,  308,    0,   37,    0,   37,
    0,   37,    0,    0,    0,    0,  744,  943,    0,    0,
  -51,    0,  -51,  998,   84,  108,  981,    0,  -51,    0,
  -12,    0,    0,  229,    0,    0,    0,    0, -195,  983,
  416,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  185,    0,    0,    0,    0, 1000, 1002,  185,    0,    0,
 4870,    0,  920,  923,  523,    0,  508,    0,  167,  588,
    0,    0,   58,    0,  927,    0,    0,    0,  279,    0,
  279,    0,    0,    0,    0,    0,    0,   37,    0,    0,
  793,  534,    0,  928,  745,    0,    0, 1017,    0,  936,
    0,  970,    0,    0,  769,    0,    0,  770,    0,    0,
    0,  516,  516, 5389,  245,  -35,  -21,    0,    0,  439,
  229,   71,    0, 1015,    0,    0,    0,    0,    0,    0,
    0,  185,    0,  439,    0,    0,  185,    0,  -51,  -51,
  516,  516,    0,  772,  941,  -51,  776,  942,    0,    0,
  783,  945,    0,  781,  946,    0,    0,    0,    0,  971,
    0,    0,    0,    0,    0,  801,    0,  808,    0,    0,
    0,  913,    0,    0,    0,    0,    0,  -51,  -51, 1031,
  -51, 1040,  133,    0,  -51,    0,    0,   37,    0,    0,
    0,    0,  185,    0,    0,  185,    0,    0, 2958,  957,
 5176,    0,    0, 4902,  927,    0,   58,    0,    0,  111,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  -51,    0,  -51,
  516,  516,    0,  788,  959,  791,  962,  444,  439,  185,
  206,  185,    0, 1051,    0,    0,    0,  -51,  516,    0,
  -51,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -51,    0,  -51,  -51, 1054,    0,    0,    0,    0,
 1035,    0, 1056,  185,    0,    0,    0,  976,    0,    0,
  505,    0,    0,    0,  -51,    0,  -51,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -51,  578,
    0,  185,    0,    0,    0,    0,    0,    0,    0,
  };
  protected static readonly short [] yyRindex = {         1098,
    0,    0,    0,    0,    0,    0,  257,  292,    0,  293,
  649,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  646,    0,    0,    0,    0,   61,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  626,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 4030, 4350,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   18,    0,    0,
    0,    0, 2311, 1016,    0,    0,    0, 3494, 3544,    0,
 3594,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 4703,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 4636,    0, 4742,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 4262,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  649,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  965,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  979,    0,
    0,    0, 1392,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 4388,    0,    0,    0,    0,    0,
    0,    0,    0, 1848,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1442,    0, 2684,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3156, 3225, 2734,
    0,    0,    0,    0,    0,  715,    0, 1062,    0, 2784,
    0,    0,    0,    0,    0,    0, 1112,    0,    0, 2363,
    0,    0,    0,    0,    0,    0,    0,    0,  312,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 4425,
   -7,    0,    0,  100,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 4781,    0,    0,
 3018, 5238,    0,  146,  147,    0,    0,    0,    0,    0,
    0, 1573,   19,    0,    0, 1063,  116,    0,    0,    0,
    0,    0,    0,  982,    0,    0,    0,    0,    0, 1989,
    0, 2193,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1065,    0,    0,   96,    0,
    0,    0,    0,    0,    0,    0,  117,    0, 1019,    0,
 1021,    0,    0,    0,    0,    0,    0,    0, 1785,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  556,    0,    0,    0,    0, 3056,    0, 1046,  364,    0,
    0, 3106, 2635,    0,    0,    0,    0,    0,    0,    0,
    0,  990,    0,    0,    0,    0,  993,    0, 2829,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  994,    0,    0,    0,    0,    0,
    0,    0,    0, 3398,    0,    0,  995,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  101,
    0,    0,    0,    0, 1053,  135,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  482,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1059,  139,
    0,    0,  143,    0,    0,    0,    0, 1898,    0,    0,
    0,  248,  118,    0,    0,    0,    0,    0,    0, 2261,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  374,    0,    0,    0,    0,    0, 1029,
    0, 1030,    0,    0,    0,    0, 1505,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  583,    0,
 1066,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4948, 4450,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 5359,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  186,    0,    0,
    0,    0,    0,    0, 1001,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 5272,
    0,    0,    0, 1067,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  216,    0,    0,    0,    0,    0,  262,
  125,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1003,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 5321,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 4533,    0, 4991,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,
  };
  protected static readonly short [] yyGindex = {            0,
    0,  574,   12, 1072,    0,    0,    0,   14,    0,    0,
    0,    0, 1032,    2,  507,  241,   11,  823,  665, 1080,
    0,    0,  662,    0,    0,    0,  474,    0,    0,    0,
    0,  814,    1,    0,    0,    0,    0,  -90,  564,    0,
    0, -205,   82, -556,  276,    0,    0,    0, -252,  486,
    0,    6,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -261,   40,    0,  213,  950,
  327,    0,  119,  -62,    0,  782, -246,  633,  -78,  784,
 -348,  587,  547,  551,  128,  557,  560,  418,  423,   63,
 -297,    0,   76,  654, -363,  596,  789,  -40,  -32,  629,
    0,    0,    0,  455,  -95,  974,  975,    0,  228,    0,
    0, -188,    0,  -92,  488,    7,    0,    0, -376,    0,
    0,  244,  984,  277, -275,  987, -267,  977, -192,  659,
    0,    0,    0,    0,    0,    0,  158,  170,  653,  803,
  848,    0,    0,    0,    0,    0,  468,    0,    0,    0,
    0,    0,    0,    0,  595,    0,  805,  434,    0,  520,
    0,    0,    0, -260,    0,    0,    0,  738,    0,    0,
    0,    0,    0,    0,  207,    0,  697,  953,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1103,  952,    0,    0,    0,    0,  565,    0,  561,    0,
    0,    0,    0,    0, -258,    0,    0,  582,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  755,
  };
  protected static readonly short [] yyTable = {           164,
   55,  432,  103,  290,  118,  564,  375,   55,   55,   36,
  542,  129,  102,   45,  205,  120,  123,  750,  562,  542,
  138,  143,  145,  149,   35,   35,  103,  157,   34,  450,
  303,  160,  304,  222,  168,  170,  222,  571,   55,  313,
   36,  106,   34,  488,  489,  482,  483,  214,  542,  543,
   36,  172,   35,  319,  174,  412,  486,  324,  426,  380,
   12,  545,  380,  721,  542,  717,   36,  542,   36,  518,
  545,  117,   35,  808,   35,  176,  445,  204,  503,  209,
  554,   35,   35,  105,  643,  550,  219,  254,   35,  159,
  103,  103,   36,  544,   35,  103,  289,  163,  280,  545,
  278,  279,  544,  281,  719,  286,  532,  105,  425,   35,
  117,   35,  162,  190,  203,  545,   35,   55,  545,  294,
  369,   35,  308,   34,  799,  309,  352,  367,  861,  436,
  445,  544,  453,  515,  106,  360,  249,  646,  142,  138,
  215,  221,  433,  426,  221,   35,  299,  544,  801,  293,
  544,  103,  103,   68,   34,  171,  375,  558,  105,  435,
  482,  278,  286,  340,  626,  178,  556,   34,  341,  363,
   35,  105,  105,  885,   34,  220,  105,   34,  220,  379,
  376,  181,  379,  378,  763,   12,  378,  434,  180,  103,
   84,  129,  138,  143,  145,  149,   36,  210,  103,  180,
  216,  656,  362,  294,  233,  462,  688,   82,   84,  482,
  181,  674,  368,  672,  107,  669,  382,  420,   36,  250,
   36,  383,  216,  396,   34,  394,  218,  207,  770,  218,
    1,  633,  105,  105,  400,  402,  589,  590,  522,  524,
  528,   36,  529,   36,  570,   35,   34,  152,  284,  414,
  419,  424,  618,   96,  173,  534,  377,  142,  732,  377,
  503,    1,  548,  418,   36,  552,  536,  516,  216,  183,
  105,    1,  732,  733,  634,  175,  729,  730,  426,  105,
  726,  727,  443,  347,  348,  349,  541,    1,  567,    1,
  222,   92,   92,  220,  635,  541,  636,  228,  289,  456,
  459,  294,   97,  557,  912,  602,  463,  107,   34,  587,
  142,  179,  186,    1,   36,   74,  380,  138,  120,   92,
  301,  301,  477,  301,  541,  178,  828,   12,   12,  477,
  103,  605,  426,  492,  521,  521,  521,   92,  521,   92,
  541,   92,  477,  541,  860,  535,  831,  530,   92,   92,
   76,   79,  762,  233,  138,   92,  548,  470,  781,  527,
   36,   92,  731,  531,  501,  177,  103,  375,  559,  853,
   44,  565,  179,  339,  437,  342,   92,  460,   92,  619,
  382,  622,  766,   92,  794,  580,  178,  504,   92,  583,
  625,  826,  548,  479,  588,   55,  769,  215,  221,  179,
  505,   92,  773,  769,  497,  773,  600,   98,  603,  181,
  606,  105,   92,  375,   82,   84,  180,    1,  301,  339,
  320,   55,  693,  624,  697,   98,  326,  698,  384,  700,
  702,  703,  220,  637,  620,  142,  379,   92,  332,    1,
  378,    1,  312,  640,   36,  642,  312,  105,  215,  103,
   34,   36,  846,   35,  650,  152,  652,  845,  708,  286,
  577,   96,    1,  900,    1,  316,   36,  657,  103,  182,
  215,  393,  142,   55,   55,  117,  899,  231,  659,  232,
  694,  380,  513,  218,  390,    1,  666,  668,  477,  815,
  289,   36,  576,  215,  514,  216,  151,  291,   91,  468,
  469,  392,  753,  686,  713,  209,  492,  325,  100,  492,
   97,  331,   92,  377,  298,   74,  215,  923,  355,  219,
  521,   93,  434,  521,  292,  521,  521,  521,  621,  391,
  105,  452,  203,  340,  493,    1,  307,  502,  341,  733,
  179,  685,  655,   36,   36,  929,  501,  216,  163,  105,
   76,   79,  520,   36,  178,  757,  785,  301,   55,  523,
   36,  338,   36,  187,  567,  565,  216,  337,  787,  504,
   44,   34,  740,   39,  434,   98,  312,  119,  122,  125,
  684,    1,  505,  128,  786,  788,  382,  754,  312,  481,
   34,  383,  567,  756,  758,  487,  699,   36,   36,  827,
  301,  100,  216,  832,  567,  833,  434,  594,  825,  310,
  414,   39,  339,  525,  445,  526,    5,  624,   59,  339,
   59,  339,   59,  210,  890,  401,   36,  163,   59,  549,
  216,  381,  553,  203,  548,  555,  330,  312,  117,  212,
   59,  311,  796,  484,  797,  701,   36,  212,  445,  499,
  804,  742,  806,  318,   34,  749,  339,  338,   36,  459,
  829,  103,  216,  408,  513,    1,  410,  282,   98,   36,
  548,  659,    1,  249,  638,  317,  514,   59,  289,  251,
  551,  553,  312,  131,  212,  553,   34,    1,  711,  712,
   39,  553,  818,  132,  133,  134,  135,  136,  137,  521,
  312,  521,  311,  207,  151,  339,   91,  493,  409,   92,
  493,  411,    1,   92,  498,  468,  469,  339,  296,  502,
   92,   92,  680,  891,  253,  683,  220,  328,  252,   93,
  229,  230,  295,  847,  849,  389,  553,  851,  852,  323,
  553,  212,  105,  215,  350,  342,  859,  318,  718,  301,
  720,  722,  479,  724,  582,  417,  250,  864,  417,  361,
  865,  866,  867,  758,    1,    1,  379,  756,  553,  623,
  734,  187,  188,  203,    1,  611,  612,  613,  614,  741,
  689,    1,  395,    1,   89,   12,   13,   14,   15,   16,
   17,   18,   19,  301,  399,  215,  875,  873,  384,  880,
  881,  891,  883,  295,  322,  403,  887,  764,  767,  771,
  774,  364,  365,  289,  215,  334,  289,  335,    1,    1,
  126,  127,  413,   39,  725,  336,  427,  896,  728,  891,
  898,  294,  818,  577,    2,  818,    3,    4,  444,   59,
    6,  165,  166,  167,  836,  837,  838,    1,  447,  902,
  215,  903,  904,  906,  442,  448,  446,  152,  203,  848,
  850,  187,  188,  189,  451,  454,  455,    1,  449,  915,
  867,   59,  866,   59,  364,  365,  366,  461,  215,    1,
  119,  464,  364,  916,  466,  917,  918,   59,  868,  380,
    1,  311,  318,  819,  289,  325,   59,  331,  533,  301,
  538,  539,  553,  246,  247,  248,  925,  540,  926,  567,
  215,  334,  573,  335,  115,  115,  115,  574,  584,  585,
  927,  336,  289,  117,  117,  117,  117,  117,  117,  117,
  117,  117,  405,  406,  407,  586,  591,  117,  117,  117,
  328,  910,  911,  742,  599,  601,  608,  854,  856,  858,
  240,  241,  242,  243,  244,  245,  609,  610,  616,  246,
  247,  248,  553,  553,  553,  553,  553,  553,   39,  617,
  628,  553,  553,  553,  627,  629,  630,  631,  905,  907,
  632,  250,  604,  645,  607,   89,   12,   13,   14,   15,
   16,   17,   18,   19,   39,  653,  868,  651,  654,  196,
  164,  662,  410,  663,  164,  670,  671,  451,  410,  704,
  370,  673,  723,  681,  679,  737,  752,  641,  644,  691,
  647,  696,  709,  410,  370,  710,  649,  747,  164,  751,
  776,  782,  777,  819,  783,  795,  819,  784,  798,  803,
  810,  216,  901,  813,  823,  824,   39,   39,  367,  830,
  835,  367,  840,  367,  712,  367,  367,  842,  862,  367,
  843,  878,  844,  877,  869,  870,  872,  871,  879,  874,
  876,  882,  875,  367,  367,  873,  367,  367,  367,  367,
  884,  895,  852,  908,  851,  370,  909,  410,  237,  410,
  370,  914,  237,  370,  919,  920,  370,  127,  370,  922,
  924,  340,  415,  374,  339,  518,  367,   96,  367,  706,
  367,  480,  370,  486,   51,  370,  237,  113,  248,  309,
  391,  479,  485,   60,  184,  349,  285,  264,   88,  465,
  658,   39,  185,  664,  811,  687,  748,  913,  367,  807,
  367,  354,  768,  370,  366,  765,  738,  366,  560,  366,
  561,  366,  366,  857,  775,  366,  772,  855,  690,  739,
  569,  705,  834,  928,  814,  692,  695,  357,  358,  366,
  366,  359,  366,  366,  366,  366,  356,  353,  575,  519,
  755,  778,  841,  413,  581,  863,  648,  404,  780,  261,
  812,  779,  793,  639,  791,    0,    0,    0,    0,    0,
    0,  789,  366,  790,  366,  792,  366,  439,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  800,  802,
    0,  164,    0,  410,  805,    0,    0,    0,    0,    0,
    0,  410,    0,    0,  366,    0,  366,    0,    0,  410,
  410,  410,  410,  410,  410,  410,  410,  410,  410,    0,
  410,  410,  164,  410,  410,  410,    0,    0,    0,    0,
  410,    0,    0,    0,  410,  410,  410,  410,  410,  410,
    0,    0,  367,    0,  367,    0,  367,    0,    0,  410,
    0,  706,  367,    0,  367,    0,    0,    0,    0,  367,
  367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
    0,  367,  367,  367,  367,  367,  367,    0,    0,  237,
    0,  367,  367,  367,    0,  367,  367,  367,  367,  367,
  367,    0,    0,    0,    0,    0,    0,    0,    0,  367,
  367,    0,    0,    0,    0,    0,    0,   36,    0,   35,
  237,  152,  284,    0,    0,    0,    0,   96,    0,  370,
  370,    0,    0,    0,    0,    0,    0,  370,    0,    0,
  283,    0,    0,    0,    0,   34,    0,    0,  366,    0,
  366,    0,  366,    0,    0,    0,  886,    0,  366,    0,
  366,  888,    0,    0,    0,  366,  366,  366,  366,  366,
  366,  366,  366,  366,  366,  366,   97,  366,  366,  366,
  366,  366,  366,    0,    0,    0,    0,  366,  366,  366,
    0,  366,  366,  366,  366,  366,  366,    0,    0,    0,
    0,    0,    0,    0,  356,  366,  366,  356,    0,  356,
    0,  356,  356,    0,    0,  356,    0,  356,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  356,
  356,    0,  356,  356,  356,  356,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  462,    0,    0,  462,    0,  462,
    0,  462,  462,    0,  356,  462,  356,  462,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  462,
  462,    0,  462,    0,  462,  462,    0,    0,    0,    0,
    0,    0,    0,    0,  356,    0,  356,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  462,    0,  462,    0,  462,  540,    0,    0,
  540,    0,  540,    0,  540,  540,    0,    0,  540,    0,
  540,    0,    0,    0,    0,    0,    0,    0,    1,    0,
    0,    0,  540,  540,  462,  540,  462,  540,  540,    0,
    0,    0,    0,    0,    0,    0,   89,   12,   13,   14,
   15,   16,   17,   18,   19,    0,    0,    0,    0,    0,
   90,    0,   91,    0,    0,  540,    0,  540,    0,  540,
    0,    0,    0,    0,    0,  370,   92,    0,  383,    0,
    0,    0,  383,  370,    0,   93,  370,    0,  370,    0,
    0,    0,    0,    0,    0,    0,    0,  540,    0,  540,
    0,    0,  370,    0,    0,  370,  383,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  356,    0,
  356,    0,  356,    0,    0,    0,    0,    0,  356,    0,
  356,    0,    0,  370,    0,    0,  356,  356,  356,  356,
  356,  356,  356,  356,  356,  356,    0,  356,  356,  356,
  356,  356,  356,    0,    0,    0,    0,  356,  356,  356,
    0,  356,  356,  356,  356,  356,  356,    0,  462,    0,
  462,    0,  462,    0,    0,  356,  356,    0,  462,    0,
  462,    0,    0,    0,    0,    0,  462,  462,  462,  462,
  462,  462,  462,  462,  462,  462,    0,  462,  462,  462,
  462,  462,  462,    0,    0,    0,   35,  462,    0,  462,
    0,  462,  462,  462,  462,  462,  462,    0,    0,    0,
    0,    0,    0,    0,    0,  462,  462,    0,    0,    0,
    0,  540,   34,  540,    0,  540,    0,    0,    0,    0,
    0,  540,    0,  540,    0,    0,    0,    0,    0,  540,
  540,  540,  540,  540,  540,  540,  540,  540,  540,    0,
  540,  540,  540,  540,  540,  540,    0,    0,    0,    0,
  540,    0,  540,    0,  540,  540,  540,  540,  540,  540,
    0,    0,    0,    0,    0,    0,    0,  533,  540,  540,
  533,    0,  533,    0,  533,  533,    0,    0,  533,  383,
  533,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  533,  533,    0,  533,    0,  533,  533,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  383,    0,    0,    0,    0,    0,    0,    0,    0,  370,
  370,    0,    0,    0,    0,  533,    0,  533,    0,  533,
  489,    0,    0,  489,    0,  489,    0,  489,  489,    0,
    0,  489,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  489,  489,    0,  489,  533,
  489,  489,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  384,    0,  384,    0,  384,  384,    0,
  489,  384,  489,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  384,  384,    0,  384,  384,
    0,  384,    0,    0,    0,    0,    0,    0,    0,    0,
  489,    0,  489,   11,   12,   13,   14,   15,   16,   17,
   18,   19,   20,    0,   21,   22,   23,   24,   25,   26,
  384,    0,  384,    0,   27,    0,    0,    0,   28,   29,
   30,   31,   32,   33,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  384,    0,  384,    0,  458,    0,  458,    0,  458,  458,
    0,    0,  458,    0,    0,    0,    0,    0,    0,    0,
    0,  533,    0,  533,    0,  533,  458,  458,    0,  458,
    0,  533,  458,  533,    0,    0,    0,    0,    0,  533,
  533,  533,  533,  533,  533,  533,  533,  533,  533,    0,
  533,  533,  533,  533,  533,  533,    0,    0,    0,    0,
  533,  458,  533,  458,  533,  533,  533,  533,  533,  533,
    0,    0,    0,    0,    0,    0,    0,    0,  533,  533,
    0,    0,    0,    0,  489,    0,  489,    0,  489,    0,
    0,  458,    0,  458,  489,    0,  489,    0,    0,    0,
    0,    0,  489,  489,  489,  489,  489,  489,  489,  489,
  489,  489,    0,  489,  489,  489,  489,  489,  489,    0,
    0,    0,    0,  489,    0,  489,    0,  489,  489,  489,
  489,  489,  489,    0,  384,    0,  384,    0,  384,    0,
    0,  489,  489,    0,  384,    0,  384,    0,    0,    0,
    0,    0,  384,  384,  384,  384,  384,  384,  384,  384,
  384,  384,    0,  384,  384,  384,  384,  384,  384,    0,
    0,    0,    0,  384,    0,  384,    0,  384,  384,  384,
  384,  384,  384,    0,    0,    0,    0,    0,    0,    0,
    0,  384,  384,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  460,    0,
  460,    0,  460,  460,    0,    0,  460,    0,    0,    0,
    0,    0,    0,    0,    0,  458,    0,  458,    0,  458,
  460,  460,    0,  460,    0,  458,  460,  458,    0,    0,
    0,    0,    0,  458,  458,  458,  458,  458,  458,  458,
  458,  458,  458,    0,  458,  458,  458,  458,  458,  458,
    0,    0,    0,    0,  458,  460,  458,  460,  458,  458,
  458,  458,  458,  458,    0,    0,  459,    0,  459,    0,
  459,  459,  458,  458,  459,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  460,    0,  460,  459,  459,
    0,  459,    0,    0,  459,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  410,    0,  410,    0,
  410,  410,    0,  459,  410,  459,  370,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  410,  410,
  370,    0,    0,    0,  410,    0,    0,    0,    0,    0,
    0,    0,    0,  459,    0,  459,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  365,    0,
  365,    0,  365,  365,    0,  410,  365,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  365,  365,    0,    0,    0,    0,  365,    0,    0,    0,
    0,    0,    0,  410,    0,  410,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  460,
    0,  460,    0,  460,    0,    0,    0,  365,    0,  460,
    0,  460,    0,    0,    0,    0,    0,  460,  460,  460,
  460,  460,  460,  460,  460,  460,  460,    0,  460,  460,
  460,  460,  460,  460,    0,  365,    0,  365,  460,    0,
  460,    0,  460,  460,  460,  460,  460,  460,    0,    0,
    0,    0,    0,    0,    0,    0,  460,  460,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  459,    0,  459,
    0,  459,    0,    0,    0,    0,    0,  459,    0,  459,
    0,    0,    0,    0,    0,  459,  459,  459,  459,  459,
  459,  459,  459,  459,  459,    0,  459,  459,  459,  459,
  459,  459,    0,    0,    0,    0,  459,    0,  459,    0,
  459,  459,  459,  459,  459,  459,    0,  410,    0,  410,
   34,  410,    0,    0,  459,  459,    0,  410,    0,  410,
    0,    0,    0,    0,    0,  410,  410,  410,  410,  410,
  410,  410,  410,  410,  410,    0,  410,  410,  410,  410,
  410,  410,    0,    0,    0,    0,  410,    0,    0,    0,
  410,  410,  410,  410,  410,  410,    0,    0,    0,  365,
    0,  365,    0,  365,  410,  410,    0,    0,    0,  365,
    0,  365,    0,    0,    0,    0,    0,  365,  365,  365,
  365,  365,  365,  365,  365,  365,  365,    0,  365,  365,
  365,  365,  365,  365,    0,    0,    0,    0,  365,    0,
  365,    0,  365,  365,  365,  365,  365,  365,    0,    0,
  364,    0,  364,    0,  364,  364,  365,  365,  364,    0,
   89,   12,   13,   14,   15,   16,   17,   18,   19,    0,
    0,    0,  364,  364,  196,  197,    0,    0,  364,    0,
    0,    0,    0,    0,    0,  199,  200,    0,    0,  202,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  447,
    0,  447,    0,    0,  447,    0,    0,  447,    0,  364,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  447,  447,    0,  447,    0,    0,  447,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  364,    0,  364,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  424,
    0,  424,    0,  424,  424,    0,  447,  424,  447,    0,
    0,   89,   12,   13,   14,   15,   16,   17,   18,   19,
    0,  424,  424,    0,    0,   24,   25,  424,    0,    0,
    0,    0,   27,    0,    0,    0,   28,   29,  447,    0,
   32,    0,    0,    0,    0,    0,    0,    0,    0,  421,
    0,  421,    0,    0,  421,    0,    0,  421,  424,  421,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  421,  421,    0,    0,    0,    0,  421,    0,    0,
    0,  678,    0,    0,    0,    0,  424,    0,  424,  191,
   12,   13,   14,   15,   16,   17,   18,   19,  192,    0,
  193,  194,  195,  196,  197,  198,    0,    0,  421,    0,
    0,    0,    0,    0,  199,  200,  201,    0,  202,  397,
    0,  364,  397,  364,    0,  364,    0,    0,    0,    0,
    0,  364,    0,  364,    0,    0,  421,    0,  421,  364,
  364,  364,  364,  364,  364,  364,  364,  364,  364,    0,
  364,  364,  364,  364,  364,  364,    0,    0,    0,    0,
  364,    0,  364,    0,  364,  364,  364,  364,  364,  364,
  447,    0,  447,    0,  447,    0,    0,    0,  364,  364,
  447,  397,  447,  397,    0,    0,    0,    0,  447,  447,
  447,  447,  447,  447,  447,  447,  447,  447,    0,  447,
  447,  447,  447,  447,  447,    0,    0,    0,    0,  447,
    0,  447,    0,  447,  447,  447,  447,  447,    0,    0,
  424,    0,  424,    0,  424,    0,    0,  447,  447,    0,
  424,    0,  424,    0,    0,    0,    0,    0,  424,  424,
  424,  424,  424,  424,  424,  424,  424,  424,    0,  424,
  424,  424,  424,  424,  424,    0,    0,    0,    0,  424,
    0,    0,    0,  424,  424,  424,  424,  424,  424,    0,
  421,    0,  421,    0,  421,    0,    0,  424,  424,    0,
  421,    0,  421,    0,    0,    0,    0,    0,  421,  421,
  421,  421,  421,  421,  421,  421,  421,  421,    0,  421,
  421,  421,  421,  421,  421,    0,    0,    0,    0,  421,
    0,  206,    0,  421,  421,  421,  421,  421,  421,    0,
    0,  425,    0,  425,    0,  425,  425,  421,  421,  425,
    0,    0,    0,  397,  397,  397,  397,  397,  397,  397,
  397,  397,    0,  425,  425,    0,    0,  397,  397,  425,
    0,    0,    0,    0,  397,    0,    0,    0,  397,  397,
    0,    0,  397,    0,    0,    0,    0,    0,    0,    0,
  206,  419,  206,  419,    0,    0,  419,    0,    0,  419,
  425,  419,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  419,  419,    0,    0,    0,    0,  419,
    0,    0,    0,    0,    0,    0,    0,    0,  425,    0,
  425,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  411,    0,  411,    0,  411,  411,    0,    0,  411,
  419,  411,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  411,  411,    0,    0,    0,    0,  411,
    0,    0,    0,    0,  894,    0,    0,    0,  419,    0,
  419,    0,  191,   12,   13,   14,   15,   16,   17,   18,
   19,  192,    0,  193,  194,  195,  196,  197,  198,    0,
  411,    0,    0,    0,    0,    0,    0,  199,  200,  201,
  412,  202,  412,    0,  412,  412,    0,    0,  412,    0,
  412,    0,    0,    0,    0,    0,    0,    0,  411,    0,
  411,    0,  412,  412,    0,    0,    0,    0,  412,    0,
    0,    0,  206,  206,  206,  206,  206,  206,  206,  206,
  206,    0,    0,    0,    0,    0,  206,  206,    0,    0,
    0,    0,  425,  206,  425,    0,  425,  206,  206,  412,
    0,  206,  425,    0,  425,    0,    0,    0,    0,   34,
  425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
    0,  425,  425,  425,  425,  425,  425,  412,    0,  412,
    0,  425,    0,    0,    0,  425,  425,  425,  425,  425,
  425,    0,  419,    0,  419,    0,  419,    0,    0,  425,
  425,    0,  419,    0,  419,    0,    0,    0,    0,    0,
  419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
  500,  419,  419,  419,  419,  419,  419,    0,    0,    0,
    0,  419,    0,    0,    0,  419,  419,  419,  419,  419,
  419,    0,  411,    0,  411,    0,  411,    0,    0,  419,
  419,    0,  411,    0,  411,    0,    0,    0,    0,    0,
  411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
    0,  411,  411,  411,  411,  411,  411,    0,    0,    0,
    0,  411,    0,    0,    0,  411,  411,  411,  411,  411,
  411,  320,    0,    0,   36,    0,   35,    0,   95,  411,
    0,    0,    0,    0,   96,    0,    0,    0,    0,    0,
    0,  412,    0,  412,    0,  412,    0,   94,    0,    0,
    0,  412,   34,  412,    0,    0,    0,    0,    0,  412,
  412,  412,  412,  412,  412,  412,  412,  412,  412,    0,
  412,  412,  412,  412,  412,  412,    0,    0,    0,    0,
  412,    0,  320,   97,  412,  412,  412,  412,  412,  412,
    0,  400,    0,    0,  400,    0,    0,  400,  412,  400,
   89,   12,   13,   14,   15,   16,   17,   18,   19,    0,
    0,  400,  400,    0,   24,   25,    0,    0,    0,    0,
    0,   27,    0,    0,    0,   28,   29,    0,    0,   32,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  402,    0,    0,  402,    0,    0,  402,  400,  402,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  402,  402,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  400,    0,  400,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  405,    0,    0,  405,    0,    0,  405,  402,  405,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  405,  405,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  402,    0,  402,    0,
    0,    0,  320,  320,  320,  320,  320,  320,  320,  320,
  320,    0,    0,    0,    0,    1,  320,  320,  405,    0,
    0,    0,   36,  320,   35,    0,    0,  320,  320,    0,
    0,  320,    0,   89,   12,   13,   14,   15,   16,   17,
   18,   19,    0,    0,    0,    0,  405,   90,  405,   91,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   92,    0,    0,    0,    0,    0,    0,
    0,    0,   93,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  400,    0,  400,    0,    0,    0,    0,    0,
  400,    0,  400,    0,   36,    0,   35,    0,  400,  400,
  400,  400,  400,  400,  400,  400,  400,  400,    0,  400,
  400,  305,  400,  400,  400,    0,    0,    0,    0,  400,
    0,    0,   34,  400,  400,  400,  400,  400,  400,    0,
    0,    0,  402,    0,  402,    0,    0,  400,  400,    0,
  402,    0,  402,    0,    0,    0,    0,    0,  402,  402,
  402,  402,  402,  402,  402,  402,  402,  402,    0,  402,
  402,    0,  402,  402,  402,    0,   36,    0,   35,  402,
  163,    0,    0,  402,  402,  402,  402,  402,  402,    0,
    0,    0,  405,  305,  405,    0,    0,  402,  402,    0,
  405,    0,  405,    0,   34,    0,    0,    0,  405,  405,
  405,  405,  405,  405,  405,  405,  405,  405,    0,  405,
  405,    0,  405,  405,  405,    0,   36,    0,   35,  405,
    0,  417,    0,  405,  405,  405,  405,  405,  405,    0,
    0,    0,    0,    0,    0,    0,    0,  405,  405,    0,
    0,    0,    0,    1,   34,    0,    2,    0,    3,    4,
    5,    0,    6,    0,    0,    0,    7,    8,    9,   10,
    0,   11,   12,   13,   14,   15,   16,   17,   18,   19,
   20,    0,   21,   22,   23,   24,   25,   26,  592,  593,
  732,  733,   27,   36,    0,   35,   28,   29,   30,   31,
   32,   33,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  305,  665,    0,    0,    0,
    0,   34,    0,    0,    0,    1,    0,    0,    2,    0,
    3,    4,    5,    0,    6,    0,    0,    0,    7,    8,
    9,   10,    0,   11,   12,   13,   14,   15,   16,   17,
   18,   19,   20,    0,   21,   22,   23,   24,   25,   26,
  592,  593,    0,   36,   27,   35,    0,    0,   28,   29,
   30,   31,   32,   33,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  667,    0,    0,    0,
    0,   34,    0,    0,    0,    0,    0,    1,    0,    0,
    2,    0,    3,    4,    5,  432,    6,    0,    0,  432,
    7,    8,    9,   10,    0,   11,   12,   13,   14,   15,
   16,   17,   18,   19,   20,    0,   21,   22,   23,   24,
   25,   26,    0,    0,    0,    0,   27,    0,    0,    0,
   28,   29,   30,   31,   32,   33,    0,    1,    0,    0,
    2,    0,    3,    4,    5,   36,    6,   35,    0,    0,
    7,    8,    9,   10,    0,   11,   12,   13,   14,   15,
   16,   17,   18,   19,   20,    0,   21,   22,   23,   24,
   25,   26,    0,   34,    0,    0,   27,    0,    0,    0,
   28,   29,   30,   31,   32,   33,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    1,    0,    0,    2,    0,    3,
    4,    5,    0,    6,    0,    0,    0,    7,    8,    9,
   10,    0,   11,   12,   13,   14,   15,   16,   17,   18,
   19,   20,    0,   21,   22,   23,   24,   25,   26,    0,
    0,    0,    0,   27,    0,    0,    0,   28,   29,   30,
   31,   32,   33,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    1,    0,    0,    2,    0,    3,
    4,    5,    0,    6,    0,    0,    0,    7,    8,    9,
   10,    0,   11,   12,   13,   14,   15,   16,   17,   18,
   19,   20,    0,   21,   22,   23,   24,   25,   26,    0,
    0,    0,    0,   27,    0,    0,  432,   28,   29,   30,
   31,   32,   33,    0,    0,    0,  432,  428,    0,    0,
    0,    0,    0,    0,  432,  432,  432,  432,  432,  432,
  432,  432,  432,  432,    0,  432,  432,  432,  432,  432,
  432,  432,  432,  432,  432,  428,    0,    0,  432,  432,
  432,  432,    0,  432,    0,    0,    1,    0,    0,    2,
    0,    3,    4,    5,    0,    6,    0,    0,    0,    7,
    8,    9,   10,    0,   11,   12,   13,   14,   15,   16,
   17,   18,   19,   20,    0,   21,   22,   23,   24,   25,
   26,    0,    0,    0,    0,   27,    0,    0,    0,   28,
   29,   30,   31,   32,   33,  444,    0,  444,    0,  444,
  444,    0,    0,  444,    0,  444,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  444,  444,    0,
    0,    0,    0,  444,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  454,    0,  454,    0,  454,  454,    0,
    0,  454,    0,  454,    0,    0,    0,    0,    0,    0,
    0,    0,  444,    0,  444,  454,  454,    0,    0,    0,
    0,  454,    0,    0,    0,    0,    0,  370,    0,    0,
  235,    0,    0,    0,  235,  370,    0,    0,  370,    0,
  370,    0,  444,    0,  444,    0,    0,    0,    0,    0,
  454,    0,  454,    0,  370,    0,    0,  370,  235,    0,
    0,    0,    0,  257,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  454,    0,  454,  257,    0,  370,    0,    0,  428,  235,
    0,    0,    0,    0,    0,    0,    0,    0,  428,    0,
    0,    0,    0,    0,    0,    0,  428,  428,  428,  428,
  428,  428,  428,  428,  428,  428,    0,  428,  428,  428,
  428,  428,  428,  428,  428,  428,  428,   34,    0,    0,
  428,  428,  428,  428,    0,  428,    0,    0,    0,    0,
    0,    0,    0,    0,  257,    0,  273,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  191,   12,   13,   14,
   15,   16,   17,   18,   19,  192,  273,  193,  194,  195,
  196,  197,  198,  760,  761,    0,  444,    0,  444,    0,
  444,  199,  200,  201,    0,  202,  444,    0,  444,    0,
    0,    0,    0,    0,  444,  444,  444,  444,  444,  444,
  444,  444,  444,  444,    0,  444,  444,  444,  444,  444,
  444,    0,    0,    0,  454,  444,  454,  444,  454,  444,
  444,  444,  444,  444,  454,    0,  454,  273,    0,   34,
    0,    0,  454,  454,  454,  454,  454,  454,  454,  454,
  454,  454,    0,  454,  454,  454,  454,  454,  454,  152,
    0,  235,    0,  454,    0,  454,    0,  454,  454,  454,
  454,  454,    0,    0,  152,    0,    0,    0,    0,  152,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  235,    0,    0,    0,  257,    0,    0,    0,
  491,  370,  370,    0,  257,  257,  257,  257,  257,  257,
  257,  257,  257,  257,    0,  257,  257,  257,  257,  257,
  257,    0,    0,    0,    0,  257,    0,    0,    0,  257,
  257,  257,  257,  257,  257,    0,    0,    0,  152,    0,
  152,  141,    0,    0,    0,    0,  141,    0,   11,   12,
   13,   14,   15,   16,   17,   18,   19,   20,    0,   21,
   22,   23,   24,   25,   26,    0,    0,    0,    0,   27,
    0,    0,    0,   28,   29,   30,   31,   32,  475,  273,
  149,    0,    0,    0,    0,  149,    0,  273,  273,  273,
  273,  273,  273,  273,  273,  273,  273,    0,  273,  273,
  273,  273,  273,  273,    0,  141,    0,  141,  273,    0,
    0,    0,  273,  273,  273,  273,  273,  273,    0,  196,
    0,    0,    0,    0,  196,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  490,    0,  149,    0,  149,    0,    0,    0,
   11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
    0,   21,   22,   23,   24,   25,   26,   34,    0,    0,
    0,   27,    0,    0,  152,   28,   29,   30,   31,   32,
  475,    0,  152,  196,    0,  196,    0,    0,    0,    0,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
    0,  152,  152,  152,  152,  152,  152,    0,    0,    0,
    0,  152,    0,   34,    0,  152,  152,  152,  152,  152,
    0,    0,    0,    0,    0,    0,    0,    0,  682,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  141,    0,    0,    0,   34,    0,    0,    0,  141,
    0,    0,    0,    0,    0,    0,    0,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,    0,  141,  141,
  141,  141,  141,  141,  817,    0,    0,    0,  141,    0,
  149,    0,  141,  141,  141,  141,  141,  141,  149,    0,
    0,  254,    0,    0,    0,    0,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  897,  149,  149,  149,
  149,  149,  149,    0,    0,    0,    0,  149,    0,  196,
    0,  149,  149,  149,  149,  149,  149,  196,    0,    0,
    0,    0,    0,    0,  270,  196,  196,  196,  196,  196,
  196,  196,  196,  196,  196,    0,  196,  196,  196,  196,
  196,  196,  254,    0,    0,    0,  196,    0,    0,    0,
  196,  196,  196,  196,  196,  196,    0,    0,    0,    0,
  490,    0,    0,   34,    0,    0,    0,    0,   11,   12,
   13,   14,   15,   16,   17,   18,   19,   20,    0,   21,
   22,   23,   24,   25,   26,  270,    0,    0,    0,   27,
    0,    0,    0,   28,   29,   30,   31,   32,  475,    0,
    0,    0,   34,    0,    0,    0,  816,    0,    0,    0,
    0,    0,    0,    0,   11,   12,   13,   14,   15,   16,
   17,   18,   19,   20,  476,   21,   22,   23,   24,   25,
   26,    0,    0,   34,    0,   27,    0,    0,  816,   28,
   29,   30,   31,   32,  475,    0,   11,   12,   13,   14,
   15,   16,   17,   18,   19,   20,    0,   21,   22,   23,
   24,   25,   26,  485,   34,    0,    0,   27,    0,    0,
    0,   28,   29,   30,   31,   32,  475,    0,    0,    0,
    0,    0,    0,    0,  254,    0,    0,    0,    0,    0,
    0,    0,  254,  254,  254,  254,  254,  254,  254,  254,
  254,  254,    0,  254,  254,  254,  254,  254,  254,   34,
    0,    0,    0,  254,    0,    0,    0,  254,  254,  254,
  254,  254,  254,    0,    0,  517,    0,  270,    0,    0,
    0,    0,    0,    0,    0,  270,  270,  270,  270,  270,
  270,  270,  270,  270,  270,    0,  270,  270,  270,  270,
  270,  270,    0,    0,    0,    0,  270,    0,    0,    0,
  270,  270,  270,  270,  270,  270,    0,    0,    0,    0,
    0,  210,    0,    0,   11,   12,   13,   14,   15,   16,
   17,   18,   19,   20,    0,   21,   22,   23,   24,   25,
   26,    0,    0,    0,    0,   27,    0,    0,    0,   28,
   29,   30,   31,   32,  475,  208,    0,    0,    0,    0,
    0,    0,    0,   11,   12,   13,   14,   15,   16,   17,
   18,   19,   20,    0,   21,   22,   23,   24,   25,   26,
  210,    0,  210,    0,   27,    0,  490,    0,   28,   29,
   30,   31,   32,  475,   11,   12,   13,   14,   15,   16,
   17,   18,   19,   20,  207,   21,   22,   23,   24,   25,
   26,    0,    0,    0,  208,   27,  208,    0,    0,   28,
   29,   30,   31,   32,  475,   11,   12,   13,   14,   15,
   16,   17,   18,   19,   20,    0,   21,   22,   23,   24,
   25,   26,  318,    0,    0,    0,   27,    0,    0,    0,
   28,   29,   30,   31,   32,  475,    0,    0,    0,    0,
    0,    0,  816,  207,    0,  207,    0,    0,    0,    0,
   11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
    0,   21,   22,   23,   24,   25,   26,    0,    0,    0,
    0,   27,    0,    0,    0,   28,   29,   30,   31,   32,
  475,    0,    0,  318,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  210,  210,  210,  210,  210,  210,  210,  210,
  210,    0,    0,    0,    0,    0,  210,  210,    0,    0,
    0,    0,  208,  210,  210,    0,    0,  210,  210,    0,
    0,  210,    0,    0,    0,    0,  208,  208,  208,  208,
  208,  208,  208,  208,  208,    0,    0,    0,    0,    0,
  208,  208,    0,    0,    0,    0,    0,  208,    0,    0,
    0,  208,  208,    0,    0,  208,    0,    0,    0,    0,
    0,  207,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  207,  207,  207,  207,  207,
  207,  207,  207,  207,    0,    0,    0,    0,    0,  207,
  207,    0,    0,    0,    0,    0,  207,    0,    0,    0,
  207,  207,    0,    0,  207,    0,    0,    0,    0,    0,
    0,    0,    0,  318,  318,  318,  318,  318,  318,  318,
  318,  318,    0,    0,    0,    0,    0,  318,  318,    0,
    0,    0,    0,    0,  318,    0,    0,    0,  318,  318,
    0,    0,  318,  191,   12,   13,   14,   15,   16,   17,
   18,   19,  192,    0,  193,  194,  195,  196,  197,  198,
  760,  761,  851,  852,    0,    0,    0,    0,  199,  200,
  201,    0,  202,  191,   12,   13,   14,   15,   16,   17,
   18,   19,  192,    0,  193,  194,  195,  196,  197,  198,
    0,    0,    0,    0,    0,    0,    0,    0,  199,  200,
  201,    0,  202,
  };
  protected static readonly short [] yyCheck = {            32,
    0,  254,    2,   96,    3,  369,  212,    7,    8,   36,
   40,   11,    2,    0,   77,    4,    5,  574,  367,   40,
   20,   21,   22,   23,   38,   38,   26,   27,   64,  290,
  109,   30,  111,   41,   34,   35,   44,   62,   38,  130,
   36,    2,   64,  319,  320,  313,  314,   80,   40,   41,
   36,   38,   38,  144,   59,   41,  318,  148,   41,   41,
    0,   91,   44,   93,   40,   41,   36,   40,   36,  331,
   91,  123,   38,  269,   38,   59,   59,   77,  325,   79,
  356,   38,   38,    2,   41,  353,   81,   87,   38,  301,
   90,   91,   36,  123,   38,   95,   96,   40,   93,   91,
   90,   91,  123,   59,  125,   95,   41,   26,   58,   38,
  123,   38,   31,   74,   75,   91,   38,  117,   91,  315,
  211,   38,  121,   64,   41,  124,  189,  206,   58,   33,
   59,  123,   59,  326,   95,  198,   40,   59,   20,  139,
   41,   41,   46,   93,   44,   38,  107,  123,   41,  261,
  123,  151,  152,   58,   64,  258,   41,  123,   77,   63,
   44,  151,  152,  163,  423,   59,  359,   64,  163,  202,
   38,   90,   91,   41,   64,   41,   95,   64,   44,   41,
  213,   64,   44,   41,  125,  125,   44,   91,   64,  189,
   44,  191,  192,  193,  194,  195,   36,   79,  198,   59,
   40,  462,  201,  315,   86,  298,  504,   62,   62,   93,
  259,  487,  207,  481,    2,  477,  216,  250,   36,  123,
   36,  216,   40,  222,   64,  220,   41,   61,  125,   44,
  257,  258,  151,  152,  229,  230,  324,  325,  334,  335,
  336,   36,  338,   36,  269,   38,   64,   40,   41,  249,
  250,  251,  261,   46,  259,   95,   41,  139,  294,   44,
  507,  257,  353,  250,   36,  356,  345,  330,   40,   59,
  189,  257,  294,  295,  301,  259,  552,  553,  261,  198,
  548,  549,  281,  165,  166,  167,  316,  257,  297,  257,
  298,  305,  305,   81,  321,  316,  323,   85,  298,  294,
  295,  315,   95,  366,  861,  301,  301,   95,   64,  388,
  192,   64,   58,  257,   36,   59,  298,  317,  307,  305,
  108,  109,  311,  111,  316,   64,  690,  267,  268,  318,
  330,  301,  315,  322,  334,  335,  336,  305,  338,  305,
  316,  305,  331,  316,  274,  345,  695,  342,  305,  305,
   59,   59,  293,  235,  354,  305,  261,  125,  617,   35,
   36,  305,  555,  298,  325,  259,  366,  573,  367,  125,
   59,  370,  125,   95,  256,  163,  305,  296,  305,  420,
  380,  422,  292,  305,  637,  380,  125,  325,  305,  384,
  423,  689,  297,  312,  389,  395,  293,  298,  298,  259,
  325,  305,  292,  293,  323,  292,  401,   44,  408,  292,
  410,  330,  305,  298,  269,  269,  292,  257,  206,   95,
  144,  421,  513,  423,  520,   62,  150,  523,  216,  525,
  526,  527,  298,  433,  421,  317,  298,  305,  162,  257,
  298,  257,   58,  442,   36,  444,   58,  366,  288,  449,
   64,   36,  728,   38,  453,   40,  455,  725,  537,  449,
  379,   46,  257,  827,  257,  139,   36,  466,  468,  259,
  288,   33,  354,  473,  474,  123,  825,   61,  468,   63,
  513,  299,  325,  298,   46,  257,  473,  474,  477,  678,
  490,   36,   62,  288,  325,   40,  289,   44,  291,  267,
  268,   63,  581,  503,  125,  505,  495,  123,    2,  498,
   95,  123,  305,  298,   46,  259,  288,  894,  192,  514,
  520,  314,   41,  523,   59,  525,  526,  527,  261,   91,
  449,  291,  493,  533,  322,  257,  263,  325,  533,  295,
  293,  502,  461,   36,   36,  922,  507,   40,   40,  468,
  259,  259,   35,   36,  293,   40,  261,  345,  558,   35,
   36,   35,   36,  289,  297,  564,   40,   41,  261,  507,
  259,   64,  567,    0,   93,    2,   58,    4,    5,    6,
  499,  257,  507,   10,  625,  626,  586,  582,   58,  313,
   64,  586,  297,  592,  593,  319,   35,   36,   36,  690,
  388,   95,   40,  699,  297,  701,  125,  395,  687,  123,
  610,   38,   95,  289,   59,  291,  264,  617,   36,   95,
   38,   95,   40,  505,  813,   63,   36,   40,   46,  353,
   40,   41,  356,  594,  261,  359,   44,   58,  123,   60,
   58,  123,  641,  317,  643,   35,   36,   60,   93,   58,
  649,  570,  651,  123,   64,  574,   95,   35,   36,  654,
  693,  661,   40,   46,  507,  257,   46,   94,   95,   36,
  297,  661,  257,   40,  434,   46,  507,   95,  678,   46,
  354,   36,   58,  275,   60,   40,   64,  257,  309,  310,
  117,   46,  681,  285,  286,  287,  288,  289,  290,  699,
   58,  701,  123,   61,  289,   95,  291,  495,   91,  305,
  498,   91,  257,  305,  123,  267,  268,   95,   46,  507,
  305,  305,  495,  816,   91,  498,  514,  154,   95,  314,
  314,  315,   60,  732,  733,  297,   91,  294,  295,   58,
   95,   60,  661,  288,   40,  533,  741,  123,  542,  537,
  544,  545,  671,  547,  299,   41,  123,  757,   44,  301,
  759,  760,  761,  762,  257,  257,   60,  766,  123,  261,
  558,  289,  290,  734,  257,  280,  281,  282,  283,  567,
  504,  257,  123,  257,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  581,   91,  288,  292,  293,  586,  798,
  799,  894,  801,   60,  123,  232,  805,  595,  596,  597,
  598,  289,  290,  813,  288,  289,  816,  291,  257,  257,
    7,    8,  249,  250,  548,  299,  253,  821,  552,  922,
  824,  315,  821,  752,  260,  824,  262,  263,   59,  257,
  266,  306,  307,  308,  311,  312,  313,  257,   59,  848,
  288,  850,  851,  852,  281,   41,  283,   40,  819,  732,
  733,  289,  290,  291,  291,  292,  293,  257,   44,  868,
  869,  289,  871,  291,  289,  290,  291,   46,  288,  257,
  307,  125,  289,  882,  265,  884,  885,  305,  761,  299,
  257,  123,  123,  681,  894,  123,  314,  123,   44,  687,
  123,  123,  257,  326,  327,  328,  905,  123,  907,  297,
  288,  289,   44,  291,  289,  290,  291,   58,   41,  298,
  919,  299,  922,  275,  276,  277,  278,  279,  280,  281,
  282,  283,  236,  237,  238,   44,   93,  289,  290,  291,
  367,  860,  861,  862,   93,   58,   58,  735,  736,  737,
  317,  318,  319,  320,  321,  322,   41,   44,  125,  326,
  327,  328,  317,  318,  319,  320,  321,  322,  395,   44,
   58,  326,  327,  328,   93,   93,   44,   93,  851,  852,
   44,  123,  409,   59,  411,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  421,   62,  869,   59,   44,  289,
   36,   58,   38,  125,   40,  125,   44,  434,   44,   41,
   46,  125,   41,  123,  125,  123,   44,  444,  445,  125,
  447,  125,  125,   59,   60,  125,  453,   62,   64,   62,
   93,  261,   93,  821,  125,   93,  824,  261,   41,   59,
   58,   40,  830,   44,  125,  123,  473,  474,   33,  123,
  258,   36,  125,   38,  310,   40,   41,   41,   44,   44,
  125,  261,   93,   93,  293,  125,  125,  292,  261,  125,
  125,   41,  292,   58,   59,  293,   61,   62,   63,   64,
   41,  125,  295,  125,  294,   33,  125,  123,   36,  125,
   38,   41,   40,   41,   41,   61,   44,    0,   46,   44,
  125,  123,   41,   41,  123,   41,   91,   62,   93,  536,
   95,   93,   60,   93,  125,   63,   64,  125,  125,  125,
   62,   93,   93,   58,   53,  125,   95,  125,   62,  307,
  466,  558,   53,  472,  661,  503,  573,  862,  123,  654,
  125,  192,  596,   91,   33,  595,  560,   36,  367,   38,
  367,   40,   41,  736,  598,   44,  597,  735,  505,  564,
  372,  533,  708,  920,  677,  507,  514,  194,  194,   58,
   59,  195,   61,   62,   63,   64,  193,  191,  376,  332,
  586,  608,  715,  610,  380,  752,  449,  235,  615,   87,
  671,  610,  632,  439,  630,   -1,   -1,   -1,   -1,   -1,
   -1,  628,   91,  630,   93,  632,   95,  256,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  645,  646,
   -1,  257,   -1,  259,  651,   -1,   -1,   -1,   -1,   -1,
   -1,  267,   -1,   -1,  123,   -1,  125,   -1,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   -1,
  286,  287,  288,  289,  290,  291,   -1,   -1,   -1,   -1,
  296,   -1,   -1,   -1,  300,  301,  302,  303,  304,  305,
   -1,   -1,  257,   -1,  259,   -1,  261,   -1,   -1,  315,
   -1,  708,  267,   -1,  269,   -1,   -1,   -1,   -1,  274,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
   -1,  286,  287,  288,  289,  290,  291,   -1,   -1,  257,
   -1,  296,  297,  298,   -1,  300,  301,  302,  303,  304,
  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,
  315,   -1,   -1,   -1,   -1,   -1,   -1,   36,   -1,   38,
  288,   40,   41,   -1,   -1,   -1,   -1,   46,   -1,  297,
  298,   -1,   -1,   -1,   -1,   -1,   -1,  305,   -1,   -1,
   59,   -1,   -1,   -1,   -1,   64,   -1,   -1,  257,   -1,
  259,   -1,  261,   -1,   -1,   -1,  803,   -1,  267,   -1,
  269,  808,   -1,   -1,   -1,  274,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   95,  286,  287,  288,
  289,  290,  291,   -1,   -1,   -1,   -1,  296,  297,  298,
   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   33,  314,  315,   36,   -1,   38,
   -1,   40,   41,   -1,   -1,   44,   -1,   46,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   -1,   61,   62,   63,   64,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   33,   -1,   -1,   36,   -1,   38,
   -1,   40,   41,   -1,   93,   44,   95,   46,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   -1,   61,   -1,   63,   64,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   93,   -1,   95,   33,   -1,   -1,
   36,   -1,   38,   -1,   40,   41,   -1,   -1,   44,   -1,
   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,
   -1,   -1,   58,   59,  123,   61,  125,   63,   64,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,   -1,   -1,   -1,   -1,   -1,
  289,   -1,  291,   -1,   -1,   91,   -1,   93,   -1,   95,
   -1,   -1,   -1,   -1,   -1,   33,  305,   -1,   36,   -1,
   -1,   -1,   40,   41,   -1,  314,   44,   -1,   46,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,
   -1,   -1,   60,   -1,   -1,   63,   64,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,
  259,   -1,  261,   -1,   -1,   -1,   -1,   -1,  267,   -1,
  269,   -1,   -1,   91,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   -1,  286,  287,  288,
  289,  290,  291,   -1,   -1,   -1,   -1,  296,  297,  298,
   -1,  300,  301,  302,  303,  304,  305,   -1,  257,   -1,
  259,   -1,  261,   -1,   -1,  314,  315,   -1,  267,   -1,
  269,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   -1,  286,  287,  288,
  289,  290,  291,   -1,   -1,   -1,   38,  296,   -1,  298,
   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,  315,   -1,   -1,   -1,
   -1,  257,   64,  259,   -1,  261,   -1,   -1,   -1,   -1,
   -1,  267,   -1,  269,   -1,   -1,   -1,   -1,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   -1,
  286,  287,  288,  289,  290,  291,   -1,   -1,   -1,   -1,
  296,   -1,  298,   -1,  300,  301,  302,  303,  304,  305,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,  314,  315,
   36,   -1,   38,   -1,   40,   41,   -1,   -1,   44,  257,
   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   59,   -1,   61,   -1,   63,   64,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,
  298,   -1,   -1,   -1,   -1,   91,   -1,   93,   -1,   95,
   33,   -1,   -1,   36,   -1,   38,   -1,   40,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   61,  125,
   63,   64,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   36,   -1,   38,   -1,   40,   41,   -1,
   93,   44,   95,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   61,   62,
   -1,   64,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,   -1,  125,  275,  276,  277,  278,  279,  280,  281,
  282,  283,  284,   -1,  286,  287,  288,  289,  290,  291,
   93,   -1,   95,   -1,  296,   -1,   -1,   -1,  300,  301,
  302,  303,  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,   -1,  125,   -1,   36,   -1,   38,   -1,   40,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,   -1,  259,   -1,  261,   58,   59,   -1,   61,
   -1,  267,   64,  269,   -1,   -1,   -1,   -1,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   -1,
  286,  287,  288,  289,  290,  291,   -1,   -1,   -1,   -1,
  296,   93,  298,   95,  300,  301,  302,  303,  304,  305,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,
   -1,   -1,   -1,   -1,  257,   -1,  259,   -1,  261,   -1,
   -1,  123,   -1,  125,  267,   -1,  269,   -1,   -1,   -1,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,  287,  288,  289,  290,  291,   -1,
   -1,   -1,   -1,  296,   -1,  298,   -1,  300,  301,  302,
  303,  304,  305,   -1,  257,   -1,  259,   -1,  261,   -1,
   -1,  314,  315,   -1,  267,   -1,  269,   -1,   -1,   -1,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,  287,  288,  289,  290,  291,   -1,
   -1,   -1,   -1,  296,   -1,  298,   -1,  300,  301,  302,
  303,  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  314,  315,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   36,   -1,
   38,   -1,   40,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,   -1,  259,   -1,  261,
   58,   59,   -1,   61,   -1,  267,   64,  269,   -1,   -1,
   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,  281,
  282,  283,  284,   -1,  286,  287,  288,  289,  290,  291,
   -1,   -1,   -1,   -1,  296,   93,  298,   95,  300,  301,
  302,  303,  304,  305,   -1,   -1,   36,   -1,   38,   -1,
   40,   41,  314,  315,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   58,   59,
   -1,   61,   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   36,   -1,   38,   -1,
   40,   41,   -1,   93,   44,   95,   46,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   60,   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   36,   -1,
   38,   -1,   40,   41,   -1,   95,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   59,   -1,   -1,   -1,   -1,   64,   -1,   -1,   -1,
   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
   -1,  259,   -1,  261,   -1,   -1,   -1,   95,   -1,  267,
   -1,  269,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
  288,  289,  290,  291,   -1,  123,   -1,  125,  296,   -1,
  298,   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,  259,
   -1,  261,   -1,   -1,   -1,   -1,   -1,  267,   -1,  269,
   -1,   -1,   -1,   -1,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,   -1,   -1,   -1,   -1,  296,   -1,  298,   -1,
  300,  301,  302,  303,  304,  305,   -1,  257,   -1,  259,
   64,  261,   -1,   -1,  314,  315,   -1,  267,   -1,  269,
   -1,   -1,   -1,   -1,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,
  300,  301,  302,  303,  304,  305,   -1,   -1,   -1,  257,
   -1,  259,   -1,  261,  314,  315,   -1,   -1,   -1,  267,
   -1,  269,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
  288,  289,  290,  291,   -1,   -1,   -1,   -1,  296,   -1,
  298,   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,
   36,   -1,   38,   -1,   40,   41,  314,  315,   44,   -1,
  275,  276,  277,  278,  279,  280,  281,  282,  283,   -1,
   -1,   -1,   58,   59,  289,  290,   -1,   -1,   64,   -1,
   -1,   -1,   -1,   -1,   -1,  300,  301,   -1,   -1,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   36,
   -1,   38,   -1,   -1,   41,   -1,   -1,   44,   -1,   95,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   59,   -1,   61,   -1,   -1,   64,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   36,
   -1,   38,   -1,   40,   41,   -1,   93,   44,   95,   -1,
   -1,  275,  276,  277,  278,  279,  280,  281,  282,  283,
   -1,   58,   59,   -1,   -1,  289,  290,   64,   -1,   -1,
   -1,   -1,  296,   -1,   -1,   -1,  300,  301,  125,   -1,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   36,
   -1,   38,   -1,   -1,   41,   -1,   -1,   44,   95,   46,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   59,   -1,   -1,   -1,   -1,   64,   -1,   -1,
   -1,  267,   -1,   -1,   -1,   -1,  123,   -1,  125,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   -1,
  286,  287,  288,  289,  290,  291,   -1,   -1,   95,   -1,
   -1,   -1,   -1,   -1,  300,  301,  302,   -1,  304,   61,
   -1,  257,   64,  259,   -1,  261,   -1,   -1,   -1,   -1,
   -1,  267,   -1,  269,   -1,   -1,  123,   -1,  125,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   -1,
  286,  287,  288,  289,  290,  291,   -1,   -1,   -1,   -1,
  296,   -1,  298,   -1,  300,  301,  302,  303,  304,  305,
  257,   -1,  259,   -1,  261,   -1,   -1,   -1,  314,  315,
  267,  123,  269,  125,   -1,   -1,   -1,   -1,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
  287,  288,  289,  290,  291,   -1,   -1,   -1,   -1,  296,
   -1,  298,   -1,  300,  301,  302,  303,  304,   -1,   -1,
  257,   -1,  259,   -1,  261,   -1,   -1,  314,  315,   -1,
  267,   -1,  269,   -1,   -1,   -1,   -1,   -1,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
  287,  288,  289,  290,  291,   -1,   -1,   -1,   -1,  296,
   -1,   -1,   -1,  300,  301,  302,  303,  304,  305,   -1,
  257,   -1,  259,   -1,  261,   -1,   -1,  314,  315,   -1,
  267,   -1,  269,   -1,   -1,   -1,   -1,   -1,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
  287,  288,  289,  290,  291,   -1,   -1,   -1,   -1,  296,
   -1,   64,   -1,  300,  301,  302,  303,  304,  305,   -1,
   -1,   36,   -1,   38,   -1,   40,   41,  314,  315,   44,
   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,  281,
  282,  283,   -1,   58,   59,   -1,   -1,  289,  290,   64,
   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,  300,  301,
   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,   36,  125,   38,   -1,   -1,   41,   -1,   -1,   44,
   95,   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,   -1,   64,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   36,   -1,   38,   -1,   40,   41,   -1,   -1,   44,
   95,   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,   -1,   64,
   -1,   -1,   -1,   -1,  267,   -1,   -1,   -1,  123,   -1,
  125,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,  287,  288,  289,  290,  291,   -1,
   95,   -1,   -1,   -1,   -1,   -1,   -1,  300,  301,  302,
   36,  304,   38,   -1,   40,   41,   -1,   -1,   44,   -1,
   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,
  125,   -1,   58,   59,   -1,   -1,   -1,   -1,   64,   -1,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,   -1,   -1,   -1,   -1,   -1,  289,  290,   -1,   -1,
   -1,   -1,  257,  296,  259,   -1,  261,  300,  301,   95,
   -1,  304,  267,   -1,  269,   -1,   -1,   -1,   -1,   64,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
   -1,  286,  287,  288,  289,  290,  291,  123,   -1,  125,
   -1,  296,   -1,   -1,   -1,  300,  301,  302,  303,  304,
  305,   -1,  257,   -1,  259,   -1,  261,   -1,   -1,  314,
  315,   -1,  267,   -1,  269,   -1,   -1,   -1,   -1,   -1,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
  125,  286,  287,  288,  289,  290,  291,   -1,   -1,   -1,
   -1,  296,   -1,   -1,   -1,  300,  301,  302,  303,  304,
  305,   -1,  257,   -1,  259,   -1,  261,   -1,   -1,  314,
  315,   -1,  267,   -1,  269,   -1,   -1,   -1,   -1,   -1,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
   -1,  286,  287,  288,  289,  290,  291,   -1,   -1,   -1,
   -1,  296,   -1,   -1,   -1,  300,  301,  302,  303,  304,
  305,   64,   -1,   -1,   36,   -1,   38,   -1,   40,  314,
   -1,   -1,   -1,   -1,   46,   -1,   -1,   -1,   -1,   -1,
   -1,  257,   -1,  259,   -1,  261,   -1,   59,   -1,   -1,
   -1,  267,   64,  269,   -1,   -1,   -1,   -1,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   -1,
  286,  287,  288,  289,  290,  291,   -1,   -1,   -1,   -1,
  296,   -1,  125,   95,  300,  301,  302,  303,  304,  305,
   -1,   38,   -1,   -1,   41,   -1,   -1,   44,  314,   46,
  275,  276,  277,  278,  279,  280,  281,  282,  283,   -1,
   -1,   58,   59,   -1,  289,  290,   -1,   -1,   -1,   -1,
   -1,  296,   -1,   -1,   -1,  300,  301,   -1,   -1,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   38,   -1,   -1,   41,   -1,   -1,   44,   95,   46,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   38,   -1,   -1,   41,   -1,   -1,   44,   95,   46,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,   -1,   -1,   -1,   -1,  257,  289,  290,   95,   -1,
   -1,   -1,   36,  296,   38,   -1,   -1,  300,  301,   -1,
   -1,  304,   -1,  275,  276,  277,  278,  279,  280,  281,
  282,  283,   -1,   -1,   -1,   -1,  123,  289,  125,  291,
   64,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  305,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  314,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  259,   -1,  261,   -1,   -1,   -1,   -1,   -1,
  267,   -1,  269,   -1,   36,   -1,   38,   -1,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
  287,  125,  289,  290,  291,   -1,   -1,   -1,   -1,  296,
   -1,   -1,   64,  300,  301,  302,  303,  304,  305,   -1,
   -1,   -1,  259,   -1,  261,   -1,   -1,  314,  315,   -1,
  267,   -1,  269,   -1,   -1,   -1,   -1,   -1,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
  287,   -1,  289,  290,  291,   -1,   36,   -1,   38,  296,
   40,   -1,   -1,  300,  301,  302,  303,  304,  305,   -1,
   -1,   -1,  259,  125,  261,   -1,   -1,  314,  315,   -1,
  267,   -1,  269,   -1,   64,   -1,   -1,   -1,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
  287,   -1,  289,  290,  291,   -1,   36,   -1,   38,  296,
   -1,   91,   -1,  300,  301,  302,  303,  304,  305,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,   -1,
   -1,   -1,   -1,  257,   64,   -1,  260,   -1,  262,  263,
  264,   -1,  266,   -1,   -1,   -1,  270,  271,  272,  273,
   -1,  275,  276,  277,  278,  279,  280,  281,  282,  283,
  284,   -1,  286,  287,  288,  289,  290,  291,  292,  293,
  294,  295,  296,   36,   -1,   38,  300,  301,  302,  303,
  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  125,   59,   -1,   -1,   -1,
   -1,   64,   -1,   -1,   -1,  257,   -1,   -1,  260,   -1,
  262,  263,  264,   -1,  266,   -1,   -1,   -1,  270,  271,
  272,  273,   -1,  275,  276,  277,  278,  279,  280,  281,
  282,  283,  284,   -1,  286,  287,  288,  289,  290,  291,
  292,  293,   -1,   36,  296,   38,   -1,   -1,  300,  301,
  302,  303,  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,
   -1,   64,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,
  260,   -1,  262,  263,  264,   36,  266,   -1,   -1,   40,
  270,  271,  272,  273,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,
  300,  301,  302,  303,  304,  305,   -1,  257,   -1,   -1,
  260,   -1,  262,  263,  264,   36,  266,   38,   -1,   -1,
  270,  271,  272,  273,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,   -1,   64,   -1,   -1,  296,   -1,   -1,   -1,
  300,  301,  302,  303,  304,  305,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,   -1,   -1,  260,   -1,  262,
  263,  264,   -1,  266,   -1,   -1,   -1,  270,  271,  272,
  273,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,  287,  288,  289,  290,  291,   -1,
   -1,   -1,   -1,  296,   -1,   -1,   -1,  300,  301,  302,
  303,  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,   -1,   -1,  260,   -1,  262,
  263,  264,   -1,  266,   -1,   -1,   -1,  270,  271,  272,
  273,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,  287,  288,  289,  290,  291,   -1,
   -1,   -1,   -1,  296,   -1,   -1,  257,  300,  301,  302,
  303,  304,  305,   -1,   -1,   -1,  267,   36,   -1,   -1,
   -1,   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,   64,   -1,   -1,  299,  300,
  301,  302,   -1,  304,   -1,   -1,  257,   -1,   -1,  260,
   -1,  262,  263,  264,   -1,  266,   -1,   -1,   -1,  270,
  271,  272,  273,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,  287,  288,  289,  290,
  291,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,  300,
  301,  302,  303,  304,  305,   36,   -1,   38,   -1,   40,
   41,   -1,   -1,   44,   -1,   46,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,
   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   36,   -1,   38,   -1,   40,   41,   -1,
   -1,   44,   -1,   46,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   93,   -1,   95,   58,   59,   -1,   -1,   -1,
   -1,   64,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,
   36,   -1,   -1,   -1,   40,   41,   -1,   -1,   44,   -1,
   46,   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,
   93,   -1,   95,   -1,   60,   -1,   -1,   63,   64,   -1,
   -1,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,   -1,  125,   64,   -1,   91,   -1,   -1,  257,   95,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   -1,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,   64,   -1,   -1,
  299,  300,  301,  302,   -1,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  125,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   64,  286,  287,  288,
  289,  290,  291,  292,  293,   -1,  257,   -1,  259,   -1,
  261,  300,  301,  302,   -1,  304,  267,   -1,  269,   -1,
   -1,   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,  287,  288,  289,  290,
  291,   -1,   -1,   -1,  257,  296,  259,  298,  261,  300,
  301,  302,  303,  304,  267,   -1,  269,  125,   -1,   64,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,  287,  288,  289,  290,  291,   44,
   -1,  257,   -1,  296,   -1,  298,   -1,  300,  301,  302,
  303,  304,   -1,   -1,   59,   -1,   -1,   -1,   -1,   64,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  288,   -1,   -1,   -1,  267,   -1,   -1,   -1,
  125,  297,  298,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,  287,  288,  289,  290,
  291,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,  300,
  301,  302,  303,  304,  305,   -1,   -1,   -1,  123,   -1,
  125,   59,   -1,   -1,   -1,   -1,   64,   -1,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
  287,  288,  289,  290,  291,   -1,   -1,   -1,   -1,  296,
   -1,   -1,   -1,  300,  301,  302,  303,  304,  305,  267,
   59,   -1,   -1,   -1,   -1,   64,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
  288,  289,  290,  291,   -1,  123,   -1,  125,  296,   -1,
   -1,   -1,  300,  301,  302,  303,  304,  305,   -1,   59,
   -1,   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  267,   -1,  123,   -1,  125,   -1,   -1,   -1,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
   -1,  286,  287,  288,  289,  290,  291,   64,   -1,   -1,
   -1,  296,   -1,   -1,  259,  300,  301,  302,  303,  304,
  305,   -1,  267,  123,   -1,  125,   -1,   -1,   -1,   -1,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
   -1,  286,  287,  288,  289,  290,  291,   -1,   -1,   -1,
   -1,  296,   -1,   64,   -1,  300,  301,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  259,   -1,   -1,   -1,   64,   -1,   -1,   -1,  267,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,  287,
  288,  289,  290,  291,  125,   -1,   -1,   -1,  296,   -1,
  259,   -1,  300,  301,  302,  303,  304,  305,  267,   -1,
   -1,   64,   -1,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,  125,  286,  287,  288,
  289,  290,  291,   -1,   -1,   -1,   -1,  296,   -1,  259,
   -1,  300,  301,  302,  303,  304,  305,  267,   -1,   -1,
   -1,   -1,   -1,   -1,   64,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,  125,   -1,   -1,   -1,  296,   -1,   -1,   -1,
  300,  301,  302,  303,  304,  305,   -1,   -1,   -1,   -1,
  267,   -1,   -1,   64,   -1,   -1,   -1,   -1,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
  287,  288,  289,  290,  291,  125,   -1,   -1,   -1,  296,
   -1,   -1,   -1,  300,  301,  302,  303,  304,  305,   -1,
   -1,   -1,   64,   -1,   -1,   -1,  267,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,  125,  286,  287,  288,  289,  290,
  291,   -1,   -1,   64,   -1,  296,   -1,   -1,  267,  300,
  301,  302,  303,  304,  305,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   -1,  286,  287,  288,
  289,  290,  291,  125,   64,   -1,   -1,  296,   -1,   -1,
   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  267,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,  287,  288,  289,  290,  291,   64,
   -1,   -1,   -1,  296,   -1,   -1,   -1,  300,  301,  302,
  303,  304,  305,   -1,   -1,  125,   -1,  267,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,
  300,  301,  302,  303,  304,  305,   -1,   -1,   -1,   -1,
   -1,   64,   -1,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,  287,  288,  289,  290,
  291,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,  300,
  301,  302,  303,  304,  305,   64,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,  281,
  282,  283,  284,   -1,  286,  287,  288,  289,  290,  291,
  123,   -1,  125,   -1,  296,   -1,  267,   -1,  300,  301,
  302,  303,  304,  305,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   64,  286,  287,  288,  289,  290,
  291,   -1,   -1,   -1,  123,  296,  125,   -1,   -1,  300,
  301,  302,  303,  304,  305,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,   64,   -1,   -1,   -1,  296,   -1,   -1,   -1,
  300,  301,  302,  303,  304,  305,   -1,   -1,   -1,   -1,
   -1,   -1,  267,  123,   -1,  125,   -1,   -1,   -1,   -1,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
   -1,  286,  287,  288,  289,  290,  291,   -1,   -1,   -1,
   -1,  296,   -1,   -1,   -1,  300,  301,  302,  303,  304,
  305,   -1,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,   -1,   -1,   -1,   -1,   -1,  289,  290,   -1,   -1,
   -1,   -1,  261,  296,  297,   -1,   -1,  300,  301,   -1,
   -1,  304,   -1,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,   -1,   -1,   -1,   -1,   -1,
  289,  290,   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,
   -1,  300,  301,   -1,   -1,  304,   -1,   -1,   -1,   -1,
   -1,  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,   -1,   -1,   -1,   -1,   -1,  289,
  290,   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,
  300,  301,   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,  281,
  282,  283,   -1,   -1,   -1,   -1,   -1,  289,  290,   -1,
   -1,   -1,   -1,   -1,  296,   -1,   -1,   -1,  300,  301,
   -1,   -1,  304,  275,  276,  277,  278,  279,  280,  281,
  282,  283,  284,   -1,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,   -1,   -1,   -1,   -1,  300,  301,
  302,   -1,  304,  275,  276,  277,  278,  279,  280,  281,
  282,  283,  284,   -1,  286,  287,  288,  289,  290,  291,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  300,  301,
  302,   -1,  304,
  };

#line 1314 "Swiften/SwiftParser.jay"

}



















#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 System.Diagnostics.Debug.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int IDENTIFIER = 257;
  public const int NUMBER = 258;
  public const int NEWLINE = 259;
  public const int FOR = 260;
  public const int IN = 261;
  public const int DO = 262;
  public const int WHILE = 263;
  public const int IF = 264;
  public const int ELSE = 265;
  public const int SWITCH = 266;
  public const int CASE = 267;
  public const int DEFAULT = 268;
  public const int WHERE = 269;
  public const int BREAK = 270;
  public const int CONTINUE = 271;
  public const int FALLTHROUGH = 272;
  public const int RETURN = 273;
  public const int EQEQ_OP = 274;
  public const int CLASS = 275;
  public const int MUTATING = 276;
  public const int NONMUTATING = 277;
  public const int OVERRIDE = 278;
  public const int STATIC = 279;
  public const int UNOWNED = 280;
  public const int UNOWNED_SAFE = 281;
  public const int UNOWNED_UNSAFE = 282;
  public const int WEAK = 283;
  public const int IMPORT = 284;
  public const int TYEPALIAS = 285;
  public const int STRUCT = 286;
  public const int ENUM = 287;
  public const int PROTOCOL = 288;
  public const int VAR = 289;
  public const int FUNC = 290;
  public const int LET = 291;
  public const int GET = 292;
  public const int SET = 293;
  public const int WILLSET = 294;
  public const int DIDSET = 295;
  public const int TYPEALIAS = 296;
  public const int ARROW_OP = 297;
  public const int DOTDOTDOT_OP = 298;
  public const int INOUT = 299;
  public const int CONVENIENCE = 300;
  public const int INIT = 301;
  public const int DEINIT = 302;
  public const int EXTENSION = 303;
  public const int SUBSCRIPT = 304;
  public const int OPERATOR = 305;
  public const int PREFIX = 306;
  public const int POSTFIX = 307;
  public const int INFIX = 308;
  public const int PRECEDENCE = 309;
  public const int ASSOCIATIVITY = 310;
  public const int LEFT = 311;
  public const int RIGHT = 312;
  public const int NONE = 313;
  public const int IS = 314;
  public const int AS = 315;
  public const int BALANCED_TEXT = 316;
  public const int FILE_DEFINE = 317;
  public const int LINE_DEFINE = 318;
  public const int COLUMN_DEFINE = 319;
  public const int FUNCTION_DEFINE = 320;
  public const int SELF = 321;
  public const int SUPER = 322;
  public const int DYNAMICTYPE = 323;
  public const int UTYPE = 324;
  public const int UPROTOCOL = 325;
  public const int INTEGER_LITERAL = 326;
  public const int FLOATING_POINT_LITERAL = 327;
  public const int STRING_LITERAL = 328;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
