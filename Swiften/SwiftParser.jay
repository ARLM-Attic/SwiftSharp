%{
using System.Text;
using System.IO;
using System;
using System.Collections.Generic;

#pragma warning disable 219,414

namespace Swiften
{
	public partial class SwiftParser
	{
%}

%token IDENTIFIER NUMBER
%token NEWLINE
%token FOR IN DO WHILE
%token IF ELSE
%token SWITCH CASE DEFAULT
%token WHERE
%token BREAK CONTINUE FALLTHROUGH RETURN
%token EQEQ_OP
%token CLASS MUTATING NONMUTATING OVERRIDE STATIC UNOWNED UNOWNED_SAFE UNOWNED_UNSAFE WEAK
%token IMPORT TYEPALIAS STRUCT ENUM PROTOCOL VAR FUNC
%token LET
%token GET SET WILLSET DIDSET
%token TYPEALIAS
%token ARROW_OP DOTDOTDOT_OP INOUT
%token CONVENIENCE INIT DEINIT
%token EXTENSION
%token SUBSCRIPT
%token OPERATOR PREFIX POSTFIX INFIX PRECEDENCE ASSOCIATIVITY LEFT RIGHT NONE
%token IS AS
%token BALANCED_TEXT
%token FILE_DEFINE LINE_DEFINE COLUMN_DEFINE FUNCTION_DEFINE
%token SELF SUPER
%token DYNAMICTYPE
%token UTYPE UPROTOCOL
%token INTEGER_LITERAL FLOATING_POINT_LITERAL STRING_LITERAL

%token END 0 "end of file"

%start top_level_declaration
%%

//
// Based on:
//
//   "The Swift Programming Language" Jun 2, 2014
//   https://itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11
//

//
// STATEMENTS
//

statement
	: expression statement_end
	{
		$$ = new ExpressionStatement ((Expression)$1);
	}
	| declaration statement_end
	| loop_statement statement_end
	| branch_statement statement_end
	| labeled_statement NEWLINE
	| labeled_statement END
	| control_transfer_statement statement_end
	;

statement_end
	: NEWLINE
	| ';'
	| END
	;

statements
	: statement
	{
		$$ = MakeList ((Statement)$1);
	}
	| statement statements
	{
		$$ = AddToList ((Statement)$1, $2);
	}
	;


loop_statement
	: for_statement
	| for_in_statement
	| while_statement
	| do_while_statement
	;

for_statement
	: FOR for_init ';' expression ';' expression code_block
	| FOR for_init ';' expression ';' code_block
	| FOR for_init ';' ';' expression code_block
	| FOR for_init ';' ';' code_block
	| FOR ';' expression ';' expression code_block
	| FOR ';' expression ';' code_block
	| FOR ';' ';' expression code_block
	| FOR ';' ';' code_block
	| FOR '(' for_init ';' expression ';' expression ')' code_block
	| FOR '(' for_init ';' expression ';' ')' code_block
	| FOR '(' for_init ';' ';' expression ')' code_block
	| FOR '(' for_init ';' ';' ')' code_block
	| FOR '(' ';' expression ';' expression ')' code_block
	| FOR '(' ';' expression ';' ')' code_block
	| FOR '(' ';' ';' expression ')' code_block
	| FOR '(' ';' ';' ')' code_block
	;

for_init
	: variable_declaration
	| expression_list
	;

for_in_statement
	: FOR pattern IN expression code_block
	;

while_statement
	: WHILE while_condition code_block
	;

while_condition
	: expression
	| declaration
	;

do_while_statement
	: DO code_block WHILE while_condition
	;

branch_statement
	: if_statement
	| switch_statement
	;

if_statement
	: IF if_condition code_block else_clause
	| IF if_condition code_block
	;

if_condition
	: expression
	| declaration
	;

else_clause
	: ELSE code_block
	| ELSE if_statement
	;

switch_statement
	: SWITCH expression '{' switch_cases '}'
	| SWITCH expression '{' '}'
	;

switch_cases
	: switch_case
	| switch_case switch_cases
	;

switch_case
	: case_label statements
	| default_label statements
	| case_label ';'
	| default_label ';'
	;

case_label
	: CASE case_item_list ':'
	;

case_item
	: pattern guard_clause
	| pattern
	;

case_item_list
	: case_item
	| case_item case_item_list
	;

default_label
	: DEFAULT ':'
	;

guard_clause
	: WHERE guard_expression
	;

guard_expression
	: expression
	;

labeled_statement
	: statement_label loop_statement
	| statement_label switch_statement
	;

statement_label
	: label_name ':'
	;

label_name
	: identifier
	;

control_transfer_statement
	: break_statement
	| continue_statement
	| fallthrough_statement
	| return_statement
	;

break_statement
	: BREAK label_name
	| BREAK
	;

continue_statement
	: CONTINUE label_name
	| CONTINUE
	;

fallthrough_statement
	: FALLTHROUGH
	;

return_statement
	: RETURN expression
	| RETURN
	;


//
// GENERIC PARAMETERS AND ARGUMENTS
//

generic_parameter_clause
	: '<' generic_parameter_list requirement_clause '>'
	| '<' generic_parameter_list '>'
	;

generic_parameter_list
	: generic_parameter
	| generic_parameter ',' generic_parameter_list
	;

generic_parameter
	: type_name
	| type_name ':' type_identifier
	| type_name ':' protocol_composition_type
	;

requirement_clause
	: WHERE requirement_list
	;

requirement_list
	: requirement
	| requirement ',' requirement_list
	;

requirement
	: conformance_requirement
	| same_type_requirement
	;

conformance_requirement
	: type_identifier ':' type_identifier
	| type_identifier ':' protocol_composition_type
	;

same_type_requirement
	: type_identifier EQEQ_OP type_identifier
	;

generic_argument_clause
	: '<' generic_argument_list '>'
	;

generic_argument_list
	: generic_argument
	| generic_argument ',' generic_argument_list
	;

generic_argument
	: type
	;



//
// DECLARATIONS
//

declaration
	: import_declaration
	| constant_declaration
	| variable_declaration
	| typealias_declaration
	| function_declaration
	| enum_declaration
	| struct_declaration
	| class_declaration
	| protocol_declaration
	| initializer_declaration
	| deinitializer_declaration
	| extension_declaration
	| subscript_declaration
	| operator_declaration
	;

declarations
	: declaration
	| declaration declarations
	;

declaration_specifiers
	: declaration_specifier
	| declaration_specifier declaration_specifiers
	;

declaration_specifier
	: CLASS
	| MUTATING
	| NONMUTATING
	| OVERRIDE
	| STATIC
	| UNOWNED
	| UNOWNED_SAFE
	| UNOWNED_UNSAFE
	| WEAK
	;

top_level_declaration
	: statements
	|
	;

code_block
	: '{' statements '}'
	| '{' '}'
	;

import_declaration
	: attributes IMPORT import_kind import_path
	| attributes IMPORT import_path
	| IMPORT import_kind import_path
	| IMPORT import_path
	;

import_kind
	: TYEPALIAS
	| STRUCT
	| CLASS
	| ENUM
	| PROTOCOL
	| VAR
	| FUNC
	;

import_path
	: import_path_identifier
	| import_path_identifier '.' import_path
	;

import_path_identifier
	: identifier
	| operator_
	;

constant_declaration
	: attributes declaration_specifiers LET pattern_initializer_list
	| attributes LET pattern_initializer_list
	| declaration_specifiers LET pattern_initializer_list
	| LET pattern_initializer_list
	;

pattern_initializer_list
	: pattern_initializer
	| pattern_initializer ',' pattern_initializer_list
	;

pattern_initializer
	: pattern initializer
	| pattern
	;

initializer
	: '=' expression
	;

variable_declaration
	: variable_declaration_head pattern_initializer_list
	| variable_declaration_head variable_name type_annotation code_block
	| variable_declaration_head variable_name type_annotation getter_setter_block
	| variable_declaration_head variable_name type_annotation getter_setter_keyword_block
	| variable_declaration_head variable_name type_annotation initializer willSet_didSet_block
	| variable_declaration_head variable_name type_annotation willSet_didSet_block
	;

variable_declaration_head
	: attributes declaration_specifiers VAR
	| attributes VAR
	| declaration_specifiers VAR
	| VAR
	;

variable_name
	: identifier
	;

getter_setter_block
	: '{' getter_clause setter_clause '}'
	| '{' getter_clause '}'
	| '{' setter_clause getter_clause '}'
	;

getter_clause
	: attributes GET code_block
	| GET code_block
	;

setter_clause
	: attributes SET setter_name code_block
	| attributes SET code_block
	| SET setter_name code_block
	| SET code_block
	;

setter_name
	: '(' identifier ')'
	;

getter_setter_keyword_block
	: '{' getter_keyword_clause setter_keyword_clause '}'
	| '{' getter_keyword_clause '}'
	| '{' setter_keyword_clause getter_keyword_clause '}'
	;

getter_keyword_clause
	: attributes GET
	| GET
	;

setter_keyword_clause
	: attributes SET
	| SET
	;

willSet_didSet_block
	: '{' willSet_clause didSet_clause '}'
	| '{' willSet_clause '}'
	| '{' didSet_clause willSet_clause '}'
	;

willSet_clause
	: attributes WILLSET setter_name code_block
	| attributes WILLSET code_block
	| WILLSET setter_name code_block
	| WILLSET code_block
	;

didSet_clause
	: attributes DIDSET setter_name code_block
	| attributes DIDSET code_block
	| DIDSET setter_name code_block
	| DIDSET code_block
	;

typealias_declaration
	: typealias_head typealias_assignment
	;

typealias_head
	: TYPEALIAS typealias_name
	;

typealias_name
	: identifier
	;

typealias_assignment
	: '=' type
	;

function_declaration
	: function_head function_name generic_parameter_clause function_signature function_body
	| function_head function_name function_signature function_body
	;

function_head
	: attributes declaration_specifiers FUNC
	| attributes FUNC
	| declaration_specifiers FUNC
	| FUNC
	;

function_name
	: identifier
	| operator_
	;

function_signature
	: parameter_clauses function_result
	| parameter_clauses
	;

function_result
	: ARROW_OP attributes type
	| ARROW_OP type
	;

function_body
	: code_block
	;

parameter_clauses
	: parameter_clause
	| parameter_clause parameter_clauses
	;

parameter_clause
	: '(' ')'
	| '(' parameter_list DOTDOTDOT_OP ')'
	| '(' parameter_list ')'
	;

parameter_list
	: parameter
	| parameter ',' parameter_list
	;

parameter
	: parameter_head local_parameter_name type_annotation default_argument_clause
	| parameter_head local_parameter_name type_annotation
	| parameter_head type_annotation default_argument_clause
	| parameter_head type_annotation
	| attributes type
	| type
	;

// FAK: Introduced to keep parameter's declaration concise
parameter_head
	: INOUT LET '#' parameter_name
	| INOUT LET parameter_name
	| INOUT '#' parameter_name
	| INOUT parameter_name
	| LET '#' parameter_name
	| LET parameter_name
	| '#' parameter_name
	| parameter_name
	| INOUT VAR '#' parameter_name
	| INOUT VAR parameter_name
	| VAR '#' parameter_name
	| VAR parameter_name
	;

parameter_name
	: identifier
	| '_'
	;

local_parameter_name
	: identifier
	| '_'
	;

default_argument_clause
	: expression
	;

// FAK: The grammar makes no mention of the ENUM token, but it's
// obviously needed. This seems to be a bug in the book.
enum_declaration
	: attributes ENUM union_style_enum
	| ENUM union_style_enum
	| attributes ENUM raw_value_style_enum
	| ENUM raw_value_style_enum
	;

union_style_enum
	: enum_name generic_parameter_clause '{' union_style_enum_members '}'
	| enum_name generic_parameter_clause '{' '}'
	| enum_name '{' union_style_enum_members '}'
	| enum_name '{' '}'
	;

union_style_enum_members
	: union_style_enum_member
	| union_style_enum_member union_style_enum_members
	;

union_style_enum_member
	: declaration
	| union_style_enum_case_clause
	;

union_style_enum_case_clause
	: attributes CASE union_style_enum_case_list
	| CASE union_style_enum_case_list
	;

union_style_enum_case_list
	: union_style_enum_case
	| union_style_enum_case ',' union_style_enum_case_list
	;

union_style_enum_case
	: enum_case_name tuple_type
	| enum_case_name
	;

enum_name
	: identifier
	;

enum_case_name
	: identifier
	;

raw_value_style_enum
	: enum_name generic_parameter_clause ':' type_identifier '{' raw_value_style_enum_members '}'
	| enum_name generic_parameter_clause ':' type_identifier '{' '}'
	| enum_name ':' type_identifier '{' raw_value_style_enum_members '}'
	| enum_name ':' type_identifier '{' '}'
	;

raw_value_style_enum_members
	: raw_value_style_enum_member
	| raw_value_style_enum_member raw_value_style_enum_members
	;

raw_value_style_enum_member
	: declaration
	| raw_value_style_enum_case_clause
	;

raw_value_style_enum_case_clause
	: attributes CASE raw_value_style_enum_case_list
	| CASE raw_value_style_enum_case_list
	;

raw_value_style_enum_case_list
	: raw_value_style_enum_case
	| raw_value_style_enum_case ',' raw_value_style_enum_case_list
	;

raw_value_style_enum_case
	: enum_case_name raw_value_assignment
	| enum_case_name
	;

raw_value_assignment
	: '=' literal
	;

struct_declaration
	: attributes STRUCT struct_name generic_parameter_clause type_inheritance_clause struct_body
	| attributes STRUCT struct_name generic_parameter_clause struct_body
	| attributes STRUCT struct_name type_inheritance_clause struct_body
	| attributes STRUCT struct_name struct_body
	| STRUCT struct_name generic_parameter_clause type_inheritance_clause struct_body
	| STRUCT struct_name generic_parameter_clause struct_body
	| STRUCT struct_name type_inheritance_clause struct_body
	| STRUCT struct_name struct_body
	;

struct_name
	: identifier
	;

struct_body
	: '{' declarations '}'
	| '{' '}'
	;

class_declaration
	: attributes CLASS class_name generic_parameter_clause type_inheritance_clause class_body
	| attributes CLASS class_name generic_parameter_clause class_body
	| attributes CLASS class_name type_inheritance_clause class_body
	| attributes CLASS class_name class_body
	| CLASS class_name generic_parameter_clause type_inheritance_clause class_body
	| CLASS class_name generic_parameter_clause class_body
	| CLASS class_name type_inheritance_clause class_body
	| CLASS class_name class_body
	;

class_name
	: identifier
	;

class_body
	: '{' declarations '}'
	| '{' '}'
	;

protocol_declaration
	: attributes PROTOCOL protocol_name type_inheritance_clause protocol_body
	| attributes PROTOCOL protocol_name protocol_body
	| PROTOCOL protocol_name type_inheritance_clause protocol_body
	| PROTOCOL protocol_name protocol_body
	;

protocol_name
	: identifier
	;

protocol_body
	: '{' protocol_member_declarations '}'
	| '{' '}'
	;

protocol_member_declaration
	: protocol_property_declaration
	| protocol_method_declaration
	| protocol_initializer_declaration
	| protocol_subscript_declaration
	| protocol_associated_type_declaration
	;

protocol_member_declarations
	: protocol_member_declaration
	| protocol_member_declaration protocol_member_declarations
	;

protocol_property_declaration
	: variable_declaration_head variable_name type_annotation getter_setter_keyword_block
	;

protocol_method_declaration
	: function_head function_name generic_parameter_clause function_signature
	| function_head function_name function_signature
	;

protocol_initializer_declaration
	: initializer_head generic_parameter_clause parameter_clause
	| initializer_head parameter_clause
	;

protocol_subscript_declaration
	: subscript_head subscript_result getter_setter_keyword_block
	;

protocol_associated_type_declaration
	: typealias_head type_inheritance_clause typealias_assignment
	| typealias_head type_inheritance_clause
	| typealias_head typealias_assignment
	| typealias_head
	;

initializer_declaration
	: initializer_head generic_parameter_clause parameter_clause initializer_body
	| initializer_head parameter_clause initializer_body
	;

initializer_head
	: attributes CONVENIENCE INIT
	| attributes INIT
	| CONVENIENCE INIT
	| INIT
	;

initializer_body
	: code_block
	;

deinitializer_declaration
	: attributes DEINIT code_block
	| DEINIT code_block
	;

extension_declaration
	: EXTENSION type_identifier type_inheritance_clause extension_body
	| EXTENSION type_identifier extension_body
	;

extension_body
	: '{' declarations '}'
	| '{' '}'
	;

subscript_declaration
	: subscript_head subscript_result code_block
	| subscript_head subscript_result getter_setter_block
	| subscript_head subscript_result getter_setter_keyword_block
	;

subscript_head
	: attributes SUBSCRIPT parameter_clause
	| SUBSCRIPT parameter_clause
	;

subscript_result
	: attributes type
	| type
	;

operator_declaration
	: prefix_operator_declaration
	| postfix_operator_declaration
	| infix_operator_declaration
	;

prefix_operator_declaration
	: OPERATOR PREFIX operator_ '{' '}'
	;

postfix_operator_declaration
	: OPERATOR POSTFIX operator_ '{' '}'
	;

infix_operator_declaration
	: OPERATOR INFIX operator_ '{' infix_operator_attributes '}'
	| OPERATOR INFIX operator_ '{' '}'
	;

infix_operator_attributes
	: precedence_clause associativity_clause
	| precedence_clause
	| associativity_clause
	;

precedence_clause
	: PRECEDENCE NUMBER
	;

associativity_clause
	: ASSOCIATIVITY associativity_value
	;

associativity_value
	: LEFT
	| RIGHT
	| NONE
	;


//
// TYPES
//

type
	: array_type
	| function_type
	| type_identifier
	| tuple_type
	| optional_type
	| implicitly_unwrapped_optional_type
	| protocol_composition_type
	| metatype_type
	;

type_annotation
	: attributes type
	| type
	;

type_identifier
	: type_name generic_argument_clause
	| type_name
	| type_name generic_argument_clause '.' type_identifier
	| type_name '.' type_identifier
	;

type_name
	: identifier
	;

tuple_type
	: '(' tuple_type_body ')'
	| '(' ')'
	;

tuple_type_body
	: tuple_type_element_list DOTDOTDOT_OP
	| tuple_type_element_list
	;

tuple_type_element_list
	: tuple_type_element
	| tuple_type_element ',' tuple_type_element_list
	;

tuple_type_element
	: attributes INOUT type
	| attributes type
	| INOUT type
	| type
	| INOUT element_name type_annotation
	| element_name type_annotation
	;

element_name
	: identifier
	;

function_type
	: type ARROW_OP type
	;

array_type
	: type '[' ']'
	| array_type '[' ']'
	;

optional_type
	: type '?'
	;

implicitly_unwrapped_optional_type
	: type '!'
	;

protocol_composition_type
	: PROTOCOL '<' protocol_identifier_list '>'
	| PROTOCOL '<' '>'
	;

protocol_identifier_list
	: protocol_identifier
	| protocol_identifier ',' protocol_identifier_list
	;

protocol_identifier
	: type_identifier
	;

metatype_type
	: type '.' UTYPE
	| type '.' UPROTOCOL
	;

type_inheritance_clause
	: ':' type_inheritance_list
	;

type_inheritance_list
	: type_identifier
	| type_identifier ',' type_inheritance_list
	;


//
// PATTERNS
//

pattern
	: wildcard_pattern type_annotation
	| wildcard_pattern
	| identifier_pattern type_annotation
	| identifier_pattern
	| value_binding_pattern
	| tuple_pattern type_annotation
	| tuple_pattern
	| enum_case_pattern
	| type_casting_pattern
	| expression_pattern
	;

wildcard_pattern
	: '_'
	;

identifier_pattern
	: identifier
	;

value_binding_pattern
	: VAR pattern
	| LET pattern
	;

tuple_pattern
	: '(' tuple_pattern_element_list ')'
	| '(' ')'
	;

tuple_pattern_element_list
	: tuple_pattern_element
	| tuple_pattern_element ',' tuple_pattern_element_list
	;

tuple_pattern_element
	: pattern
	;

enum_case_pattern
	: type_identifier '.' enum_case_name tuple_pattern
	| type_identifier '.' enum_case_name
	| '.' enum_case_name tuple_pattern
	| '.' enum_case_name
	;

type_casting_pattern
	: is_pattern
	| as_pattern
	;

is_pattern
	: IS type
	;

as_pattern
	: pattern AS type
	;

expression_pattern
	: expression
	;


//
// ATTRIBUTES
//

attribute
	: '@' attribute_name attribute_argument_clause
	| '@' attribute_name
	;

attribute_name
	: identifier
	;

attribute_argument_clause
	: '(' balanced_tokens ')'
	| '(' ')'
	;

attributes
	: attribute
	| attribute attributes
	;

balanced_tokens
	: balanced_token
	| balanced_token balanced_tokens
	;

balanced_token
	: '(' balanced_tokens ')'
	| '(' ')'
	| '[' balanced_tokens ']'
	| '[' ']'
	| '{' balanced_tokens '}'
	| '{' '}'
	| BALANCED_TEXT
	;


//
// EXPRESSIONS
//

expression
	: prefix_expression binary_expressions
	| prefix_expression
	;

expression_list
	: expression
	| expression ',' expression_list
	;

prefix_expression
	: prefix_operator postfix_expression
	| postfix_expression
	| in_out_expression
	;

in_out_expression
	: '&' identifier
	;

binary_expression
	: binary_operator prefix_expression
	| assignment_operator prefix_expression
	| conditional_operator prefix_expression
	| type_casting_operator
	;

binary_expressions
	: binary_expression
	| binary_expression binary_expressions
	;

assignment_operator
	: '='
	;

conditional_operator
	: '?' expression ':'
	;

type_casting_operator
	: IS type
	| AS '?' type
	| AS type
	;

primary_expression
	: identifier generic_argument_clause
	| identifier
	{
		$$ = new IdentifierExpression ((string)$1);
	}
	| literal_expression
	| self_expression
	| superclass_expression
	| closure_expression
	| parenthesized_expression
	| implicit_member_expression
	| wildcard_expression
	;

literal_expression
	: literal
	| array_literal
	| dictionary_literal
	| FILE_DEFINE
	| LINE_DEFINE
	| COLUMN_DEFINE
	| FUNCTION_DEFINE
	;

array_literal
	: '[' array_literal_items ']'
	| '[' ']'
	;

array_literal_items
	: array_literal_item ','
	| array_literal_item
	| array_literal_item ',' array_literal_items
	;

array_literal_item
	: expression
	;

dictionary_literal
	: '[' dictionary_literal_items ']'
	| '[' ':' ']'
	;

dictionary_literal_items
	: dictionary_literal_item ','
	| dictionary_literal_item
	| dictionary_literal_item ',' dictionary_literal_items
	;

dictionary_literal_item
	: expression ':' expression
	;

self_expression
	: SELF
	| SELF '.' identifier
	| SELF '[' expression ']'
	| SELF '.' INIT
	;

superclass_expression
	: superclass_method_expression
	| superclass_subscript_expression
	| superclass_initializer_expression
	;

superclass_method_expression
	: SUPER '.' identifier
	;

superclass_subscript_expression
	: SUPER '[' expression ']'
	;

superclass_initializer_expression
	: SUPER '.' INIT
	;

closure_expression
	: '{' closure_signature statements '}'
	| '{' statements '}'
	;

closure_signature
	: parameter_clause function_result IN
	| parameter_clause IN
	| identifier_list function_result IN
	| identifier_list IN
	| capture_list parameter_clause function_result IN
	| capture_list parameter_clause IN
	| capture_list identifier_list function_result IN
	| capture_list identifier_list IN
	| capture_list IN
	;

capture_list
	: '[' capture_specifier expression ']'
	;

capture_specifier
	: WEAK
	| UNOWNED
	| UNOWNED_SAFE
	| UNOWNED_UNSAFE
	;


implicit_member_expression
	: '.' identifier
	;

parenthesized_expression
	: '(' expression_element_list ')'
	{
		$$ = $2;
	}
	| '(' ')'
	{
		$$ = MakeList<ExpressionElement> ();
	}
	;

expression_element_list
	: expression_element
	{
		$$ = MakeList ((ExpressionElement)$1);
	}
	| expression_element ',' expression_element_list
	{
		$$ = AddToList ((ExpressionElement)$1, $3);
	}
	;

expression_element
	: expression
	{
		$$ = new ExpressionElement ((Expression)$1);
	}
	| identifier ':' expression
	{
		$$ = new ExpressionElement ((string)$1, (Expression)$3);
	}
	;

wildcard_expression
	: '_'
	;

postfix_expression
	: primary_expression
	| postfix_expression postfix_operator
	| function_call_expression
	| initializer_expression
	| explicit_member_expression
	| postfix_self_expression
	| dynamic_type_expression
	| subscript_expression
	| forced_value_expression
	| optional_chaining_expression
	;

function_call_expression
	: postfix_expression parenthesized_expression
	{
		$$ = new FunctionCallExpression ((Expression)$1, (List<ExpressionElement>)$2);
	}
	| postfix_expression parenthesized_expression trailing_closure
	| postfix_expression trailing_closure
	;

trailing_closure
	: closure_expression
	;

initializer_expression
	: postfix_expression '.' INIT
	;

explicit_member_expression
	: postfix_expression '.' NUMBER
	| postfix_expression '.' identifier generic_argument_clause
	| postfix_expression '.' identifier
	;

postfix_self_expression
	: postfix_expression '.' SELF
	;

dynamic_type_expression
	: postfix_expression '.' DYNAMICTYPE
	;

subscript_expression
	: postfix_expression '[' expression_list ']'
	;

forced_value_expression
	: postfix_expression '!'
	;

optional_chaining_expression
	: postfix_expression '?'
	;


//
// LEXICAL
//

identifier
	: IDENTIFIER
	| '$' NUMBER
	;

identifier_list
	: identifier
	| identifier ',' identifier_list
	;

literal
	: INTEGER_LITERAL
	| FLOATING_POINT_LITERAL
	| STRING_LITERAL
	{
		$$ = new StringLiteral ((string)$1);
	}
	;

operator_
	: OPERATOR
	;

binary_operator
	: operator_
	;

prefix_operator
	: operator_
	;

postfix_operator
	: operator_
	;

%%

}



















