%{
using System.Text;
using System.IO;
using System;
using System.Collections.Generic;

#pragma warning disable 219,414

namespace Swiften
{
	public partial class SwiftParser
	{
		const int yacc_verbose_flag = 1;
%}

%token NEWLINE
%token FOR IN DO WHILE
%token IF ELSE
%token SWITCH CASE DEFAULT
%token WHERE
%token IDENTIFIER
%token BREAK CONTINUE FALLTHROUGH RETURN
%token EQEQ_OP
%token CLASS MUTATING NONMUTATING OVERRIDE STATIC UNOWNED UNOWNED_SAFE UNOWNED_UNSAFE WEAK
%token IMPORT TYEPALIAS STRUCT ENUM PROTOCOL VAR FUNC
%token LET
%token GET SET WILLSET DIDSET
%token TYPEALIAS

%start statements
%%

//
// Based on:
//
//   "The Swift Programming Language" Jun 2, 2014
//   https://itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11
//

//
// STATEMENTS
//

statement
	: expression NEWLINE	
	| expression ';'
	| declaration NEWLINE
	| declaration ';'
	| loop_statement NEWLINE
	| loop_statement ';'
	| branch_statement NEWLINE
	| branch_statement ';'
	| labeled_statement NEWLINE
	| control_transfer_statement NEWLINE
	| control_transfer_statement ';'
	;

statements
	: statement
	| statement statements
	;


loop_statement
	: for_statement
	| for_in_statement
	| while_statement
	| do_while_statement
	;

for_statement
	: FOR for_init ';' expression ';' expression code_block
	| FOR for_init ';' expression ';' code_block
	| FOR for_init ';' ';' expression code_block
	| FOR for_init ';' ';' code_block
	| FOR ';' expression ';' expression code_block
	| FOR ';' expression ';' code_block
	| FOR ';' ';' expression code_block
	| FOR ';' ';' code_block
	| FOR '(' for_init ';' expression ';' expression ')' code_block
	| FOR '(' for_init ';' expression ';' ')' code_block
	| FOR '(' for_init ';' ';' expression ')' code_block
	| FOR '(' for_init ';' ';' ')' code_block
	| FOR '(' ';' expression ';' expression ')' code_block
	| FOR '(' ';' expression ';' ')' code_block
	| FOR '(' ';' ';' expression ')' code_block
	| FOR '(' ';' ';' ')' code_block
	;

for_init
	: variable_declaration
	| expression_list
	;

for_in_statement
	: FOR pattern IN expression code_block
	;

while_statement
	: WHILE while_condition code_block
	;

while_condition
	: expression
	| declaration
	;

do_while_statement
	: DO code_block WHILE while_condition
	;

branch_statement
	: if_statement
	| switch_statement
	;

if_statement
	: IF if_condition code_block else_clause
	| IF if_condition code_block
	;

if_condition
	: expression
	| declaration
	;

else_clause
	: ELSE code_block
	| ELSE if_statement
	;

switch_statement
	: SWITCH expression '{' switch_cases '}'
	| SWITCH expression '{' '}'
	;

switch_cases
	: switch_case
	| switch_case switch_cases
	;

switch_case
	: case_label statements
	| default_label statements
	| case_label ';'
	| default_label ';'
	;

case_label
	: CASE case_item_list ':'
	;

case_item
	: pattern guard_clause
	| pattern
	;

case_item_list
	: case_item
	| case_item case_item_list
	;

default_label
	: DEFAULT ':'
	;

guard_clause
	: WHERE guard_expression
	;

guard_expression
	: expression
	;

labeled_statement
	: statement_label loop_statement
	| statement_label switch_statement
	;

statement_label
	: label_name ':'
	;

label_name
	: IDENTIFIER
	;

control_transfer_statement
	: break_statement
	| continue_statement
	| fallthrough_statement
	| return_statement
	;

break_statement
	: BREAK label_name
	| BREAK
	;

continue_statement
	: CONTINUE label_name
	| CONTINUE
	;

fallthrough_statement
	: FALLTHROUGH
	;

return_statement
	: RETURN expression
	| RETURN
	;


//
// GENERIC PARAMETERS AND ARGUMENTS
//

generic_parameter_clause
	: '<' generic_parameter_list requirement_clause '>'
	| '<' generic_parameter_list '>'
	;

generic_parameter_list
	: generic_parameter
	| generic_parameter ',' generic_parameter_list
	;

generic_parameter
	: type_name
	| type_name ':' type_identifier
	| type_name ':' protocol_composition_type
	;

requirement_clause
	: WHERE requirement_list
	;

requirement_list
	: requirement
	| requirement ',' requirement_list
	;

requirement
	: conformance_requirement
	| same_type_requirement
	;

conformance_requirement
	: type_identifier ':' type_identifier
	| type_identifier ':' protocol_composition_type
	;

same_type_requirement
	: type_identifier EQEQ_OP type_identifier
	;

generic_argument_clause
	: '<' generic_argument_list '>'
	;

generic_argument_list
	: generic_argument
	| generic_argument ',' generic_argument_list
	;

generic_argument
	: type
	;



//
// DECLARATIONS
//

declaration
	: import_declaration
	| constant_declaration
	| variable_declaration
	| typealias_declaration
	| function_declaration
	| enum_declaration
	| struct_declaration
	| class_declaration
	| protocol_declaration
	| initializer_declaration
	| deinitializer_declaration
	| extension_declaration
	| subscript_declaration
	| operator_declaration
	;

declarations
	: declaration
	| declaration declarations
	;

declaration_specifiers
	: declaration_specifier
	| declaration_specifier declaration_specifiers
	;

declaration_specifier
	: CLASS
	| MUTATING
	| NONMUTATING
	| OVERRIDE
	| STATIC
	| UNOWNED
	| UNOWNED_SAFE
	| UNOWNED_UNSAFE
	| WEAK
	;

top_level_declaration
	: statements
	|
	;

code_block
	: '{' statements '}'
	| '{' '}'
	;

import_declaration
	: attributes IMPORT import_kind import_path
	| attributes IMPORT import_path
	| IMPORT import_kind import_path
	| IMPORT import_path
	;

import_kind
	: TYEPALIAS
	| STRUCT
	| CLASS
	| ENUM
	| PROTOCOL
	| VAR
	| FUNC
	;

import_path
	: import_path_identifier
	| import_path_identifier '.' import_path
	;

import_path_identifier
	: IDENTIFIER
	| operator_
	;

constant_declaration
	: attributes declaration_specifiers LET pattern_initializer_list
	| attributes LET pattern_initializer_list
	| declaration_specifiers LET pattern_initializer_list
	| LET pattern_initializer_list
	;

pattern_initializer_list
	: pattern_initializer
	| pattern_initializer ',' pattern_initializer_list
	;

pattern_initializer
	: pattern initializer
	| pattern
	;

initializer
	: expression
	;

variable_declaration
	: variable_declaration_head pattern_initializer_list
	| variable_declaration_head variable_name type_annotation code_block
	| variable_declaration_head variable_name type_annotation getter_setter_block
	| variable_declaration_head variable_name type_annotation getter_setter_keyword_block
	| variable_declaration_head variable_name type_annotation initializer willSet_didSet_block
	| variable_declaration_head variable_name type_annotation willSet_didSet_block
	;

variable_declaration_head
	: attributes declaration_specifiers VAR
	| attributes VAR
	| declaration_specifiers VAR
	| VAR
	;

variable_name
	: IDENTIFIER
	;

getter_setter_block
	: '{' getter_clause setter_clause '}'
	| '{' getter_clause '}'
	| '{' setter_clause getter_clause '}'
	;

getter_clause
	: attributes GET code_block
	| GET code_block
	;

setter_clause
	: attributes SET setter_name code_block
	| attributes SET code_block
	| SET setter_name code_block
	| SET code_block
	;

setter_name
	: '(' IDENTIFIER ')'
	;

getter_setter_keyword_block
	: '{' getter_keyword_clause setter_keyword_clause '}'
	| '{' getter_keyword_clause '}'
	| '{' setter_keyword_clause getter_keyword_clause '}'
	;

getter_keyword_clause
	: attributes GET
	| GET
	;

setter_keyword_clause
	: attributes SET
	| SET
	;

willSet_didSet_block
	: '{' willSet_clause didSet_clause '}'
	| '{' willSet_clause '}'
	| '{' didSet_clause willSet_clause '}'
	;

willSet_clause
	: attributes WILLSET setter_name code_block
	| attributes WILLSET code_block
	| WILLSET setter_name code_block
	| WILLSET code_block
	;

didSet_clause
	: attributes DIDSET setter_name code_block
	| attributes DIDSET code_block
	| DIDSET setter_name code_block
	| DIDSET code_block
	;

typealias_declaration
	: typealias_head typealias_assignment
	;

typealias_head
	: TYPEALIAS typealias_name
	;

typealias_name
	: IDENTIFIER
	;

typealias_assignment
	: '=' type
	;


%%

}


































